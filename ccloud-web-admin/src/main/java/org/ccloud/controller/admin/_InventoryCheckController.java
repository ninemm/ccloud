/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.math.BigDecimal;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.interceptor.UCodeInterceptor;
import org.ccloud.model.InventoryCheck;
import org.ccloud.model.InventoryCheckDetail;
import org.ccloud.model.Warehouse;
import org.ccloud.model.query.InventoryCheckQuery;
import org.ccloud.model.query.WarehouseQuery;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;

import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;
import com.jfinal.plugin.activerecord.Page;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/inventoryCheck", viewPath = "/WEB-INF/admin/inventory_check")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _InventoryCheckController extends JBaseCRUDController<InventoryCheck> { 

	
	public void list() {

		String keyword = getPara("k");
		if (StrKit.notBlank(keyword)) {
			keyword = StringUtils.urlDecode(keyword);
			setAttr("k", keyword);
		}

		Page<InventoryCheck> page = InventoryCheckQuery.me().paginate(getPageNumber(), getPageSize(), keyword, "create_date");
		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
		renderJson(map);

	}
	
	@Before(UCodeInterceptor.class)
	public void batchDelete() {

		String[] ids = getParaValues("dataItem");
		int count = InventoryCheckQuery.me().batchDelete(ids);
		if (count > 0) {
			renderAjaxResultForSuccess("删除成功");
		} else {
			renderAjaxResultForError("删除失败!");
		}

	}
	
	public void enable() {
		String id = getPara("id");
		int isEnabled = getParaToInt("isEnabled");
		InventoryCheck inventoryCheck = InventoryCheckQuery.me().findById(id);
		inventoryCheck.setStatus(isEnabled);
		if (inventoryCheck.saveOrUpdate()) {
			renderAjaxResultForSuccess("更新成功");
		} else {
			renderAjaxResultForError("更新失败");
		}
	}
	
	public void edit() {	
		
		String id = getPara("id");
		if (id != null) {
			InventoryCheck inventoryCheck = InventoryCheckQuery.me().findById(id);
			setAttr("inventoryCheck", inventoryCheck);
		}
		List<Warehouse> wlist = WarehouseQuery.me().findAll();
		setAttr("wlist", wlist);
	}
	
	
	@SuppressWarnings("unused")
	@Override
	public void save() {		
	 InventoryCheck inventoryCheck = getModel(InventoryCheck.class);
	 Map<String, String[]> map = getParaMap();
	 boolean update = false;
	  if (StringUtils.isBlank(inventoryCheck.getId())) {
		  inventoryCheck.setId(StrKit.getRandomUUID());
		  inventoryCheck.setCreateDate(new Date());
		  inventoryCheck.setBillSn("Y20171101001");
		  inventoryCheck.setDeptId("9ec18b144c1d46ea91b3d30f0e91f41b");
		  inventoryCheck.setDataArea("0102bcb2");
		  inventoryCheck.setBizDate(new Date());
	    }else {
	    	update = true;
		}
		boolean status = this.saveInventoryCheckInfo(map, inventoryCheck, update);
		if (status) {
			renderAjaxResultForSuccess("ok");
		}
	}
	
	
	public boolean saveInventoryCheckInfo(final Map<String, String[]>map,final InventoryCheck inventoryCheck,final boolean update) {
		boolean isSave = Db.tx(new IAtom() {
			@Override
			public boolean run() throws SQLException {
				if (update) {
					inventoryCheck.saveOrUpdate();
				}else {
					inventoryCheck.save();
				}
				
				//存储盘点单子表信息
				List<InventoryCheckDetail> iSaveList = new ArrayList<>();
				String[] factIndex = map.get("factIndex");
        		int loopEnd = 1;
				 for (int i = 1; i<factIndex.length; i++) {
					 InventoryCheckDetail inventoryCheckDetail = getModel(InventoryCheckDetail.class);
					 String goodsId = StringUtils.getArrayFirst(map.get("iCheckDetailList[" + i +"].goods_id"));
					 String goodsCount = StringUtils.getArrayFirst(map.get("iCheckDetailList[" + i + "].goods_count"));
					 String remark = StringUtils.getArrayFirst(map.get("iCheckDetailList[" + i + "].remark"));
					 
				     inventoryCheckDetail.setGoodsId(goodsId);
				     inventoryCheckDetail.setGoodsCount(Integer.parseInt(goodsCount));
				     inventoryCheckDetail.setRemark(remark);
				     inventoryCheckDetail.setInventoryCheckId(inventoryCheck.getId());
				     inventoryCheckDetail.setId(StrKit.getRandomUUID());
				     inventoryCheckDetail.setGoodsAmount(BigDecimal.valueOf(10000));
				     inventoryCheckDetail.setDeptId(inventoryCheck.getDeptId());
				     inventoryCheckDetail.setDataArea(inventoryCheck.getDataArea());
				     iSaveList.add(inventoryCheckDetail);
 					loopEnd++;
 					if (loopEnd == factIndex.length) {
    					break;
    				}
				  }
				
                try {
					Db.batchSave(iSaveList, iSaveList.size());
				} catch (Exception e) {
					e.printStackTrace();
					return false;
				}
				return true;
                
			}
		});				
		return isSave;
		
	}
		
}
