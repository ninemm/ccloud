/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.util.List;
import java.util.Map;

import org.ccloud.Consts;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.model.Inventory;
import org.ccloud.model.query.InventoryQuery;
import org.ccloud.model.query.StockTakingDetailQuery;
import org.ccloud.model.InventoryDetail;
import org.ccloud.model.User;
import org.ccloud.model.query.InventoryDetailQuery;

import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/inventory", viewPath = "/WEB-INF/admin/inventory")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _InventoryController extends JBaseCRUDController<Inventory> { 

	public void getWarehouse() {
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		String userId = user.getId();
		List<Record> list = InventoryQuery.me().getWareHouseInfo(userId);
		renderJson(list);
	}
	
	public void list() {
		String warehouse_id = getPara("warehouse_id");
		String product_sn = getPara("product_sn");
		String product_name = getPara("product_name");
		String seller_id=getSessionAttr("sellerId").toString();
		
		Page<Inventory> page = InventoryQuery.me().paginate(getPageNumber(), getPageSize(),product_sn,product_name,warehouse_id,seller_id);
		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
		renderJson(map);
	}
	
	public void renderlist() {
		setAttr("warehouse_id", getPara("warehouse_id"));
		setAttr("product_id", getPara("product_id"));
		setAttr("seller_id", getPara("seller_id"));
		render("detaillist.html");
	}
	
	public void detaillist() {
		String warehouse_id = getPara("warehouse_id");
		String seller_id = getPara("seller_id");
		String product_id = getPara("product_id");
		String start_date = getPara("start_date");
		String end_date = getPara("end_date");
		List<Record> selectSellProductId = StockTakingDetailQuery.me().selectSellProductId(product_id,seller_id);
		String sell_product_id=selectSellProductId.get(0).getStr("id");
		Page<InventoryDetail> page = InventoryDetailQuery.me().paginate(getPageNumber(), getPageSize(),warehouse_id,sell_product_id,start_date,end_date);
		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
		renderJson(map);
	}
}
