/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 * <p>
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.gnu.org/licenses/lgpl-3.0.txt
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.util.List;
import java.util.Map;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.ccloud.Consts;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.model.CustomerType;
import org.ccloud.model.Department;
import org.ccloud.model.query.CustomerTypeQuery;
import org.ccloud.model.query.DepartmentQuery;
import org.ccloud.model.query.PriceSystemQuery;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;
import org.ccloud.workflow.model.ActReProcdef;
import org.ccloud.workflow.query.ActReProcdefQuery;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/customerType", viewPath = "/WEB-INF/admin/customer_type")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _CustomerTypeController extends JBaseCRUDController<CustomerType> {

    @Override
    @RequiresPermissions(value = {"/admin/customerType", "/admin/dealer/all", "/admin/all"}, logical = Logical.OR)
    public void index() {
        render("index.html");
    }

    @RequiresPermissions(value = {"/admin/customerType", "/admin/dealer/all", "/admin/all"}, logical = Logical.OR)
    public void list() {
        String dealerDataArea = getSessionAttr(Consts.SESSION_DEALER_DATA_AREA);

        String keyword = getPara("k");
        if (StrKit.notBlank(keyword)) {
            keyword = StringUtils.urlDecode(keyword);
        }
        String show = getPara("show");

        Page<Record> page = null;
        if (SecurityUtils.getSubject().isPermitted("/admin/all")) {
            page = CustomerTypeQuery.me().paginate(getPageNumber(), getPageSize(), keyword, show, null);
        } else {
            page = CustomerTypeQuery.me().paginate(getPageNumber(), getPageSize(), keyword, show,
                    dealerDataArea);
        }
        Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
        renderJson(map);

    }

    @RequiresPermissions(value = {"/admin/customerType/edit", "/admin/dealer/all",
            "/admin/all"}, logical = Logical.OR)
    public void enable() {

        String id = getPara("id");
        int show = getParaToInt("show");

        if (CustomerTypeQuery.me().enable(id, show)) {
            renderAjaxResultForSuccess();
        } else {
            renderAjaxResultForError();
        }
    }

    @Override
    @RequiresPermissions(value = {"/admin/customerType/edit", "/admin/dealer/all",
            "/admin/all"}, logical = Logical.OR)
    public void edit() {
        String id = getPara("id");

        boolean notBlank = StrKit.notBlank(id);
        boolean isSuperAdmin = SecurityUtils.getSubject().isPermitted("/admin/all");

        String dealerDataArea = getSessionAttr(Consts.SESSION_DEALER_DATA_AREA);
        Department dealerDept = DepartmentQuery.me().findByDataArea(dealerDataArea);

        if (notBlank && isSuperAdmin) {// 超级管理员修改
            Record customerType = CustomerTypeQuery.me().findMoreById(id);
            List<Record> priceSystemList = PriceSystemQuery.me().findPriceSystemByDeptId(customerType.getStr("dept_id"),
                    customerType.getStr("data_area"));
            setAttr("customerType", customerType);
            setAttr("priceSystemList", priceSystemList);

        } else if (notBlank && !isSuperAdmin) {// 经销商管理员修改
            setAttr("customerType", CustomerTypeQuery.me().findById(id));
            setAttr("priceSystemList", PriceSystemQuery.me().findPriceSystemByDeptId(dealerDept.getId(),
                    dealerDataArea));

        } else if (!notBlank && !isSuperAdmin) {// 经销商管理员新增
            setAttr("priceSystemList", PriceSystemQuery.me().findPriceSystemByDeptId(dealerDept.getId(),
                    dealerDataArea));
        }

        List<ActReProcdef> procDefList = ActReProcdefQuery.me().findListInNormal();
        setAttr("procDefList", procDefList);

        render("edit.html");
    }

    @Override
    @RequiresPermissions(value = {"/admin/customerType/edit", "/admin/dealer/all",
            "/admin/all"}, logical = Logical.OR)
    public void save() {

        CustomerType customerType = getModel(CustomerType.class);
        String dealerDataArea = getSessionAttr(Consts.SESSION_DEALER_DATA_AREA);
        Department dealerDept = DepartmentQuery.me().findByDataArea(dealerDataArea);
        if (StrKit.isBlank(customerType.getId())) {
        	customerType.setIsParent(0);
        }

        if (SecurityUtils.getSubject().isPermitted("/admin/all")) {
            customerType.set("dept_id", getPara("parent_id"));
            customerType.set("data_area", getPara("data_area"));
        } else {
            customerType.set("dept_id", dealerDept.getId());
            customerType.set("data_area", dealerDataArea);
        }

        customerType.saveOrUpdate();
        CustomerTypeQuery.me().updateParent(customerType);

        renderAjaxResultForSuccess();

    }

    @RequiresPermissions(value = {"/admin/customerType/edit", "/admin/dealer/all",
            "/admin/all"}, logical = Logical.OR)
    public void findPriceSystemByDeptId() {
        List<Record> priceSystemList = PriceSystemQuery.me().findPriceSystemByDeptId(getPara("parent_id"),
                getPara("data_area"));

        renderJson(priceSystemList);

    }
    
    public void checkCode() {
    	String code = getPara("code");
    	String dealerDataArea = getSessionAttr(Consts.SESSION_DEALER_DATA_AREA);
    	List<CustomerType> customerTypes = CustomerTypeQuery.me().findByDataArea(dealerDataArea);
    	for(CustomerType customerType : customerTypes) {
    		if(code.equals(customerType.getCode())) {
    			renderAjaxResultForError("客户类型编码重复！");
    			return;
    		}
    	}
    	renderJson(true);
    }
    
    public void type_tree() {
    	String dataArea = getSessionAttr(Consts.SESSION_DEALER_DATA_AREA);
        List<Map<String, Object>> list = CustomerTypeQuery.me().findCustomerTypeListAsTree(1, dataArea);
        setAttr("treeData", JSON.toJSON(list));
    }
    
}
