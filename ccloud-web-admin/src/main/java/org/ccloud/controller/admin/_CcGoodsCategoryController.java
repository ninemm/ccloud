/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.interceptor.UCodeInterceptor;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;
import org.ccloud.model.CcBrand;
import org.ccloud.model.CcGoodsCategory;
import org.ccloud.model.CcSupplier;
import org.ccloud.model.query.CcBrandQuery;
import org.ccloud.model.query.CcGoodsCategoryQuery;
import org.ccloud.model.query.CcSupplierQuery;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/category", viewPath = "/WEB-INF/admin/goods_category")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _CcGoodsCategoryController extends JBaseCRUDController<CcGoodsCategory> { 

	public void list() {
        String keyword = getPara("k");
        if (StrKit.notBlank(keyword)) {
            keyword = StringUtils.urlDecode(keyword);
            setAttr("k", keyword);
        }
        
        String parentId = getPara("parentId", "0");

        Page<CcGoodsCategory> page = CcGoodsCategoryQuery.me().
        		paginate(getPageNumber(), getPageSize(), parentId, keyword, "order_list");
        Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
        renderJson(map);		
		
	}
	
	@Override
	public void save() {
		
		final CcGoodsCategory category = getModel(CcGoodsCategory.class);
		category.setIsParent(0);
		if (category.saveOrUpdate()) {
			renderAjaxResultForSuccess("ok");
		} else {
			renderAjaxResultForError("false");
		}
	}	
	
	@Override
	public void edit() {
		String id = getPara("id");
		if (id != null) {
			CcGoodsCategory category = CcGoodsCategoryQuery.me().findById(id);
			setAttr("ccGoodsCategory", category);
			
			List<CcBrand> list = CcBrandQuery.me().findBySupplierId(category.getSupplierId());
			setAttr("blist", list);
		}
		List<CcSupplier> list = CcSupplierQuery.me().findAll();
		setAttr("list", list);
	}	
	
	@Before(UCodeInterceptor.class)
	public void batchDelete() {
		String[] ids = getParaValues("dataItem");
		int count = CcGoodsCategoryQuery.me().batchDelete(ids);
		if (count > 0) {
			renderAjaxResultForSuccess("删除成功");
		} else {
			renderAjaxResultForError("删除失败!");
		}
		
	}
	
	@Override
	public void delete() {
		String id = getPara("id");
		final CcGoodsCategory category = CcGoodsCategoryQuery.me().findById(id);
		if (category != null) {
            List<String> ids = new ArrayList<>();
            ids.add(id);
			if (category.getIsParent() > 0) {
                List<CcGoodsCategory> categoryList = CcGoodsCategoryQuery.me().findByParentId(id);
                for (CcGoodsCategory categoryInfo : categoryList) {
					ids.add(categoryInfo.getId());
				}
			}
            int count = CcGoodsCategoryQuery.me().batchDelete(ids);
            if (count > 0) {
                renderAjaxResultForSuccess("删除成功");
            } else {
                renderAjaxResultForError("删除失败");
            }
		}
	}
	
	public void category_tree() {
		List<Map<String, Object>> list = CcGoodsCategoryQuery.me().findCategoryListAsTree(1);
		setAttr("treeData", JSON.toJSON(list));
	}
	
	public void getBrand() {
        String id = getPara("supplierid");
        List<CcBrand> brands = CcBrandQuery.me().findBySupplierId(id);
        List<Map<String, Object>> list = new ArrayList<>();

        for (CcBrand brand : brands) {
            Map<String, Object> map = new HashMap<>();

            map.put("id", brand.getId());
            map.put("name", brand.getName());

            list.add(map);
        }

        renderJson(list);
	}
	
}
