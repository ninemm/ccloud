/**
 * Copyright (c) 2015-2018, Wally Wang 王勇 (wally8292@163.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.lang.reflect.InvocationTargetException;
import java.sql.SQLException;
import java.util.Calendar;
import java.util.Map;

import org.apache.commons.beanutils.BeanUtils;
import org.ccloud.Consts;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.model.Department;
import org.ccloud.model.Seller;
import org.ccloud.model.SellerSynchronize;
import org.ccloud.model.User;
import org.ccloud.model.query.DepartmentQuery;
import org.ccloud.model.query.SellerSynchronizeQuery;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;

import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.tx.Tx;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/seller_synchronize", viewPath = "/WEB-INF/admin/seller_synchronize")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _SellerSynchronizeController extends JBaseCRUDController<SellerSynchronize> { 
	@Override
	public void index() {
		render("index.html");
	}
	
	public void list() {
        String keyword = getPara("k");
        if (StrKit.notBlank(keyword)) {
            keyword = StringUtils.urlDecode(keyword);
            setAttr("k", keyword);
        }
        
        String parentId = getPara("parentId");
        String deptFlag = getPara("hasModifyDept");

        Page<SellerSynchronize> page = SellerSynchronizeQuery.me().paginateSynchronize(getPageNumber(), getPageSize(),keyword, parentId, deptFlag);
        Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
        renderJson(map);
	}
	
	@Override
	public void edit() {
		String id = getPara("id");
		if (id != null) {
			SellerSynchronize sellerSynchronize = SellerSynchronizeQuery.me().findById(id);
			setAttr("seller", sellerSynchronize);
		}
	}
	
	//保存销售商信息及对应的表
	/* (non-Javadoc)
	 * @see org.ccloud.core.JBaseCRUDController#save()
	 */
	@Before(Tx.class)
	public void save() {
		final Department department = DepartmentQuery.me().findById(getPara("dept_id"));
		if(department == null) {
			renderAjaxResultForError("部门不能为空");
			return;
		}
		final User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		final SellerSynchronize sellerSynchronize = getModel(SellerSynchronize.class);
		String id = sellerSynchronize.getId();

		final SellerSynchronize dbSeller = SellerSynchronizeQuery.me().findById(id);
		if(StrKit.notBlank(dbSeller.getDeptId())){
			renderAjaxResultForError("该经销商已有部门");
			return;
		}
		
		Db.tx(new IAtom() {
			@Override
			public boolean run() throws SQLException {
				Seller seller = new Seller();
				boolean success = false;
				try {
					_SellerSynchronizeController.this.updateSeller(dbSeller, department, user);
					BeanUtils.copyProperties(seller, dbSeller);
					seller.setId(StrKit.getRandomUUID());
					seller.setDataArea(department.getDataArea());
					seller.save();
					success = true;
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				} catch (InvocationTargetException e) {
					e.printStackTrace();
				}
				return success;
			}
		});
		renderAjaxResultForSuccess();
	}
	
	public void updateSeller(SellerSynchronize seller,Department department,User user){
		seller.setDeptId(department.getId());
		seller.setModifyUserId(user.getId());
		seller.setModifyDate(Calendar.getInstance().getTime());
		seller.update();
	}
}
