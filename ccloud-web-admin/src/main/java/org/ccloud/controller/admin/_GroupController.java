/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.interceptor.UCodeInterceptor;
import org.ccloud.model.Group;
import org.ccloud.model.GroupRoleRel;
import org.ccloud.model.Role;
import org.ccloud.model.query.GroupQuery;
import org.ccloud.model.query.GroupRoleRelQuery;
import org.ccloud.model.query.RoleQuery;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;

import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/group", viewPath = "/WEB-INF/admin/group")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _GroupController extends JBaseCRUDController<Group> {
    @Override
    public void index() {

        String keyword = getPara("k");
        if (StrKit.notBlank(keyword)) setAttr("k", keyword);


        Page<Group> page = GroupQuery.me().paginate(getPageNumber(), getPageSize(), keyword, "order_list");
        if (page != null) {
            setAttr("page", page);
        }

    }

    public  void getRole() {
        String id = getPara("groupid");
        List<Role> roles = RoleQuery.me().findAll();
        List<Map<String, Object>> list = new ArrayList<>();
        for (Role role : roles) {
            Map<String, Object> map = new HashMap<>();
            map.put("id", role.getId());
            map.put("name", role.getRoleName());
            if (RoleQuery.me().queryRoleGroupRelation(role.getId(), id).size() == 0) map.put("isvalid", 0);
            else map.put("isvalid", 1);
            list.add(map);
        }
        renderJson(list);
    }

    public void saveGroupAndGroupRoleRel()  {
        boolean bl = Db.tx(new IAtom() {
            @Override
            public boolean run() throws SQLException {
                Group group = getModel(Group.class);

                String roleList = getPara("roleList");
                String[] roleId = roleList.split(",");

//        更新
                if (group.saveOrUpdate()) {
                    String groupId = group.getId();

//            先删除GroupRoleRel表中的groupId的所有数据
                    List<GroupRoleRel> groupRoleRelList = GroupRoleRelQuery.me().findIdsByGroupId(groupId);
                    String[] ids = new String[groupRoleRelList.size()];
                    for (int i = 0; i < groupRoleRelList.size(); i++)
                        ids[i] = groupRoleRelList.get(i).getId();

                    if (GroupRoleRelQuery.me().batchDelete(ids) != ids.length) return false ;
//            添加新的关系
                    for (int i = 0; i < roleId.length; i++) {
                        GroupRoleRel groupRoleRel = getModel(GroupRoleRel.class);
                        groupRoleRel.setGroupId(groupId);
                        groupRoleRel.setRoleId(roleId[i]);
                        if (!groupRoleRel.saveOrUpdate()) return false;
                    }
                } else {
                    return false;
                }
                return true;
            }
        });
        if (bl) renderAjaxResultForSuccess();
        else renderAjaxResultForError();
    }

    @Override
    @Before(UCodeInterceptor.class)
    public void delete() {
        boolean bl = Db.tx(new IAtom() {
            @Override
            public boolean run() throws SQLException {
                String id = getPara("id");
                try {
                    GroupRoleRelQuery.me().deleteByGroupId(id);
                    _GroupController.super.delete();
                    return true;
                }catch (Exception e) {
                    return false;
                }
            }
        });
        if(bl) renderAjaxResultForSuccess();
        else renderAjaxResultForError();
    }

    @Before(UCodeInterceptor.class)
    public void batchDelete() {

        String[] ids = getParaValues("dataItem");
        int count = GroupQuery.me().batchDelete(ids);

        for (String groupId : ids)
            GroupRoleRelQuery.me().deleteByGroupId(groupId);

        if (count > 0) {
            renderAjaxResultForSuccess("删除成功");
        } else {
            renderAjaxResultForError("删除失败!");
        }

    }
}

