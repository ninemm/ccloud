/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.time.DateFormatUtils;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.ccloud.Consts;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;
import org.ccloud.model.Inventory;
import org.ccloud.model.InventoryDetail;
import org.ccloud.model.PurchaseInstock;
import org.ccloud.model.PurchaseInstockDetail;
import org.ccloud.model.PurchaseOrder;
import org.ccloud.model.PurchaseOrderDetail;
import org.ccloud.model.PurchaseRefundOutstock;
import org.ccloud.model.Seller;
import org.ccloud.model.SellerProduct;
import org.ccloud.model.User;
import org.ccloud.model.query.InventoryQuery;
import org.ccloud.model.query.PurchaseInstockDetailQuery;
import org.ccloud.model.query.PurchaseInstockQuery;
import org.ccloud.model.query.PurchaseOrderDetailQuery;
import org.ccloud.model.query.PurchaseOrderQuery;
import org.ccloud.model.query.PurchaseRefundOutstockQuery;
import org.ccloud.model.query.SellerProductQuery;
import org.ccloud.model.query.SellerQuery;
import org.ccloud.model.vo.PurchaseInstockDetailInfo;
import org.ccloud.model.vo.PurchaseSeller;
import org.ccloud.model.vo.SellerProductInfo;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/purchaseInstock", viewPath = "/WEB-INF/admin/purchase_instock")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
@RequiresPermissions("/admin/purchaseInstock")
public class _PurchaseInstockController extends JBaseCRUDController<PurchaseInstock> { 
	
	@Override
	public void index() {
		String date = DateFormatUtils.format(new Date(), "yyyy-MM-dd");

		setAttr("startDate", date);
		setAttr("endDate", date);

		render("index.html");
	}

	public void list() {
		String dataArea = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		String keyword = getPara("k");
		if (StrKit.notBlank(keyword)) {
			keyword = StringUtils.urlDecode(keyword);
		}

		String startDate = getPara("startDate");
		String endDate = getPara("endDate");
		String sellerId = getSessionAttr("sellerId");
		Seller seller = SellerQuery.me().findById(sellerId);
		Page<Record> page = PurchaseInstockQuery.me().paginate(getPageNumber(), getPageSize(), keyword, startDate, endDate,seller.getDeptId(),dataArea);

		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
		renderJson(map);

	}
	
	public void listOther(){
		String keyword = getPara("k");
		if (StrKit.notBlank(keyword)) {
			keyword = StringUtils.urlDecode(keyword);
		}

		String startDate = getPara("startDate");
		String endDate = getPara("endDate");
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		String data = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		String sellerId = getSessionAttr("sellerId");
		Seller seller = SellerQuery.me().findById(sellerId);
		String p = "";
		List<PurchaseRefundOutstock> list = PurchaseRefundOutstockQuery.me().findByUser(seller.getDeptId(), data);
		if(list.size()>0){	
			String pro = "";
			for(int i=0;i<list.size();i++){
				pro += "'"+list.get(i).getWarehouseInId()+"',"; 
			}
			p = pro.substring(0, pro.length()-1);
		}else{
			p = "''";
		}
		Page<Record> page = PurchaseInstockQuery.me().paginateO(getPageNumber(), getPageSize(), keyword, startDate, endDate,user.getId(),data,p,seller.getDeptId());

		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
		renderJson(map);
	}
	
	public void detail() {
		String instockId = getPara(0);

		setAttr("instockId", instockId);
		render("detail.html");

	}
	public void instockDetail() {
		String instockId = getPara(0);

		setAttr("instockId", instockId);
		render("getDetail.html");

	}
	//通过采购订单查看入库详情
	/*public void instock_detail(){
		String orderId = getPara(0);
		String instockId = PurchaseInstockDetailQuery.me().findOrderId(orderId).getPurchaseInstockId();
		setAttr("instockId", instockId);
		render("getDetail.html");
	}*/
	
	public void add() {
		render("add.html");
	}
	
	public void orderIndex(){
		render("purchase_order_index.html");
	}
	
	public void orderDetail(){
		String orderId = getPara(0);
		Record order = PurchaseOrderQuery.me().findMoreById(orderId);
		List<Record> orderDetail = PurchaseOrderDetailQuery.me().findByOutstockId(orderId);

		setAttr("order", order);
		setAttr("orderDetail", orderDetail);

		render("purchase_order_detail.html");
	}
	
	public void refund() {
		String orderId = getPara("orderId");
		Record order = PurchaseOrderQuery.me().findMoreById(orderId);
		List<Record> orderDetail = PurchaseOrderDetailQuery.me().findByOutstockId(orderId);

		HashMap<String, Object> result = Maps.newHashMap();
		result.put("order", order);
		result.put("orderDetail", orderDetail);

		renderJson(result);
	}
	
	@Override
	@Before(Tx.class)
	public void save(){
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		Map<String, String[]> paraMap = getParaMap();
		String purchaseInstockId = StringUtils.getArrayFirst(paraMap.get("purchaseInstockId"));
		PurchaseInstock purchaseInstock = PurchaseInstockQuery.me().findById(purchaseInstockId);
		List<PurchaseInstockDetail> instockDetails = PurchaseInstockDetailQuery.me().findAllByPurchaseInstockId(purchaseInstockId);
		List<PurchaseInstockDetail> details = instockDetails;
		purchaseInstock.set("status", 1000);//已通过
		purchaseInstock.set("remark",  StringUtils.getArrayFirst(paraMap.get("remark")));
		purchaseInstock.set("dept_id", user.getDepartmentId());
		purchaseInstock.set("data_area", user.getDataArea());
		purchaseInstock.set("modify_date", new Date());
		String productNumStr = StringUtils.getArrayFirst(paraMap.get("productNum"));
		Integer productNum = Integer.valueOf(productNumStr);
		
		BigDecimal totalAmount = new BigDecimal(0);
		List<String> lists = new ArrayList<String>();
		for(int i = 1;i<=productNum;i++){
			String purchaseOederDetailId = StringUtils.getArrayFirst(paraMap.get("purchaseOrderDetailId"+i));
			if(!lists.contains(purchaseOederDetailId)){
				lists.add(purchaseOederDetailId);
            }
		}
		int ind = 0 ;
		for(String pid : lists){
			int productCount = 0;
			String convertt = "";
			for(int j = 1; j<=productNum;j++){
				String purchaseOederDetailId = StringUtils.getArrayFirst(paraMap.get("purchaseOrderDetailId"+j));
				String convert = StringUtils.getArrayFirst(paraMap.get("convert" + j));
				String bN = StringUtils.getArrayFirst(paraMap.get("bN" + j));
				String sN = StringUtils.getArrayFirst(paraMap.get("sN" + j));
				if(bN==null){
					bN = "0";
				}
				if(sN == null){
					sN = "0";
				}
				Integer productCount0 = Integer.valueOf(bN) * Integer.valueOf(convert) + Integer.valueOf(sN);
				if(purchaseOederDetailId.equals(pid)){
					convertt = StringUtils.getArrayFirst(paraMap.get("convert" + j));
					productCount += productCount0;
					ind++;
				}
			}
			String bigNum = StringUtils.getArrayFirst(paraMap.get("bigNum" + ind));
			String smallNum = StringUtils.getArrayFirst(paraMap.get("smallNum" + ind));
			Integer productCountt = Integer.valueOf(bigNum) * Integer.valueOf(convertt) + Integer.valueOf(smallNum);
			if(productCount!=productCountt){
				renderAjaxResultForError("商品数量输入有误，请核对后重新输入！");
				return;
			}
		}
		
		Integer index = 0;
		for (Integer count = 0;count<productNum;count++) {
			index++;
			String sellerProductId = StringUtils.getArrayFirst(paraMap.get("sellerProductId"+index));
			for(int i = 0;i<instockDetails.size();i++){
				if(sellerProductId.equals(instockDetails.get(i).getSellerProductId())){
						details.remove(instockDetails.get(i));
				}
			}
			String purchaseOederDetailId = StringUtils.getArrayFirst(paraMap.get("purchaseOrderDetailId"+index));
			PurchaseOrder order = PurchaseOrderQuery.me().findByPurchaseInstockDetailId(purchaseOederDetailId);
			PurchaseInstockDetail purchaseInstockDetail = PurchaseInstockDetailQuery.me().findByPSId(purchaseInstockId,sellerProductId);
			if(order !=null){
				PurchaseOrderDetail purchaseOrderDetail = PurchaseOrderDetailQuery.me().findById(purchaseInstockDetail.getPurchaseOrderDetailId());
				PurchaseOrder purchaseOrder = PurchaseOrderQuery.me().findById(purchaseOrderDetail.getPurchaseOrderId());
				purchaseOrder.set("status", 3000);
				purchaseOrder.set("modify_date",new Date());
				purchaseOrder.update();
			}
			if (StrKit.notBlank(sellerProductId)) {
				String convert = StringUtils.getArrayFirst(paraMap.get("convert" + index));
				String bN = StringUtils.getArrayFirst(paraMap.get("bN" + index));
				String sN = StringUtils.getArrayFirst(paraMap.get("sN" + index));
				if(bN==null){
					bN = "0";
				}
				if(sN == null){
					sN = "0";
				}
				Integer productCount0 = Integer.valueOf(bN) * Integer.valueOf(convert) + Integer.valueOf(sN);
				BigDecimal productAmount =  (purchaseInstockDetail.getProductPrice().multiply(new BigDecimal(bN))).add(((purchaseInstockDetail.getProductPrice().divide((new BigDecimal(convert)), 2, BigDecimal.ROUND_HALF_UP))).multiply(new BigDecimal(sN)));
				purchaseInstockDetail.set("product_count", productCount0);
				purchaseInstockDetail.set("product_amount", productAmount);
				purchaseInstockDetail.set("modify_date", new Date());
				purchaseInstockDetail.update();
				
				totalAmount = totalAmount.add(productAmount);
			}
		}
		for(PurchaseInstockDetail d: details){
			d.delete();
		}
		purchaseInstock.set("total_amount",totalAmount);
		purchaseInstock.update();
		
		//对库存总账进行修改
		boolean flang = false;
		final InventoryDetail inventoryDetail= getModel(InventoryDetail.class);
		Seller seller = SellerQuery.me().findById(getSessionAttr("sellerId").toString());
		List<PurchaseInstockDetail> list= PurchaseInstockDetailQuery.me().findAllByPurchaseInstockId(purchaseInstockId);
		for(PurchaseInstockDetail pi : list){
			BigDecimal count2 = new BigDecimal(pi.getProductCount());
			BigDecimal convent = new BigDecimal(pi.get("convert_relate").toString()); 
			Inventory inventory= InventoryQuery.me().findBySellerIdAndProductIdAndWareHouseId(seller.getId(), pi.get("productId").toString(), pi.get("warehouse_id").toString());
			if(inventory!=null){
				inventory.set("in_count", inventory.getInCount().add(count2.divide(convent, 2, BigDecimal.ROUND_HALF_UP)));
				inventory.set("in_amount",inventory.getInAmount().add(pi.getProductAmount()));
				inventory.set("in_price", pi.getProductPrice());
				inventory.set("balance_count", inventory.getBalanceCount().add(count2.divide(convent, 2, BigDecimal.ROUND_HALF_UP)));
				inventory.set("balance_amount", inventory.getBalanceAmount().add(pi.getProductAmount()));
				inventory.set("modify_date", new Date());
				flang=inventory.update();
				if(flang==false){
					break;
				}
			}else{
				inventory=new Inventory();
				inventory.set("id", StrKit.getRandomUUID());
				inventory.set("warehouse_id", pi.get("warehouse_id").toString());
				inventory.set("product_id", pi.get("productId"));
				inventory.set("seller_id", seller.getId());
				inventory.set("in_count", count2.divide(convent, 2, BigDecimal.ROUND_HALF_UP));
				inventory.set("in_amount",pi.getProductAmount());
				inventory.set("in_price", pi.getProductPrice());
				inventory.set("balance_count", count2.divide(convent, 2, BigDecimal.ROUND_HALF_UP));
				inventory.set("balance_amount", pi.getProductAmount());
				inventory.set("balance_price", pi.getProductPrice());
				inventory.set("data_area",pi.getDataArea());
				inventory.set("dept_id", pi.getDeptId());
				inventory.set("create_date", new Date());
				flang=inventory.save();
				if(flang==false){
					break;
				}
			}
			SellerProduct sellerProduct = SellerProductQuery.me().findById(pi.getSellerProductId());
			String inventoryDetailId = StrKit.getRandomUUID();
			BigDecimal  storeCount = new BigDecimal(0);
			if(sellerProduct.getStoreCount()==null){
				storeCount = count2.divide(convent, 2, BigDecimal.ROUND_HALF_UP);
			}else{
				storeCount = sellerProduct.getStoreCount().add(count2.divide(convent, 2, BigDecimal.ROUND_HALF_UP));
			}
			inventoryDetail.set("id", inventoryDetailId);
			inventoryDetail.set("warehouse_id", pi.get("warehouse_id"));
			inventoryDetail.set("sell_product_id",pi.getSellerProductId());
			inventoryDetail.set("in_count", count2.divide(convent, 2, BigDecimal.ROUND_HALF_UP));
			inventoryDetail.set("in_amount", pi.getProductAmount());
			inventoryDetail.set("in_price", pi.getProductPrice());
			inventoryDetail.set("balance_count",storeCount );
			inventoryDetail.set("balance_amount", storeCount.multiply(pi.getProductPrice()));
			inventoryDetail.set("balance_price", pi.getProductPrice());
			inventoryDetail.set("biz_type", Consts.BIZ_TYPE_INSTOCK);
			inventoryDetail.set("biz_bill_sn", pi.get("pwarehouse_sn"));
			inventoryDetail.set("biz_date", new Date());
			inventoryDetail.set("biz_user_id", user.getId());
			inventoryDetail.set("remark", pi.getRemark());
			inventoryDetail.set("dept_id",pi.getDeptId());
			inventoryDetail.set("data_area", pi.getDataArea());
			inventoryDetail.set("create_date", new Date());
			flang=inventoryDetail.save();
			if(flang==false){
				break;
			}
			if(sellerProduct.getStoreCount()==null)
			{
				sellerProduct.setStoreCount(new BigDecimal(0));
				sellerProduct.update();
			}
			BigDecimal count0 = count2.divide(convent, 2, BigDecimal.ROUND_HALF_UP);
			sellerProduct.setStoreCount(count0.add(sellerProduct.getStoreCount()));
			sellerProduct.set("modify_date", new Date());
			sellerProduct.update();
		}
		if(flang==true){
			purchaseInstock.set("status", 1000);
			purchaseInstock.update();
		}
		
		
		renderAjaxResultForSuccess("OK");

	}
	
	public void refund_instock(){
		String instockId = getPara("instockId");
		String dataArea = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		Record instock = PurchaseInstockQuery.me().findMoreById(instockId,dataArea);
		List<Record> instockDetail = PurchaseInstockDetailQuery.me().findByOutstockId(instockId,dataArea);
		List<SellerProductInfo> sProduct = new ArrayList<>(); 
		List<String> ls = new ArrayList<>();
		SellerProductInfo sellerProductInfo = new SellerProductInfo();
		for (Record record : instockDetail) {
			String id = record.get("purchase_order_detail_id").toString();
			if (ls.contains(id)){
				this.addChild(sProduct, id,record);
				continue;
			}
			sellerProductInfo = new SellerProductInfo();
			sellerProductInfo.setPurchaseInstockDetailId(record.getStr("id"));
			sellerProductInfo.setPurchaseOrderDetailId(record.getStr("purchase_order_detail_id"));
			ls.add(sellerProductInfo.getPurchaseOrderDetailId());

			sellerProductInfo.setWarehouseId(record.getStr("warehouse_id"));
			sellerProductInfo.setProductName(record.getStr("productName"));
			sellerProductInfo.setBigUnit(record.getStr("big_unit"));
			sellerProductInfo.setSmallUnit(record.getStr("small_unit"));
			sellerProductInfo.setProductCount(record.getStr("product_count"));
			sellerProductInfo.setConvertRelate(record.getStr("convert_relate"));
			if(StrKit.notBlank(record.getStr("cps_name"))) {
				sellerProductInfo.setCpsName(record.getStr("cps_name"));
			}
			List<SellerProduct> product = new ArrayList<>();
			SellerProduct sellerProduct = new SellerProduct();
			sellerProduct.setId(record.getStr("seller_product_id"));
			sellerProduct.setCustomName(record.getStr("custom_name"));
			sellerProduct.setStoreCount(record.getBigDecimal("storeCount"));
			product.add(sellerProduct);
			sellerProductInfo.setList(product);
			sProduct.add(sellerProductInfo);
		}
		HashMap<String, Object> result = Maps.newHashMap();
		result.put("instock", instock);
		result.put("instockDetail", sProduct);
		renderJson(result);
	}

	private void addChild(List<SellerProductInfo> sproduct, String id, Record record) {
		for (SellerProductInfo sellerProductInfo : sproduct) {
			if (sellerProductInfo.getPurchaseOrderDetailId().equals(id)) {
				List<SellerProduct> product = sellerProductInfo.getList();
				SellerProduct sellerProduct = new SellerProduct();
				sellerProduct.setId(record.getStr("seller_product_id"));
				sellerProduct.setCustomName(record.getStr("custom_name"));
				sellerProduct.setStoreCount(record.getBigDecimal("storeCount"));
				product.add(sellerProduct);
				sellerProductInfo.setList(product);
			}
		}
	}
	
	public void refund_instock_etail(){
		String instockId = getPara("instockId");
		String dataArea = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		Record instock = PurchaseInstockQuery.me().findMoreById(instockId,dataArea);
		List<Record> instockDetail = PurchaseInstockDetailQuery.me().findByOutstockId(instockId,dataArea);
		List<PurchaseInstockDetailInfo> sProduct = new ArrayList<>(); 
		List<String> ls = new ArrayList<>();
		PurchaseInstockDetailInfo purchaseInstockDetailInfo = new PurchaseInstockDetailInfo();
		for (Record record : instockDetail) {
			String id = record.get("purchase_order_detail_id").toString();
			if (ls.contains(id)){
				this._addChild(sProduct, id,record);
				continue;
			}
			purchaseInstockDetailInfo = new PurchaseInstockDetailInfo();
			purchaseInstockDetailInfo.setPurchaseInstockDetailId(record.getStr("id"));
			purchaseInstockDetailInfo.setPurchaseOrderDetailId(record.getStr("purchase_order_detail_id"));
			ls.add(purchaseInstockDetailInfo.getPurchaseOrderDetailId());
			purchaseInstockDetailInfo.setWarehouseId(record.getStr("warehouse_id"));
			purchaseInstockDetailInfo.setProductName(record.getStr("productName"));
			purchaseInstockDetailInfo.setBigUnit(record.getStr("big_unit"));
			purchaseInstockDetailInfo.setSmallUnit(record.getStr("small_unit"));
			purchaseInstockDetailInfo.setProductCount(record.getStr("product_count"));
			purchaseInstockDetailInfo.setConvertRelate(record.getStr("convert_relate"));
			purchaseInstockDetailInfo.setCpsName(record.getStr("cps_name"));
			List<PurchaseSeller> product = new ArrayList<>();
			PurchaseSeller purchaseSeller = new PurchaseSeller();
			purchaseSeller.setSellerProductId(record.getStr("seller_product_id"));
			purchaseSeller.setCustomName(record.getStr("custom_name"));
			purchaseSeller.setPrivateCount(Integer.parseInt(record.getStr("product_count")));
			product.add(purchaseSeller);
			purchaseInstockDetailInfo.setList(product);
			sProduct.add(purchaseInstockDetailInfo);
		}
		HashMap<String, Object> result = Maps.newHashMap();
		result.put("instock", instock);
		result.put("instockDetail", sProduct);
		renderJson(result);
	}
	
	private void _addChild(List<PurchaseInstockDetailInfo> sproduct, String id, Record record) {
		for (PurchaseInstockDetailInfo purchaseInstockDetailInfo : sproduct) {
			if (purchaseInstockDetailInfo.getPurchaseOrderDetailId().equals(id)) {
				List<PurchaseSeller> product = purchaseInstockDetailInfo.getList();
				PurchaseSeller purchaseSeller = new PurchaseSeller();
				purchaseSeller.setSellerProductId(record.getStr("seller_product_id"));
				purchaseSeller.setCustomName(record.getStr("custom_name"));
				purchaseSeller.setPrivateCount(Integer.parseInt(record.getStr("product_count")));
				product.add(purchaseSeller);
				purchaseInstockDetailInfo.setList(product);
			}
		}
	}
	public void detailBySn(){
		String order_sn = getPara(0);
		PurchaseInstock purchaseInstock = new PurchaseInstock();
		if(!order_sn.substring(0, 2).equals("PO")){
			purchaseInstock = PurchaseInstockQuery.me().findBySn(order_sn);
		}else{
			purchaseInstock = PurchaseInstockQuery.me().findByPurchaseOrderSn(order_sn);
		}
		
		setAttr("instockId", purchaseInstock.getId());
		render("getDetail.html");
	}
	
	public void renderPrintPage () {
		setAttr("instockId", getPara("instockId"));
		render("print.html");
	}
	
	
	       //获取采购入库单打印的信息
			public void getPrintInfo() {
				String getPrintInfo = getPara("instockId");
				String[] outId = getPrintInfo.split(",");
		        List<Map<String, Object>> printAllNeedInfos = new ArrayList<>();

				for (String s : outId) {
					Record printInfo = PurchaseInstockQuery.me().findPurchaseInstockForPrint(s);
					List<Record> ProductInfos = PurchaseInstockQuery.me().findPrintProductInfo(s);
					Map<String, Object> map = new HashMap<>();
					map.put("printInfo", printInfo);
					map.put("ProductInfos", ProductInfos);
					printAllNeedInfos.add(map);
				}
				renderJson("rows",printAllNeedInfos);
			}
	
	
}
