/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.math.BigDecimal;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.time.DateFormatUtils;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;
import org.ccloud.model.Inventory;
import org.ccloud.model.InventoryDetail;
import org.ccloud.model.PurchaseInstock;
import org.ccloud.model.PurchaseInstockDetail;
import org.ccloud.model.PurchaseOrder;
import org.ccloud.model.PurchaseOrderJoinInstock;
import org.ccloud.model.Seller;
import org.ccloud.model.User;
import org.ccloud.model.Warehouse;
import org.ccloud.model.query.InventoryQuery;
import org.ccloud.model.query.PurchaseInstockDetailQuery;
import org.ccloud.model.query.PurchaseInstockQuery;
import org.ccloud.model.query.PurchaseOrderDetailQuery;
import org.ccloud.model.query.PurchaseOrderQuery;
import org.ccloud.model.query.SellerQuery;
import org.ccloud.model.query.WarehouseQuery;

import com.google.common.collect.ImmutableMap;
import com.google.common.collect.Maps;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/purchaseInstock", viewPath = "/WEB-INF/admin/purchase_instock")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _PurchaseInstockController extends JBaseCRUDController<PurchaseInstock> { 
	
	@Override
	public void index() {
		String date = DateFormatUtils.format(new Date(), "yyyy-MM-dd");

		setAttr("startDate", date);
		setAttr("endDate", date);

		render("index.html");
	}

	public void list() {
		String keyword = getPara("k");
		if (StrKit.notBlank(keyword)) {
			keyword = StringUtils.urlDecode(keyword);
		}

		String startDate = getPara("startDate");
		String endDate = getPara("endDate");

		Page<Record> page = PurchaseInstockQuery.me().paginate(getPageNumber(), getPageSize(), keyword, startDate, endDate);

		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
		renderJson(map);

	}
	
	public void listOther(){
		String keyword = getPara("k");
		if (StrKit.notBlank(keyword)) {
			keyword = StringUtils.urlDecode(keyword);
		}

		String startDate = getPara("startDate");
		String endDate = getPara("endDate");

		Page<Record> page = PurchaseInstockQuery.me().paginateO(getPageNumber(), getPageSize(), keyword, startDate, endDate);

		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
		renderJson(map);
	}
	
	public void detail() {
		User user = getSessionAttr("user");
		String instockId = getPara(0);
		Record instock = PurchaseInstockQuery.me().findMoreById(instockId,user.getDataArea());
		List<Record> instockDetail = PurchaseInstockDetailQuery.me().findByOutstockId(instockId,user.getDataArea());

		setAttr("instock", instock);
		setAttr("instockDetail", instockDetail);

		render("detail.html");

	}
	
	public void add() {
		render("add.html");
	}
	
	public void orderIndex(){
		render("purchase_order_index.html");
	}
	
	public void orderDetail(){
		String orderId = getPara(0);
		User user = getSessionAttr("user");
		Record order = PurchaseOrderQuery.me().findMoreById(orderId,user.getDataArea());
		List<Record> orderDetail = PurchaseOrderDetailQuery.me().findByOutstockId(orderId,user.getDataArea());

		setAttr("order", order);
		setAttr("orderDetail", orderDetail);

		render("purchase_order_detail.html");
	}
	
	public void refund() {
		String orderId = getPara("orderId");
		User user = getSessionAttr("user");
		Record order = PurchaseOrderQuery.me().findMoreById(orderId,user.getDataArea());
		List<Record> orderDetail = PurchaseOrderDetailQuery.me().findByOutstockId(orderId,user.getDataArea());

		HashMap<String, Object> result = Maps.newHashMap();
		result.put("order", order);
		result.put("orderDetail", orderDetail);

		renderJson(result);
	}
	
	@Override
	@Before(Tx.class)
	public void save(){
		final PurchaseInstock purchaseInstock = getModel(PurchaseInstock.class);
		final PurchaseInstockDetail purchaseInstockDetail = getModel(PurchaseInstockDetail.class);
		final PurchaseOrderJoinInstock purchaseOrderJoinInstock = getModel(PurchaseOrderJoinInstock.class);
		Map<String, String[]> paraMap = getParaMap();
		User user = getSessionAttr("user");
		Warehouse warehouse = WarehouseQuery.me().findOneByUserId(user.getId());
		String purchaseInstockId = StrKit.getRandomUUID();

		//采购入库单： PO + 100000(机构编号或企业编号6位) + 20171108(时间) + 100001(流水号)
		int m=PurchaseInstockQuery.me().findByUserId(user.getId(),user.getDataArea());
		m++;
		String n=Integer.toString(m);
		int countt =n.length();
		for(int k=0;k<(6-countt);k++){
			n= "0"+n;
		}
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		String str = sdf.format(date);
		String purchaseOrderId=StringUtils.getArrayFirst(paraMap.get("purchaseOrderId"));
		PurchaseOrder purchaseOrder = PurchaseOrderQuery.me().findById(purchaseOrderId);
		String pwarehouseSn="PO"+user.getDepartmentId().substring(0, 6)+str.substring(0,8)+n;
		purchaseInstock.set("id", purchaseInstockId);
		purchaseInstock.set("pwarehouse_sn", pwarehouseSn);
		purchaseInstock.set("supplier_id", StringUtils.getArrayFirst(paraMap.get("supplierId")));
		purchaseInstock.set("warehouse_id", warehouse.getId());
		purchaseInstock.set("biz_user_id", user.getId());
		purchaseInstock.set("biz_date", new Date());
		purchaseInstock.set("input_user_id", user.getId());
		purchaseInstock.set("status", 0);//待审核
		purchaseInstock.set("total_amount", StringUtils.getArrayFirst(paraMap.get("total")));
		purchaseInstock.set("payment_type", StringUtils.getArrayFirst(paraMap.get("paymentType")));
		purchaseInstock.set("remark",  StringUtils.getArrayFirst(paraMap.get("remark")));
		purchaseInstock.set("dept_id", user.getDepartmentId());
		purchaseInstock.set("data_area", user.getDataArea());
		purchaseInstock.set("create_date", date);
		purchaseInstock.save();
		String productNumStr = StringUtils.getArrayFirst(paraMap.get("productNum"));
		Integer productNum = Integer.valueOf(productNumStr);
		Integer count = 0;
		Integer index = 0;

		while (productNum > count) {
			index++;
			String productId = StringUtils.getArrayFirst(paraMap.get("sellerProductId" + index));
			if (StrKit.notBlank(productId)) {
				purchaseInstockDetail.set("id", StrKit.getRandomUUID());
				purchaseInstockDetail.set("purchase_instock_id", purchaseInstockId);
				purchaseInstockDetail.set("seller_product_id", StringUtils.getArrayFirst(paraMap.get("sellerProductId" + index)));

				String convert = StringUtils.getArrayFirst(paraMap.get("convert" + index));
				String bigNum = StringUtils.getArrayFirst(paraMap.get("bigNum" + index));
				String smallNum = StringUtils.getArrayFirst(paraMap.get("smallNum" + index));

				Integer productCount = Integer.valueOf(bigNum) * Integer.valueOf(convert) + Integer.valueOf(smallNum);

				purchaseInstockDetail.set("product_count", productCount);
				purchaseInstockDetail.set("product_price", StringUtils.getArrayFirst(paraMap.get("smallPrice" + index)));

				purchaseInstockDetail.set("product_amount", StringUtils.getArrayFirst(paraMap.get("rowTotal" + index)));
				purchaseInstockDetail.set("purchase_order_detail_id", StringUtils.getArrayFirst(paraMap.get("id")));
				purchaseInstockDetail.set("order_list", index);
				purchaseInstockDetail.set("create_date", date);
				purchaseInstockDetail.set("dept_id", user.getDepartmentId());
				purchaseInstockDetail.set("data_area", user.getDataArea());
				purchaseInstockDetail.save();
				purchaseOrder.set("status", 1000);
				purchaseOrder.update();
				count++;
			}

		}
		purchaseOrderJoinInstock.set("id", StrKit.getRandomUUID());
		purchaseOrderJoinInstock.set("purchase_order_id", StringUtils.getArrayFirst(paraMap.get("purchaseOrderId")));
		purchaseOrderJoinInstock.set("purchase_instock_id", purchaseInstockId);
		purchaseOrderJoinInstock.save();
		renderAjaxResultForSuccess("OK");

	}
	
	
	public void pass(){
		User user = getSessionAttr("user");
		String purchaseInstockId=getPara("id");
		boolean flang = false;
		final InventoryDetail inventoryDetail= getModel(InventoryDetail.class);
		Seller seller = SellerQuery.me().findByUserId(user.getId());
		PurchaseInstock purchaseInstock = PurchaseInstockQuery.me().findById(purchaseInstockId);
		List<PurchaseInstockDetail> list= PurchaseInstockDetailQuery.me().findAllByPurchaseInstockId(purchaseInstockId);
		for(PurchaseInstockDetail pi : list){
			String inventoryDetailId = StrKit.getRandomUUID();
			inventoryDetail.set("id", inventoryDetailId);
			inventoryDetail.set("warehouse_id", pi.get("warehouse_id"));
			inventoryDetail.set("sell_product_id",pi.getSellerProductId());
			inventoryDetail.set("in_count", pi.getProductCount());
			inventoryDetail.set("in_amount", pi.getProductAmount());
			inventoryDetail.set("in_price", pi.getProductPrice());
			inventoryDetail.set("biz_type", "采购入库");
			inventoryDetail.set("biz_bill_sn", pi.get("pwarehouse_sn"));
			inventoryDetail.set("biz_date", new Date());
			inventoryDetail.set("biz_user_id", user.getId());
			inventoryDetail.set("remark", pi.getRemark());
			inventoryDetail.set("dept_id",pi.getDeptId());
			inventoryDetail.set("data_area", pi.getDataArea());
			inventoryDetail.set("create_date", new Date());
			flang=inventoryDetail.save();
			if(flang==false){
				break;
			}
			
			Inventory inventory= InventoryQuery.me().findByWarehouseIdAndProductId(pi.get("warehouse_id").toString(), pi.getSellerProductId());
			if(inventory!=null){
				inventory.set("in_count", pi.getProductCount());
				inventory.set("in_amount", pi.getProductAmount());
				inventory.set("in_price", pi.getProductPrice());
				inventory.set("balance_count", inventory.getBalanceCount().add(new BigDecimal(pi.getProductCount())));
				inventory.set("balance_amount", inventory.getBalanceAmount().add(pi.getProductAmount()));
				inventory.set("modify_date", new Date());
				flang=inventory.update();
				if(flang==false){
					break;
				}
			}else{
				inventory=new Inventory();
				inventory.set("id", StrKit.getRandomUUID());
				inventory.set("warehouse_id", pi.get("warehouse_id").toString());
				inventory.set("product_id", pi.getSellerProductId());
				inventory.set("seller_id", seller.getId());
				inventory.set("in_count", pi.getProductCount());
				inventory.set("in_amount", pi.getProductAmount());
				inventory.set("in_price", pi.getProductPrice());
				inventory.set("balance_count", pi.getProductCount());
				inventory.set("balance_amount", pi.getProductAmount());
				inventory.set("balance_price", pi.getProductPrice());
				inventory.set("data_area",pi.getDataArea());
				inventory.set("dept_id", pi.getDeptId());
				inventory.set("create_date", new Date());
				flang=inventory.save();
				if(flang==false){
					break;
				}
			}
		}
		if(flang==true){
			purchaseInstock.set("status", 1000);
			purchaseInstock.update();
		}
		renderAjaxResultForSuccess("OK");

	}
}
