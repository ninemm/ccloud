/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;


import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.interceptor.UCodeInterceptor;
import org.ccloud.model.Role;
import org.ccloud.model.User;
import org.ccloud.model.query.OperationQuery;
import org.ccloud.model.query.RoleQuery;
import org.ccloud.model.query.UserQuery;
import org.ccloud.model.vo.ModuleInfo;
import org.ccloud.model.vo.OperationInfo;
import org.ccloud.model.vo.ParentModule;
import org.ccloud.model.vo.SystemVo;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;

import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/role", viewPath = "/WEB-INF/admin/role")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
@RequiresPermissions(value={"/admin/role","/admin/all"},logical=Logical.OR)
public class _RoleController extends JBaseCRUDController<Role> { 

	
	@Override
	public void index() {
		
		String keyword = getPara("k");
		if (StrKit.notBlank(keyword)) setAttr("k", keyword);
		String dataArea = getSessionAttr("DeptDataAreaLike");
		
		Page<Role> page = RoleQuery.me().paginate(getPageNumber(), getPageSize(), keyword, dataArea, "order_list");
		if (page != null) {
			setAttr("page", page);
		}
		
	}
	
	@Override
	@Before(UCodeInterceptor.class)
	public void save() {
		
		Role role = getModel(Role.class);
        User user = getSessionAttr("user");
        role.setDeptId(user.getDepartmentId());
        role.setDataArea(getSessionAttr("DeptDataArea").toString());
		if (role.saveOrUpdate())
			renderAjaxResultForSuccess("新增成功");
		else
			renderAjaxResultForError("修改失败!");
	}	
	
	@Override
	@RequiresPermissions(value={"/admin/role/edit","/admin/all"},logical=Logical.OR)
	public void edit() {
		String id = getPara("id");
		if (id != null) {
			Role role = RoleQuery.me().findById(id);
			setAttr("role", role);
		}
	}
	
	@Override
	@RequiresPermissions(value={"/admin/role/edit","/admin/all"},logical=Logical.OR)
	public void delete() {
		String id = getPara("id");
		final Role r = RoleQuery.me().findById(id);
		List<User> list = UserQuery.me().findByRoleId(id);
		if (list.size() > 0) {
			renderAjaxResultForError("已有用户拥有此角色");
			return;
		} else {
			if (r != null) {
				if (r.delete()) {
					renderAjaxResultForSuccess("删除成功");
					return;
				}
			}
			renderAjaxResultForError("删除失败");
		}
	}	

	@Before(UCodeInterceptor.class)
	@RequiresPermissions(value={"/admin/role/edit","/admin/all"},logical=Logical.OR)
	public void batchDelete() {
		
		String[] ids = getParaValues("dataItem");
		List<User> list = UserQuery.me().findByRoleIds(ids);
		if (list.size() > 0) {
			renderAjaxResultForError("已有用户拥有此角色");
			return;
		}
		int count = RoleQuery.me().batchDelete(ids);
		if (count > 0) {
			renderAjaxResultForSuccess("删除成功");
		} else {
			renderAjaxResultForError("删除失败!");
		}
		
	}
	
    public void permission() {
        String roleId = getPara("id");
        setAttr("id", getPara("id"));
        try {
			setAttr("role_name", new String(getPara("roleName").getBytes("ISO-8859-1"),"UTF-8"));
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
        List<Record> list = OperationQuery.me().queryRoleOperation(roleId);
        List<SystemVo> systemList = new ArrayList<>();
        for (Record record : list) {
        	SystemVo systemVo = new SystemVo();
        	systemVo.setName(record.getStr("sys_name"));
        	List<ParentModule> parentModules = new ArrayList<>();
        	ParentModule parentModule = new ParentModule();
        	parentModule.setName(record.getStr("parent_name"));
        	List<ModuleInfo> moduleInfos = new ArrayList<>();
            String[] operationId = record.get("operation_code").toString().split(",");
            String[] operationName = record.get("operation_name").toString().split(",");
            String[] stationIds = record.get("station_id").toString().split(",");
        	ModuleInfo moduleInfo = new ModuleInfo();
        	moduleInfo.setModuleId(record.getStr("id"));
        	moduleInfo.setModuleName(record.getStr("module_name"));
        	List<OperationInfo> operationInfos = new ArrayList<>();
            for (int i = 0; i < operationId.length; i++) {
            	OperationInfo info = new OperationInfo();
            	info.setOperationCode(operationId[i]);
            	info.setOperationName(operationName[i]);
            	if (!stationIds[i].equals("0")) {
            		info.setIsChecked(1);
            	} else {
            		info.setIsChecked(0);
            	}
            	operationInfos.add(info);
            }
            moduleInfo.setList(operationInfos);
            moduleInfos.add(moduleInfo);
            parentModule.setList(moduleInfos);
            parentModules.add(parentModule);
            systemVo.setList(parentModules);
            systemVo.setOperationCount(operationInfos.size());
            this.checkList(systemList, systemVo);
		}
        setAttr("systemList", systemList);
    }
    
    private void checkList(List<SystemVo> systemList, SystemVo systemVo) {
    	for (SystemVo vo : systemList) {
			if (vo.getName().equals(systemVo.getName())) {
				this.checkParent(vo, systemVo.getList().get(0));
				return;
			}
		}
    	systemList.add(systemVo);
    }
    
    private void checkParent(SystemVo vo, ParentModule parentModule) {
    	List<ParentModule> list = vo.getList();
    	vo.setOperationCount(vo.getOperationCount() + parentModule.getList().size());
    	for (ParentModule parentModule2 : list) {
			if (parentModule2.getName().equals(parentModule.getName())) {
				this.checkModule(parentModule2, parentModule.getList().get(0));
				return;
			}
		}
    	vo.getList().add(parentModule);
    }

	private void checkModule(ParentModule parentModule2, ModuleInfo moduleInfo) {
		parentModule2.getList().add(moduleInfo);
	}	
	
	
}
