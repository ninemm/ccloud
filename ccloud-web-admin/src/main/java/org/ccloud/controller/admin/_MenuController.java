/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.interceptor.UCodeInterceptor;
import org.ccloud.model.Menu;
import org.ccloud.model.Systems;
import org.ccloud.model.query.MenuQuery;
import org.ccloud.model.query.SystemsQuery;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.tx.Tx;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/menu", viewPath = "/WEB-INF/admin/menu")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
@RequiresPermissions(value={"/admin/menu","/admin/all"},logical=Logical.OR)
public class _MenuController extends JBaseCRUDController<Menu> { 
	
	@Override
	public void index() {
		render("index.html");
	}	

	public void list() {
		
		String keyword = getPara("k", "");
		if (StrKit.notBlank(keyword)) {
			keyword = StringUtils.urlDecode(keyword);
			setAttr("k", keyword);
		}
		
		String parentId = getPara("parentId", "0");
		
		Page<Menu> page = MenuQuery.me().paginate(getPageNumber(), getPageSize(), parentId, keyword, null);
		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
		renderJson(map);
		
	}
	
	@Override
	@RequiresPermissions(value={"/admin/menu/edit","/admin/all"},logical=Logical.OR)
	public void edit() {
		List<Systems> list = SystemsQuery.me().findAll();
		setAttr("list", list);
		
		String id = getPara("id");
		Menu menu = MenuQuery.me().findById(id);
		setAttr("menu", menu);
	}
	
	@Override
	@Before(UCodeInterceptor.class)
	public void save() {
		
		Menu menu = getModel(Menu.class);
		menu.setIsParent(0);
		if (menu.saveOrUpdate()) {
			MenuQuery.me().updateParent(menu);
			renderAjaxResultForSuccess("新增成功");			
		} else {
			renderAjaxResultForError("修改失败!");
		}
	}
	
	@Before(UCodeInterceptor.class)
	@RequiresPermissions(value={"/admin/menu/edit","/admin/all"},logical=Logical.OR)
	public void batchDelete() {
		
		String[] ids = getParaValues("dataItem");
		int count = MenuQuery.me().batchDelete(ids);
		if (count > 0) {
			renderAjaxResultForSuccess("删除成功");
		} else {
			renderAjaxResultForError("删除失败!");
		}
		
	}
	
	@Override
	@RequiresPermissions(value={"/admin/menu/edit","/admin/all"},logical=Logical.OR)
	@Before(Tx.class)
	public void delete() {
		String id = getPara("id");
		final Menu r = MenuQuery.me().findById(id);
		List<String> deleteIds = new ArrayList<>();
		this.deleteChild(r, deleteIds);
		int count = MenuQuery.me().batchDelete(deleteIds);
		if (count > 0) {
			MenuQuery.me().updateParent(r);
			renderAjaxResultForSuccess("删除成功");
		} else {
			renderAjaxResultForError("删除失败");
		}
	}
	
	private void deleteChild(Menu menu, List<String> deleteIds) {
		deleteIds.add(menu.getId());
		if (menu.getIsParent() > 0) {
			List<Menu> list = MenuQuery.me().findByParent(menu.getId());
			for (Menu child : list) {
				this.deleteChild(child, deleteIds);
			}
		}
	}
	
	public void menu_tree() {
		List<Map<String, Object>> list = MenuQuery.me().findMenuListAsTree(1);
		setAttr("treeData", JSON.toJSON(list));
	}
	
}
