/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.interceptor.UCodeInterceptor;
import org.ccloud.menu.MenuManager;
import org.ccloud.model.Menu;
import org.ccloud.model.Systems;
import org.ccloud.model.query.MenuQuery;
import org.ccloud.model.query.OperationQuery;
import org.ccloud.model.query.SystemsQuery;
import org.ccloud.model.vo.ModuleInfo;
import org.ccloud.model.vo.OperationInfo;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/menu", viewPath = "/WEB-INF/admin/menu")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
@RequiresPermissions(value={"/admin/menu","/admin/all"},logical=Logical.OR)
public class _MenuController extends JBaseCRUDController<Menu> { 
	
	@Override
	public void index() {
		render("index.html");
	}	

	public void list() {
		
		String keyword = getPara("k", "");
		if (StrKit.notBlank(keyword)) {
			keyword = StringUtils.urlDecode(keyword);
			setAttr("k", keyword);
		}
		
		String parentId = getPara("parentId", "0");
		
		Page<Menu> page = MenuQuery.me().paginate(getPageNumber(), getPageSize(), parentId, keyword, null);
		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
		renderJson(map);
		
	}
	
	@Override
	@RequiresPermissions(value={"/admin/menu/edit","/admin/all"},logical=Logical.OR)
	public void edit() {
		List<Systems> list = SystemsQuery.me().findAll();
		setAttr("list", list);
		
		String id = getPara("id");
		Menu menu = MenuQuery.me().findById(id);
		setAttr("menu", menu);
	}
	
	@Override
	@Before(UCodeInterceptor.class)
	public void save() {
		
		Menu menu = getModel(Menu.class);
		if (StringUtils.isBlank(menu.getId())) {
			menu.setIsParent(0);
		}
		if (menu.saveOrUpdate()) {
			MenuQuery.me().updateParent(menu);
			MenuManager.clearAllList();
			renderAjaxResultForSuccess("操作成功");			
		} else {
			renderAjaxResultForError("操作失败!");
		}
	}
	
	@Before(UCodeInterceptor.class)
	@RequiresPermissions(value={"/admin/menu/edit","/admin/all"},logical=Logical.OR)
	public void batchDelete() {
		
		String[] ids = getParaValues("dataItem");
		int count = MenuQuery.me().batchDelete(ids);
		if (count > 0) {
			MenuManager.clearAllList();
			renderAjaxResultForSuccess("删除成功");
		} else {
			renderAjaxResultForError("删除失败!");
		}
		
	}
	
	@Override
	@RequiresPermissions(value={"/admin/menu/edit","/admin/all"},logical=Logical.OR)
	@Before(Tx.class)
	public void delete() {
		String id = getPara("id");
		final Menu r = MenuQuery.me().findById(id);
		List<String> deleteIds = new ArrayList<>();
		this.deleteChild(r, deleteIds);
		int count = MenuQuery.me().batchDelete(deleteIds);
		if (count > 0) {
			MenuQuery.me().updateParent(r);
			MenuManager.clearAllList();
			renderAjaxResultForSuccess("删除成功");
		} else {
			renderAjaxResultForError("删除失败");
		}
	}
	
	private void deleteChild(Menu menu, List<String> deleteIds) {
		deleteIds.add(menu.getId());
		if (menu.getIsParent() > 0) {
			List<Menu> list = MenuQuery.me().findByParent(menu.getId());
			for (Menu child : list) {
				this.deleteChild(child, deleteIds);
			}
		}
	}
	
	public void menu_tree() {
		String id = getPara("id");
		List<Map<String, Object>> list = MenuQuery.me().findMenuListAsTree(1,id);
		setAttr("treeData", JSON.toJSON(list));
	}
	
    public void permission() {
        String id = getPara("id");
        setAttr("id", getPara("id"));
        setAttr("menu_name", new String(getPara("menuName")));
        List<Record> list = OperationQuery.me().queryMenuOperation(id);
        List<ModuleInfo> moduleList = new ArrayList<>();
        List<String> system = new ArrayList<>();
        List<String> parentModule = new ArrayList<>();
        int loop = 0;
        int rowSpan = 1;
        int sysRowSpan = 1;
        for (Record record : list) {
            String[] operationId = record.get("operation_code").toString().split(",");
            String[] operationName = record.get("operation_name").toString().split(",");
            String[] stationIds = record.get("station_id").toString().split(",");
        	ModuleInfo moduleInfo = new ModuleInfo();
        	moduleInfo.setModuleId(record.getStr("id"));
        	moduleInfo.setModuleName(record.getStr("module_name"));
        	if (!system.contains(record.getStr("sys_name"))) {
        		moduleInfo.setSystemName(record.getStr("sys_name"));
        		if (loop > 0) {
        			this.checkSystemRowSpan(moduleList, system, sysRowSpan);
        			sysRowSpan = 1;
        		}
        		system.add(moduleInfo.getSystemName());
        	} else {
        		sysRowSpan++;
        		if (loop == list.size()-1) {
        			this.checkSystemRowSpan(moduleList, system, sysRowSpan);
        		}        		
        	}
        	if (!parentModule.contains(record.getStr("parent_name"))) {
        		moduleInfo.setParentModuleName(record.getStr("parent_name"));
        		if (loop > 0) {
        			this.checkRowSpan(moduleList, parentModule, rowSpan);
        			rowSpan = 1;
        		}
        		parentModule.add(moduleInfo.getParentModuleName());
        	} else {
        		rowSpan++;
        		if (loop == list.size()-1) {
        			this.checkRowSpan(moduleList, parentModule, rowSpan);
        		}
        	}
        	List<OperationInfo> operationInfos = new ArrayList<>();
            for (int i = 0; i < operationId.length; i++) {
            	OperationInfo info = new OperationInfo();
            	info.setOperationCode(operationId[i]);
            	info.setOperationName(operationName[i]);
            	if (!stationIds[i].equals("0")) {
            		info.setIsChecked(1);
            	} else {
            		info.setIsChecked(0);
            	}
            	operationInfos.add(info);
            }
            moduleInfo.setList(operationInfos);
            moduleList.add(moduleInfo);
            loop++;
		}
        setAttr("moduleList", moduleList);
    }
    
    private void checkRowSpan(List<ModuleInfo> moduleList, List<String> system, int rowSpan) {
    	for (ModuleInfo moduleInfo : moduleList) {
			if (moduleInfo.getParentModuleName() != null && 
					moduleInfo.getParentModuleName().equals(system.get(system.size()-1))) {
				moduleInfo.setParentRowSpan(rowSpan);
				break;
			}
		}
    }
    
    private void checkSystemRowSpan(List<ModuleInfo> moduleList, List<String> parentModule, int rowSpan) {
    	for (ModuleInfo moduleInfo : moduleList) {
			if (moduleInfo.getSystemName() != null && 
					moduleInfo.getSystemName().equals(parentModule.get(parentModule.size()-1))) {
				moduleInfo.setSystemRowSpan(rowSpan);
				break;
			}
		}
    }
    
    public void changePermission () {
        String id = getPara("menu_id");
        String operationId = getPara("operation_id");

        Menu menu = MenuQuery.me().findById(id);
        menu.setOperatorId(operationId);
        
        if (menu.update()) {
        	MenuManager.clearAllList();
        	MenuQuery.me().updateParents(menu);
        	renderAjaxResultForSuccess();
        } else {
        	renderAjaxResultForError();
        }
    }
	
}
