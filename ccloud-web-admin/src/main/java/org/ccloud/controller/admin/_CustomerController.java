/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.model.Customer;
import org.ccloud.model.query.CustomerJoinCustomerTypeQuery;
import org.ccloud.model.query.CustomerQuery;
import org.ccloud.model.query.CustomerTypeQuery;
import org.ccloud.model.query.UserJoinCustomerQuery;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;

import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/customer", viewPath = "/WEB-INF/admin/customer")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _CustomerController extends JBaseCRUDController<Customer> {

	@Override
	public void index() {
		render("index.html");
	}

	public void list() {

		Map<String, String[]> paraMap = getParaMap();
		String keyword = StringUtils.getArrayFirst(paraMap.get("k"));
		if (StrKit.notBlank(keyword)) {
			keyword = StringUtils.urlDecode(keyword);
		}

		Page<Record> page = CustomerQuery.me().paginate(getPageNumber(), getPageSize(), keyword, "create_date",
				paraMap, null, null);//TODO
		List<Record> customerList = page.getList();

		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", customerList);
		renderJson(map);

	}
	
	public void enable() {

		String id = getPara("id");
		int isEnabled = getParaToInt("isEnabled");

		if (CustomerQuery.me().enable(id, isEnabled)) {
			renderAjaxResultForSuccess();
		} else {
			renderAjaxResultForError();
		}

	}
	
	@Override
	public void edit() {
		String id = getPara("id");
		if (StrKit.notBlank(id)) {
			setAttr("customer", CustomerQuery.me().findById(id));
			setAttr("cTypeList", CustomerJoinCustomerTypeQuery.me().findCustomerTypeListByCustomerId(id));
			setAttr("cUserIdList", UserJoinCustomerQuery.me().findUserListByCustomerId(id, null, null));//TODO
		}
		setAttr("customerTypeList", CustomerTypeQuery.me().findCustomerTypeList());
		setAttr("userIdList", UserJoinCustomerQuery.me().findUserListByCustomerId(id, null, null));
		render("edit.html");
	}
	
	@Override
	@Before(Tx.class)
	public void save() {

		Customer customer = getModel(Customer.class);
		String customerId = customer.getId();
		customer.setProvCode(getPara("userProvinceId"));
		customer.setProvName(getPara("userProvinceText"));
		customer.setCityCode(getPara("userCityId"));
		customer.setCityName(getPara("userCityText"));
		customer.setCountryCode(getPara("userDistrictId"));
		customer.setCountryName(getPara("userDistrictText"));
		String[] customerTypes = getParaValues("customerTypes");
		String[] userIds = getParaValues("userIds");

		CustomerJoinCustomerTypeQuery.me().deleteByCustomerId(customerId);
		UserJoinCustomerQuery.me().deleteByCustomerId(customerId);

		if (StrKit.isBlank(customerId)) {
			customerId = StrKit.getRandomUUID();
			customer.set("id", customerId);
			customer.set("create_date", new Date());
			customer.save();
		} else {
			customer.set("modify_date", new Date());
			customer.update();
		}

		for (String customerType : customerTypes) {
			CustomerJoinCustomerTypeQuery.me().insert(customerId, customerType);
		}

		if (userIds != null) {
			for (String userId : userIds) {
				UserJoinCustomerQuery.me().insert(customerId, userId, null, null);// TODO
			}
		}

		renderAjaxResultForSuccess();

	}
}
