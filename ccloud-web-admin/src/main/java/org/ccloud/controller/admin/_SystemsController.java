/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.apache.commons.collections4.MapUtils;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.interceptor.UCodeInterceptor;
import org.ccloud.model.Menu;
import org.ccloud.model.Module;
import org.ccloud.model.Systems;
import org.ccloud.model.query.MenuQuery;
import org.ccloud.model.query.ModuleQuery;
import org.ccloud.model.query.SystemsQuery;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;

import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.ehcache.CacheKit;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/systems", viewPath = "/WEB-INF/admin/systems")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
@RequiresPermissions(value={"/admin/systems","/admin/all"},logical=Logical.OR)
public class _SystemsController extends JBaseCRUDController<Systems> { 

	@Override
	public void index() {
		
		String keyword = getPara("k");
		if (StrKit.notBlank(keyword)) setAttr("k", keyword);
		
		
		Page<Systems> page = SystemsQuery.me().paginate(getPageNumber(), getPageSize(), keyword, "order_list");
		if (page != null) {
			setAttr("page", page);
		}
		
	}
	
	@Override
	@RequiresPermissions(value={"/admin/systems/edit","/admin/all"},logical=Logical.OR)
	public void edit() {
		String id = getPara("id");
		if (id != null) {
			Systems systems = SystemsQuery.me().findById(id);
			setAttr("systems", systems);
		}
	}	
	
	@Override
	@RequiresPermissions(value={"/admin/systems/edit","/admin/all"},logical=Logical.OR)
	public void delete() {
		String id = getPara("id");
		List<Menu> list1 = MenuQuery.me().findBySystem(id);
		List<Module> list2 = ModuleQuery.me().findBySystem(id);
		if ((list1.size() + list2.size()) > 0) {
			renderAjaxResultForError("此系统下已有菜单或模块无法删除");
			return;
		}
		final Systems r = SystemsQuery.me().findById(id);
		if (r != null) {
			if (r.delete()) {
				renderAjaxResultForSuccess("删除成功");
				return;
			}
		}
		renderAjaxResultForError("删除失败");
	}
	
	@Before(UCodeInterceptor.class)
	@RequiresPermissions(value={"/admin/systems/edit","/admin/all"},logical=Logical.OR)
	public void batchDelete() {
		
		String[] ids = getParaValues("dataItem");
		List<Menu> list1 = MenuQuery.me().findBySystemIds(ids);
		List<Module> list2 = ModuleQuery.me().findBySystemIds(ids);
		if ((list1.size() + list2.size()) > 0) {
			renderAjaxResultForError("此系统下已有菜单或模块无法删除");
			return;
		}
		int count = SystemsQuery.me().batchDelete(ids);
		if (count > 0) {
			renderAjaxResultForSuccess("删除成功");
		} else {
			renderAjaxResultForError("删除失败!");
		}
		
	}
	
	public void refresh() {
		Map<String, String[]> params = getParaMap();
		if(MapUtils.isEmpty(params))
			return;
		boolean hasKey = false;
		String[] cacheNames = null;
		Entry<String, String[]> entry = null;
		for (Iterator<Entry<String, String[]>> iterator = params.entrySet().iterator(); iterator.hasNext();) {
			entry = iterator.next();
			if(entry.getKey().equals("cacheParamName")) {
				hasKey = true;
				cacheNames = entry.getValue();
				break;
			}
		}
		if(!hasKey || (hasKey && cacheNames.length > 1))
			return;
		String[] currentCacheNames = CacheKit.getCacheManager().getCacheNames();
//		System.out.println("cache list============\n" + ToStringBuilder.reflectionToString(currentCacheNames, ToStringStyle.MULTI_LINE_STYLE));
		if(ArrayUtils.contains(currentCacheNames, cacheNames[0]))
			CacheKit.removeAll(cacheNames[0]);
//		List list = CacheKit.getKeys(cacheNames[0]);
//		if(CollectionUtils.isEmpty(list))
//			System.err.println("=============>cacheName " + cacheNames[0] + " cleared!");
	}
	
}
