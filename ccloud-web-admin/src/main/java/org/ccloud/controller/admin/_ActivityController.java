/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.time.DateFormatUtils;
import org.ccloud.Consts;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;
import org.ccloud.model.Activity;
import org.ccloud.model.Dict;
import org.ccloud.model.query.ActivityQuery;
import org.ccloud.model.query.CustomerTypeQuery;
import org.ccloud.model.query.DictQuery;

import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/activity", viewPath = "/WEB-INF/admin/activity")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _ActivityController extends JBaseCRUDController<Activity> { 

	@Override
	public void index() {
		render("index.html");
	}
	
	public void list() {
		String keyword = getPara("k");
		if (StrKit.notBlank(keyword)) {
			keyword = StringUtils.urlDecode(keyword);
			setAttr("k", keyword);
		}
		String sellerId = getSessionAttr("sellerId");
		String startDate = getPara("startDate");
		String endDate = getPara("endDate");
		Page<Record> page = ActivityQuery.me().paginate(getPageNumber(), getPageSize(), keyword, startDate, endDate,sellerId);
		for(int i = 0; i <page.getList().size();i++){
			page.getList().get(i).set("customer_type", ActivityQuery.me().getCustomerTypes(page.getList().get(i).getStr("customer_type")));
		}
		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
		renderJson(map);
	}
	
	public void getOptions() {
		String id = getPara("id");
		List<Dict> dlist = DictQuery.me().findByCode(Consts.DICT_UNIT_CODE);
		List<Map<String, Object>> list = new ArrayList<>();
		for(Dict dict : dlist) {
			Map<String, Object> map = new HashMap<>();
			map.put("id", dict.getId());
			map.put("name",dict.getName());
			if (!StringUtils.isBlank(id)) {
				Activity activity = ActivityQuery.me().findById(id);
						if((dict.getId().toString()).equals(activity.getUnit())){
							map.put("isvalid", 1);
						} else {
							map.put("isvalid", 0);
						}
			}else {
					map.put("isvalid", 0);
			}
			list.add(map);
		}
		renderJson(list);
		
	}
	public void edit() {
		String id = getPara("id");
		List<Dict> dicts = DictQuery.me().findDictByType(Consts.INVEST_TYPE);
		setAttr("dicts",dicts);
		if(!StrKit.isBlank(id)) {
			Activity activity = ActivityQuery.me().findById(id);
			setAttr("activity", activity);
			if(activity.getImageListStore()!=null) {
				String[] imags = activity.getImageListStore().split(",");
				List<String> imageList = new ArrayList<String>();
				for(int i=0;i<imags.length;i++) {
					imageList.add(imags[i]);
				}
				setAttr("imageList", imageList);
			}
			String[] area = activity.getAreaType().split("-");
			List<String> areaList = new ArrayList<String>();
			for(int i=0;i<area.length;i++) {
				areaList.add(area[i]);
			}
			setAttr("areaList",areaList);
			String[] investType = activity.getInvestType().split(",");
			List<String> investTypeList = new ArrayList<String>();
			for(int i=0;i<investType.length;i++) {
				investTypeList.add(investType[i]);
			}
			setAttr("investTypeList",investTypeList);
			setAttr("startDate",  DateFormatUtils.format(activity.getStartTime(), "yyyy-MM-dd"));
			setAttr("endDate", DateFormatUtils.format(activity.getEndTime(), "yyyy-MM-dd"));
		}
	}
	
	@Before(Tx.class)
	public void save() {
		final Activity activity = getModel(Activity.class);
		String sellerId = getSessionAttr("sellerId");
		String [] imagePath = getParaValues("imageUrl[]");
		String investTypes = getPara("investType");
		String customerTypes = getPara("customerType");
		//存储路径
		String imagPath = "";
		if (imagePath != null) {
			for (int i = 0;i < imagePath.length;i++) {
				imagPath +=imagePath[i].replace("\\", "/")+",";
			}
		}
		if(imagPath.length()>0) {
			activity.setImageListStore(imagPath.substring(0, (imagPath.length()-1)));
		}
		String unit = getPara("unit");
		String areaNames = getPara("areaNames").replace("/", "-");
		String startDate = getPara("startDate")+" 00:00:00";
		String endDate = getPara("endDate")+" 23:59:59";
		 Date sdate=null; 
		 Date edate = null;
	    SimpleDateFormat formatter=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
	    try {
			sdate=formatter.parse(startDate);
			edate=formatter.parse(endDate);
		} catch (ParseException e) {
			e.printStackTrace();
		}  
	    if(activity.getCategory().equals(Consts.CATEGORY_NORMAL)){
	    	activity.setInvestAmount(new BigDecimal(0));
	    	activity.setVisitNum(0);
	    	activity.setInvestType("");
	    }else{
	    	activity.setInvestType(investTypes);
	    }
	    activity.setUnit(unit);
	    
		activity.setSellerId(sellerId);
		activity.setAreaType(areaNames);
		activity.setStartTime(sdate);
		activity.setEndTime(edate);
		activity.setCustomerType(customerTypes);
		activity.saveOrUpdate();
		renderAjaxResultForSuccess();
	}
	public void getCustomerTypeOptions() {
		String id = getPara("id");
		String DataArea = getSessionAttr(Consts.SESSION_DEALER_DATA_AREA);
		List<Record> listty = new ArrayList<Record>();
		List<Map<String, Object>> list = new ArrayList<>();
		listty = CustomerTypeQuery.me().getCustomerTypes(DataArea);
		for(Record record : listty) {
			Map<String, Object> map = new HashMap<>();
			map.put("id", record.get("id").toString());
			map.put("name",record.get("name").toString());
			if (!StringUtils.isBlank(id)) {
				Activity activity = ActivityQuery.me().findById(id);
				String[] customerTypes = activity.getCustomerType().split(",");
					for(int i = 0;i<customerTypes.length;i++){
						if((record.get("id").toString()).equals(customerTypes[i])){
							map.put("isvalid", 1);
							break;
						} else {
							map.put("isvalid", 0);
						}
					}
			}else {
					map.put("isvalid", 0);
			}
			list.add(map);
		}
		renderJson(list);
	}
	
	public void changeIspublish() {
		String id = getPara("id");
		Activity activity =ActivityQuery.me().findById(id);
		boolean flang = false;
		if(activity.getIsPublish()==1){
			activity.set("is_publish", 0);
		}else{
			activity.set("is_publish", 1);
		}
		activity.set("modify_date", new Date());
		flang=activity.update();
		renderJson(flang);
	}
	

}
