/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Map;

import org.ccloud.Consts;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;
import org.ccloud.model.Payables;
import org.ccloud.model.PayablesDetail;
import org.ccloud.model.Payment;
import org.ccloud.model.User;
import org.ccloud.model.query.PayablesDetailQuery;
import org.ccloud.model.query.PayablesQuery;
import org.ccloud.model.query.PaymentQuery;

import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/payables", viewPath = "/WEB-INF/admin/account")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _PayablesController extends JBaseCRUDController<Payables> { 
	
	@Override
	public void index() {
		render("payables.html");
	}
	
	public void list() {
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
        String keyword = getPara("k");
        if (StrKit.notBlank(keyword)) {
            keyword = StringUtils.urlDecode(keyword);
            setAttr("k", keyword);
        }
        String customerType = getPara("customerType");
        if (StrKit.notBlank(customerType)) {
        	customerType = StringUtils.urlDecode(customerType);
            setAttr("customerType", customerType);
        }
        Page<Payables> page = PayablesQuery.me().paginate(getPageNumber(), getPageSize(),keyword,customerType,user.getDepartmentId(),  "id");
        Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
        renderJson(map);
	}
	
	public void payableInfo() {
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		String objId = getPara("objId");
        if (StrKit.notBlank(objId)) {
        	objId = StringUtils.urlDecode(objId);
            setAttr("objId", objId);
        }
        Page<PayablesDetail> page = PayablesDetailQuery.me().findByObjId(getPageNumber(), getPageSize(),objId,user.getDepartmentId(),  "id");
        Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
        renderJson(map);
	}
	
	public void payment() {
		String detailId = getPara("detail_id");
        if (StrKit.notBlank(detailId)) {
        	detailId = StringUtils.urlDecode(detailId);
            setAttr("detailId", detailId);
        }
        Page<Payment> page = PaymentQuery.me().findByDetailId(getPageNumber(), getPageSize(),detailId, "id");
        Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
        renderJson(map);
	}
	
	public void savePayables() throws ParseException {
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String objId = getPara("objId");
		String deptId = getPara("deptId");
		Payables payables = PayablesQuery.me().findByObjId(objId, deptId);
		if(payables==null) {
			payables = getModel(Payables.class);
			String payablesId = payables.getId();
			payables.setObjId(objId);
			payables.setObjType(getPara("objType"));
			payables.setPayAmount(new BigDecimal("0.00"));
			payables.setActAmount(new BigDecimal("0.00"));
			payables.setBalanceAmount(new BigDecimal("0.00"));
			payables.setDeptId(deptId);
			payables.setDataArea(getPara("DataArea"));
			payables.setCreateDate(sdf.parse(getPara("createDate")));
			payables.setModifyDate(sdf.parse(getPara("modifyDate")));
			if(StrKit.isBlank(payablesId)) {
				payablesId = StrKit.getRandomUUID();
			}
			payables.setId(payablesId);
			payables.save();
			renderAjaxResultForSuccess();
		}else {
			renderAjaxResultForError("创建失败，汇总记录重复.");
		}
	}
	
	public void savePayablesDetail() throws ParseException {
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		final PayablesDetail payablesDetail = getModel(PayablesDetail.class);
		String objId = getPara("objId");
		String deptId = getPara("deptId");
		Payables payables = PayablesQuery.me().findByObjId(objId, deptId);
		if(payables!=null) {
			String detailId = payablesDetail.getId();
			payablesDetail.setObjectId(getPara("objId"));
			payablesDetail.setObjectType(getPara("objType"));
			payablesDetail.setPayAmount(new BigDecimal(getPara("payAmount")));
			payablesDetail.setActAmount(new BigDecimal(getPara("actAmount")));
			payablesDetail.setBalanceAmount(new BigDecimal(getPara("balanceAmount")));
			payablesDetail.setRefSn(getPara("refSn"));
			payablesDetail.setRefType(getPara("refType"));
			payablesDetail.setDeptId(getPara("deptId"));
			payablesDetail.setDataArea(getPara("DataArea"));
			payablesDetail.setModifyDate(sdf.parse(getPara("modifyDate")));
			payablesDetail.setCreateDate(sdf.parse(getPara("createDate")));
			if(StrKit.isBlank(detailId)) {
				detailId = StrKit.getRandomUUID();
			}
			payablesDetail.setId(detailId);
			payablesDetail.save();
			payables.setPayAmount(payables.getPayAmount().add(new BigDecimal(getPara("payAmount"))));
			payables.setActAmount(payables.getActAmount().add(new BigDecimal(getPara("actAmount"))));
			payables.setBalanceAmount(payables.getBalanceAmount().add(new BigDecimal(getPara("balanceAmount"))));
			payables.setModifyDate(sdf.parse(getPara("modifyDate")));
			payables.update();
			renderAjaxResultForSuccess();
		}else {
			renderAjaxResultForError("未找到本次交易单位应付账款汇总数据.");
		}

	}
	
	public void savePayment() throws ParseException {
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String objId = getPara("objId");
		String deptId = getPara("deptId");
		String refSn = getPara("refSn");
		PayablesDetail payablesDetail = PayablesDetailQuery.me().findByObjId(objId, deptId,refSn);
		Payables payables = PayablesQuery.me().findByObjId(objId, deptId);
		final Payment payment = getModel(Payment.class);
		if(payablesDetail!=null) {
			String paymentId = payment.getId();
			payment.setPayablesDetailId(payablesDetail.getId());
			payment.setActAmount(new BigDecimal(getPara("actAmount")));
			payment.setBizDate(sdf.parse(getPara("bizDate")));
			payment.setRefSn(refSn);
			payment.setRefType(getPara("refType"));
			payment.setInputUserId(getPara("inputUserId"));
			payment.setPayUserId(getPara("payUserId"));
			payment.setRemark(getPara("remark"));
			payment.setDataArea(getPara("dataArea"));
			payment.setDeptId(deptId);
			payment.setCreateDate(sdf.parse(getPara("createDate")));
			payment.setModifyDate(sdf.parse(getPara("modifyDate")));
			if(StrKit.isBlank(paymentId)) {
				paymentId = StrKit.getRandomUUID();
			}
			payment.save();
			payablesDetail.setActAmount(payablesDetail.getActAmount().add(new BigDecimal(getPara("actAmount"))));
			payablesDetail.setBalanceAmount(payablesDetail.getBalanceAmount().subtract(new BigDecimal(getPara("actAmount"))));
			payablesDetail.setModifyDate(sdf.parse(getPara("modifyDate")));
			payablesDetail.update();
			payables.setActAmount(payables.getActAmount().add(new BigDecimal(getPara("actAmount"))));
			payables.setBalanceAmount(payables.getBalanceAmount().subtract(new BigDecimal(getPara("actAmount"))));
			payables.setModifyDate(sdf.parse(getPara("modifyDate")));
			payables.update();
			renderAjaxResultForSuccess();
		}else {
			renderAjaxResultForError("未找到本次单号的记录.");
		}
	}
}
