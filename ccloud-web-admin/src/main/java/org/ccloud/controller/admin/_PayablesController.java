/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.ccloud.Consts;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.DataAreaUtil;
import org.ccloud.model.Payables;
import org.ccloud.model.PayablesDetail;
import org.ccloud.model.Payment;
import org.ccloud.model.User;
import org.ccloud.model.query.CustomerTypeQuery;
import org.ccloud.model.query.GoodsCategoryQuery;
import org.ccloud.model.query.PayablesDetailQuery;
import org.ccloud.model.query.PayablesQuery;
import org.ccloud.model.query.PaymentQuery;
import org.ccloud.model.query.UserQuery;

import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.JsonKit;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.IAtom;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/payables", viewPath = "/WEB-INF/admin/payables")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _PayablesController extends JBaseCRUDController<Payables> { 
	
	public void getOptions(){
		String type = getPara("type");
		String DataArea = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		@SuppressWarnings({ "unchecked", "rawtypes" })
		List<Record> list = new ArrayList();
		if(type != null) {
			if("1".equals(type)) {
				list = CustomerTypeQuery.me().getCustomerTypes(DataArea);
			}else if("2".equals(type)) {
				list = GoodsCategoryQuery.me().getLeafTypes();
			}
		}
		renderJson(list);
	}
	
	
	public void getPayables() {
		String type = getPara("type");
		String customerTypeId = getPara("customerTypeId");
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		String deptDataArea = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		Page<Payables> page = PayablesQuery.me().paginate(getPageNumber(),getPageSize(),customerTypeId,type,user.getId(),deptDataArea);
		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(),"rows", page.getList());
		
		renderJson(map);
	}
	
	public void getpayablesDetail() {
		String type = getPara("type");
		String id = getPara("id");
		String deptDataArea = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		Map<String, Object> map;
		if(type != null && id!=null) {
			Page<PayablesDetail> page = PayablesDetailQuery.me().paginate(getPageNumber(), getPageSize(), id,type,deptDataArea);
			map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
		}else {
			map = new HashMap<String, Object>();
		}
		
		renderJson(map);
	}
	
	
	public void renderlist() {
		setAttr("ref_sn",getPara("ref_sn"));
		setAttr("ref_type",getPara("ref_type"));
		setAttr("object_id", getPara("object_id"));
		render("list.html");
	}
	
	
	public void addPayment() {
		String ref_sn = getPara("ref_sn");
		String ref_type = getPara("ref_type");
		String object_id = getPara("object_id");
		//通过客户Id找到应付账款主表ID
		Payables payables = PayablesQuery.me().findByObjId(object_id, Consts.RECEIVABLES_OBJECT_TYPE_CUSTOMER);
		
		if(payables == null) {
			setAttr("ref_sn",ref_sn);
			setAttr("ref_type",ref_type);
			render("list.html");
		}
		
		String userDataArea = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		List<User> list = UserQuery.me().findIdAndNameByDataArea(userDataArea);
	
		setAttr("ref_sn",ref_sn);
		setAttr("bill_id",payables.getId());
		setAttr("ref_type",ref_type);
		setAttr("object_id", object_id);
		setAttr("userInfo",JsonKit.toJson(list));
	}
	
	
	public void list() {
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		String ref_sn = getPara("ref_sn");
		String deptDataArea = DataAreaUtil.getUserDeptDataArea(user.getDataArea());
		Page<Payment> page = PaymentQuery.me().paginate(getPageNumber(), getPageSize(), ref_sn,deptDataArea);
		Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(),"ref_sn",ref_sn,"rows", page.getList());
		
		renderJson(map);
	}
	
	
	@Override
	public void save() {
		boolean isAdd = Db.tx(new IAtom() {
			@Override
			public boolean run() throws SQLException{
				
				Payment payment = new Payment();
				String payables_id = StrKit.getRandomUUID();
				User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
				String act_amount = getPara("act_amount");
				String ref_sn = getPara("ref_sn");
				String ref_type = getPara("ref_type");
				String pay_user_id = getPara("pay_user");
				Date date = new Date();
				
				payment.set("id", payables_id);
				payment.set("payables_detail_id", getPara("bill_id"));
				payment.set("act_amount", act_amount);
				payment.set("biz_date", getPara("biz_date"));
				payment.set("ref_sn", ref_sn);
				payment.set("ref_type", ref_type);
				payment.set("input_user_id", user.getId());
				payment.set("pay_user_id",pay_user_id);
				payment.set("remark",getPara("remark"));
				payment.set("data_area",user.get("data_area"));
				payment.set("dept_id",user.get("department_id"));
				payment.set("create_date", date);
				payment.set("modify_date", date);

//				ReceivablesDetailQuery.me().updateAmountByRefSn(ref_sn,act_amount);
				PayablesQuery.me().updateAmountById(getPara("bill_id"),act_amount);
			    return payment.save();
			}
		});
		
		if (isAdd) renderAjaxResultForSuccess("添加付款记录成功");
        else renderAjaxResultForError("添加付款记录失败");
	}
	
}
