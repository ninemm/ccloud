/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.util.Map;

import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;
import org.ccloud.model.Payables;
import org.ccloud.model.PayablesDetail;
import org.ccloud.model.Payment;
import org.ccloud.model.query.PayablesDetailQuery;
import org.ccloud.model.query.PayablesQuery;
import org.ccloud.model.query.PaymentQuery;

import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/payables", viewPath = "/WEB-INF/admin/account")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _PayablesController extends JBaseCRUDController<Payables> { 
	
	@Override
	public void index() {
		render("payables.html");
	}
	
	public void list() {
        String keyword = getPara("k");
        if (StrKit.notBlank(keyword)) {
            keyword = StringUtils.urlDecode(keyword);
            setAttr("k", keyword);
        }
        Page<Payables> page = PayablesQuery.me().paginate(getPageNumber(), getPageSize(),keyword,  "id");
        Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
        renderJson(map);
	}
	
	public void payableInfo() {
		String objId = getPara("objId");
        if (StrKit.notBlank(objId)) {
        	objId = StringUtils.urlDecode(objId);
            setAttr("objId", objId);
        }
        Page<PayablesDetail> page = PayablesDetailQuery.me().findByObjId(getPageNumber(), getPageSize(),objId,  "id");
        Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
        renderJson(map);
	}
	
	public void payment() {
		String detail_id = getPara("detail_id");
        if (StrKit.notBlank(detail_id)) {
        	detail_id = StringUtils.urlDecode(detail_id);
            setAttr("objId", detail_id);
        }
        Page<Payment> page = PaymentQuery.me().findByDetailId(getPageNumber(), getPageSize(),detail_id, "id");
        Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
        renderJson(map);
	}
}
