/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.time.DateFormatUtils;
import org.ccloud.Consts;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.message.Actions;
import org.ccloud.message.MessageKit;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;
import org.ccloud.model.Department;
import org.ccloud.model.Product;
import org.ccloud.model.PurchaseOrder;
import org.ccloud.model.PurchaseOrderDetail;
import org.ccloud.model.Seller;
import org.ccloud.model.Supplier;
import org.ccloud.model.User;
import org.ccloud.model.WxMessageTemplate;
import org.ccloud.model.query.DepartmentQuery;
import org.ccloud.model.query.ProductQuery;
import org.ccloud.model.query.PurchaseOrderDetailQuery;
import org.ccloud.model.query.PurchaseOrderQuery;
import org.ccloud.model.query.SellerQuery;
import org.ccloud.model.query.SupplierQuery;
import org.ccloud.model.query.UserQuery;
import org.ccloud.model.query.WxMessageTemplateQuery;
import org.ccloud.model.vo.orderProductInfo;
import org.ccloud.model.vo.printAllNeedInfo;

import com.alibaba.fastjson.JSON;
import com.google.common.collect.Maps;
import com.jfinal.aop.Before;
import com.jfinal.kit.Kv;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/purchaseOrderDetail", viewPath = "/WEB-INF/admin/purchase_order_detail")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _PurchaseOrderDetailController extends JBaseCRUDController<PurchaseOrderDetail> { 
	
	@Override
	public void index() {
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		String supplierId = getPara("supplierId");
		String warehouseId = getPara("warehouseId");
		List<Product> productlist = ProductQuery.me().findAllByUser(user.getId(),user.getDataArea(),supplierId);
		
		Map<String, Object> productInfoMap = new HashMap<String, Object>();
		List<Map<String, String>> productOptionList = new ArrayList<Map<String, String>>();
		
		for (Product record : productlist) {
			Map<String, String> productOptionMap = new HashMap<String, String>();
			
			String productId = record.getStr("id");
			String customName = record.getStr("name");
			String productNamePig = record.getStr("cps_name");
			
			productInfoMap.put(productId, record);
			
			productOptionMap.put("id", productId);
			if(StrKit.notBlank(productNamePig)) {
				productOptionMap.put("text", customName+"/"+productNamePig);
			}else {
				productOptionMap.put("text", customName);
			}
			
			productOptionList.add(productOptionMap);
		}
		
		Supplier supplier = SupplierQuery.me().findById(supplierId);
		
		
		setAttr("productInfoMap", JSON.toJSON(productInfoMap));
		setAttr("productOptionList", JSON.toJSON(productOptionList));
		
		setAttr("supplierInfoMap", JSON.toJSON(supplier));
		setAttr("warehouseId",warehouseId);
		setAttr("deliveryDate", DateFormatUtils.format(new Date(), "yyyy-MM-dd"));
		
		render("index.html");
	}
		
	public void list(){
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		List<Product> list = ProductQuery.me().findAllByUserId(user.getId(),user.getDataArea());
		renderJson(list);
	}
	
	public void showTr(){
		String id = getPara("id");
		Product product = ProductQuery.me().findByPId(id);
		renderJson(product);
	}
	
	//采购订单生成
	@Before(Tx.class)
	public void save() {
		final PurchaseOrder purchaseOrder =getModel(PurchaseOrder.class);
		final PurchaseOrderDetail purchaseOrderDetail = getModel(PurchaseOrderDetail.class);
		Map<String, String[]> paraMap = getParaMap();
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		Seller seller = SellerQuery.me().findById(getSessionAttr("sellerId").toString());
		/*采购订单：PO + 100000(机构编号或企业编号6位,这里取销售商编码) + 20171108(时间) + 000001(流水号)*/
		Date date = new Date();
		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
		String str = sdf.format(date);
		String porderSn = "PO"+seller.getSellerCode()+str.substring(0,8)+PurchaseOrderQuery.me().getNewSn(seller.getId());
		Date date1 = new Date();
		String Id = StrKit.getRandomUUID();
		purchaseOrder.set("id", Id);
		purchaseOrder.set("porder_sn", porderSn);
		purchaseOrder.set("supplier_id", StringUtils.getArrayFirst(paraMap.get("supplierId")));
		purchaseOrder.set("contact", StringUtils.getArrayFirst(paraMap.get("contact")));
		purchaseOrder.set("mobile", StringUtils.getArrayFirst(paraMap.get("mobile")));
		purchaseOrder.set("biz_user_id", user.getId());
		purchaseOrder.set("biz_date", date1);
		purchaseOrder.set("status", 0);
		purchaseOrder.set("total_amount", StringUtils.getArrayFirst(paraMap.get("total")));
		purchaseOrder.set("payment_type", StringUtils.getArrayFirst(paraMap.get("paymentType")));
		purchaseOrder.set("remark", StringUtils.getArrayFirst(paraMap.get("remark")));
		purchaseOrder.set("dept_id", user.getDepartmentId());
		purchaseOrder.set("data_area", user.getDataArea());
		purchaseOrder.set("deal_date",StringUtils.getArrayFirst(paraMap.get("dealDate")));
		purchaseOrder.set("create_date", date1);
		
		String productNumStr = StringUtils.getArrayFirst(paraMap.get("productNum"));
		Integer productNum = Integer.valueOf(productNumStr);
		
		int b = 0;
		String message = "";
		Set<String> set = new HashSet<String>();
		for(int a = 0 ;a<productNum;a++) {
				b++;
				String productId = StringUtils.getArrayFirst(paraMap.get("productId" + b));
				set.add(productId);
			}
		if(set.size()<productNum){
			message = "订单中有两件及以上相同的产品，请重新选择！";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("message",message);
			map.put("result", false);
			renderJson(map);
			return;
		}
		Department department = DepartmentQuery.me().findById(user.getDepartmentId());
		if(StrKit.isBlank(department.getOrderReviewerId())) {
			message = "部门未配置订单审核人";
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("message",message);
			map.put("result", false);
			renderJson(map);
			return;
		}
		
		purchaseOrder.save();
		Integer index = 0;
		
		for ( int count = 0 ;count<productNum;count++) {
			index++;
			String productId = StringUtils.getArrayFirst(paraMap.get("productId" + index));
			Product product = ProductQuery.me().findByUserId(user.getId(),productId);
			int big =product.getConvertRelate();
			if (StrKit.notBlank(productId)) {
				String Id2 = StrKit.getRandomUUID();
				String rowTotal=StringUtils.getArrayFirst(paraMap.get("inputRowTotal"+ index));
				purchaseOrderDetail.set("id", Id2);
				purchaseOrderDetail.set("purchase_order_id", Id);
				purchaseOrderDetail.set("product_id", productId);
				purchaseOrderDetail.set("product_count", (Integer.parseInt(StringUtils.getArrayFirst(paraMap.get("smallNum"+ index)))+Integer.parseInt(StringUtils.getArrayFirst(paraMap.get("bigNum"+ index)))*big));
				purchaseOrderDetail.set("product_amount", rowTotal);
				purchaseOrderDetail.set("product_price", StringUtils.getArrayFirst(paraMap.get("bigPrice"+ index)));
				purchaseOrderDetail.set("order_list",index);
				purchaseOrderDetail.set("create_date", date1);
				purchaseOrderDetail.set("dept_id", user.getDepartmentId());
				purchaseOrderDetail.set("data_area", user.getDataArea());
				purchaseOrderDetail.save();
				
			}

		}
		
		setAttr("orderId",Id);
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("orderId",Id);
		map.put("result", true);
		renderJson(map);

	}
	public void show_supplier(){
		//查询供应商
		String sellerId = getSessionAttr("sellerId");
		List<Supplier> suppliers = SupplierQuery.me().findBySellerId(sellerId);
		renderJson(suppliers);
	}
	
	// 获取出库单打印的信息
	public void getPrintInfo() {
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		String purchaseOrderId = getPara("purchaseOrderId");
		String[] outId = purchaseOrderId.split(",");
//				Integer isFinancePrint = getParaToInt("isFinancePrint");
		List<printAllNeedInfo> printAllNeedInfos = new ArrayList<>();
		List<orderProductInfo> orderProductInfos = new ArrayList<>();
		for (String s : outId) {
			printAllNeedInfo printAllNeedInfo = PurchaseOrderQuery.me().findStockOutForPrint(s);
			orderProductInfos = PurchaseOrderQuery.me().findPrintProductInfo(s,user.getDataArea());	
			printAllNeedInfo.setOrderProductInfos(orderProductInfos);
			printAllNeedInfos.add(printAllNeedInfo);
		}
		HashMap<String, Object> result = Maps.newHashMap();
		result.put("rows", printAllNeedInfos);
		renderJson(result);
	}
	
	public void sendMessage() {
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		String orderId = getPara("orderId");
		Department department = DepartmentQuery.me().findById(user.getDepartmentId());
		boolean result = true;
		if(department != null) {
			String[] orderReviewerIds =  department.getOrderReviewerId().split(",");
				for(int i = 0 ; i < orderReviewerIds.length ; i++) {
					User user2 = UserQuery.me().findById(orderReviewerIds[i]);
					sendOrderWxMesssage(orderId,user2, "---------------");
				}
		}
		renderJson(result);
	}
			
	//发送采购订单审核消息
	private void sendOrderWxMesssage( String orderId, User user, String comment) {

		Kv kv = Kv.create();
		
		WxMessageTemplate messageTemplate = WxMessageTemplateQuery.me().findByCode(Consts.PROC_ORDER_REVIEW);
		Record order = PurchaseOrderQuery.me().findMoreById(orderId);
		List<Record> orderDetail = PurchaseOrderDetailQuery.me().findByOutstockId(orderId);

		StringBuilder builder = new StringBuilder();
		for (Record record : orderDetail) {
			int convert_relate = record.get("convert_relate");
			builder.append("\n" + record.get("productName")+"("+record.getStr("cps_name") + ") " + record.getInt("product_count") / convert_relate + " "
					               + record.get("big_unit") + "\n");
			builder.append(record.get("productName") +"("+record.getStr("cps_name") + ") " + record.getInt("product_count") % convert_relate + " "
					               + record.get("small_unit") + "\n");
		}

		kv.set("touser", user.getWechatOpenId());
		kv.set("toWorkUserId", user.getWechatUseriId());
		kv.set("templateId", messageTemplate.getTemplateId());

		kv.set("orderId", order.get("porder_sn"));
		kv.set("customerName", order.get("supplier_name"));
		kv.set("submit", user.getRealname());
		kv.set("createTime", order.get("create_date"));

		kv.set("product", builder.toString());
		kv.set("total", order.get("total_amount"));
		kv.set("status", comment);
		kv.set("remark", "您有采购订单待审核，请登录后台及时处理!");
		MessageKit.sendMessage(Actions.NotifyWechatMessage.ORDER_AUDIT_MESSAGE, kv);
	}
}
