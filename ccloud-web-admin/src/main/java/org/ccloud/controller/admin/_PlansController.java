/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.ccloud.Consts;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;
import org.ccloud.model.Dict;
import org.ccloud.model.Plans;
import org.ccloud.model.Seller;
import org.ccloud.model.SellerProduct;
import org.ccloud.model.User;
import org.ccloud.model.query.DictQuery;
import org.ccloud.model.query.PlansQuery;
import org.ccloud.model.query.SellerProductQuery;
import org.ccloud.model.query.SellerQuery;
import org.ccloud.model.query.UserQuery;
import org.ccloud.model.vo.PlansExcel;
import org.ccloud.model.vo.UserExecel;

import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;

import cn.afterturn.easypoi.excel.ExcelExportUtil;
import cn.afterturn.easypoi.excel.ExcelImportUtil;
import cn.afterturn.easypoi.excel.entity.ExportParams;
import cn.afterturn.easypoi.excel.entity.ImportParams;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/plans", viewPath = "/WEB-INF/admin/plans")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _PlansController extends JBaseCRUDController<Plans> { 
	
	
	@Override
	public void index() {
		render("index.html");
	}
	
	public void list() {
		String dataArea = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		String keyword = getPara("k");
        if (StrKit.notBlank(keyword)) {
            keyword = StringUtils.urlDecode(keyword);
            setAttr("k", keyword);
        }
        String type = getPara("type");
        Page<Plans> page = PlansQuery.me().paginate(getPageNumber(), getPageSize(),keyword, "cp.create_date", dataArea,type);
        Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
        renderJson(map);
	}
	
	@RequiresPermissions(value = { "/admin/plans/uploading", "/admin/dealer/all",
			"/admin/all" }, logical = Logical.OR)
	public void upload() {
		render("upload.html");
	}
	
	@SuppressWarnings("resource")
	@RequiresPermissions(value = { "/admin/plans/uploading", "/admin/dealer/all",
	"/admin/all" }, logical = Logical.OR)
	public void plansTemplate() {
		String filePath = getSession().getServletContext().getRealPath("\\") + "\\WEB-INF\\admin\\plans\\"
				+ "plansInfo.xlsx";
		String sellerId = getSessionAttr(Consts.SESSION_SELLER_ID);
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		List<Record> productRecords = SellerProductQuery.me().findProductListForApp(sellerId, "", ""); 
		List<String> headers = new ArrayList<String>();
		headers.add("2018-02月计划");
		headers.add("开始时间");
		headers.add("结束时间");
		headers.add("计划类型(周计划/月计划/年计划)");
		List<User> users = UserQuery.me().findByDeptId(user.getDepartmentId());
	    //导出文件路径
	    String basePath = "D:/";
	    //文件名
	    String exportFileName = "plansTemplate.xlsx";
	    // 声明一个工作薄
	    XSSFWorkbook workBook = new XSSFWorkbook();
	    XSSFSheet sheet = workBook.createSheet();
	    // 生成一个表格
	    workBook.setSheetName(0,"销售计划");
	    // 创建表格标题行 第一行
	    for(int i = 0 ;i<headers.size();i++ ) {
	    	if(i<=3) {
	    		sheet.createRow(i).createCell(0).setCellValue(headers.get(i));
	    		sheet.setColumnWidth((short) 0, (short) 2600);
	    	}
	    }
	    XSSFRow row = sheet.createRow(4);
	    row.createCell(0).setCellValue("产品");
	    for(int i = 0 ; i<users.size();i++) {
	    	row.createCell(i+1).setCellValue(users.get(i).getRealname());
	    }
	    //插入需导出的数据
	    for(int i=0;i<productRecords.size();i++){
	        XSSFRow rowP = sheet.createRow(i+5);
	        rowP.createCell(0).setCellValue(productRecords.get(i).getStr("custom_name")+" "+productRecords.get(i).getStr("valueName"));
	    }
	    File  file = new File(filePath);
	    //文件输出流
	    try {
			FileOutputStream outStream = new FileOutputStream(file);
			workBook.write(outStream);
			outStream.flush();
			outStream.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		renderFile(new File(filePath));
	
	}
	@Before(Tx.class)
	@RequiresPermissions(value = { "/admin/plans/uploading", "/admin/dealer/all",
			"/admin/all" }, logical = Logical.OR)
	
	public void uploading() {
		int inCnt = 0;

		String sellerId = getSessionAttr("sellerId");
		String dataArea = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		
		File file = getFile().getFile();
		ImportParams params = new ImportParams();

		List<PlansExcel> list = ExcelImportUtil.importExcel(file, PlansExcel.class, params);
		for (PlansExcel excel : list) {
			String plansId = "";
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			Plans plans = new Plans();
			User user = UserQuery.me().findRealNameAndMobileAndDataArea(excel.getBizUser(),excel.getMobile(),dataArea);
			Seller seller = SellerQuery.me()._findByDeptId(user.getDepartmentId());
			SellerProduct sellerProduct = SellerProductQuery.me().findbyCustomerNameAndSellerIdAndProductId(excel.getSellerProduct(), sellerId);
			Dict dict = DictQuery.me().findbyName(excel.getType());
			plansId = StrKit.getRandomUUID();
			plans.setId(plansId);
			plans.setSellerId(seller.getId());
			plans.setUserId(user.getId());
			plans.setType(dict.getValue());
			plans.setSellerProductId(sellerProduct.getId());
			plans.setPlanNum(new BigDecimal(excel.getPlanNum()));
			plans.setCompleteNum(new BigDecimal(0));
			plans.setCompleteRatio(new BigDecimal(0));
			try {
				plans.setStartDate(sdf.parse(excel.getStartDate()));
				plans.setEndDate(sdf.parse(excel.getEndDate()));
			} catch (ParseException e) {
				e.printStackTrace();
			}
			plans.setDeptId(user.getDepartmentId());
			plans.setDataArea(user.getDataArea());
			plans.setCreateDate(new Date());
			plans.save();
			inCnt++;
		}

		renderAjaxResultForSuccess("成功导入计划" + inCnt + "条");
	}
	
}
