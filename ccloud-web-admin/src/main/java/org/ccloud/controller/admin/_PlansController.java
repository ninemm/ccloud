/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.controller.admin;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.math.BigDecimal;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFCellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.shiro.authz.annotation.Logical;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.ccloud.Consts;
import org.ccloud.core.JBaseCRUDController;
import org.ccloud.core.interceptor.ActionCacheClearInterceptor;
import org.ccloud.route.RouterMapping;
import org.ccloud.route.RouterNotAllowConvert;
import org.ccloud.utils.StringUtils;
import org.ccloud.model.Dict;
import org.ccloud.model.Plans;
import org.ccloud.model.Seller;
import org.ccloud.model.User;
import org.ccloud.model.query.DictQuery;
import org.ccloud.model.query.PlansQuery;
import org.ccloud.model.query.SellerProductQuery;
import org.ccloud.model.query.SellerQuery;
import org.ccloud.model.query.UserQuery;

import com.google.common.collect.ImmutableMap;
import com.jfinal.aop.Before;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.activerecord.tx.Tx;
/**
 * Generated by 九毫米(http://9mm.tech).
 */
@RouterMapping(url = "/admin/plans", viewPath = "/WEB-INF/admin/plans")
@Before(ActionCacheClearInterceptor.class)
@RouterNotAllowConvert
public class _PlansController extends JBaseCRUDController<Plans> { 
	
	
	@Override
	public void index() {
		render("index.html");
	}
	
	public void list() {
		String dataArea = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		String keyword = getPara("k");
        if (StrKit.notBlank(keyword)) {
            keyword = StringUtils.urlDecode(keyword);
            setAttr("k", keyword);
        }
        String type = getPara("type");
        Page<Plans> page = PlansQuery.me().paginate(getPageNumber(), getPageSize(),keyword, "cp.create_date", dataArea,type);
        Map<String, Object> map = ImmutableMap.of("total", page.getTotalRow(), "rows", page.getList());
        renderJson(map);
	}
	
	@RequiresPermissions(value = { "/admin/plans/uploading", "/admin/dealer/all",
			"/admin/all" }, logical = Logical.OR)
	public void upload() {
		render("upload.html");
	}
	
	@SuppressWarnings("resource")
	@RequiresPermissions(value = { "/admin/plans/uploading", "/admin/dealer/all",
	"/admin/all" }, logical = Logical.OR)
	public void plansTemplate() {
		String filePath = getSession().getServletContext().getRealPath("\\") + "\\WEB-INF\\admin\\plans\\"
				+ "plansTemplate.xlsx";
		String sellerId = getSessionAttr(Consts.SESSION_SELLER_ID);
		String dataArea = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		List<Record> productRecords = SellerProductQuery.me().findProductListForApp(sellerId, "", ""); 
		List<String> headers = new ArrayList<String>();
		headers.add("2018-01月月计划");
		headers.add("开始时间：");
		headers.add("结束时间：");
		headers.add("计划类型(周计划/月计划/年计划)");
		List<User> users = UserQuery.me().findByData(dataArea);
	    // 声明一个工作薄
	    XSSFWorkbook workBook = new XSSFWorkbook();
	    XSSFSheet sheet = workBook.createSheet();
	   //导出excel样式
	    XSSFCellStyle ztStyle = (XSSFCellStyle) workBook.createCellStyle();   
	    Font ztFont = workBook.createFont();  
	    ztFont.setBoldweight(XSSFFont.BOLDWEIGHT_BOLD);
        ztStyle.setFont(ztFont); 
	    ztStyle.setAlignment(XSSFCellStyle.ALIGN_CENTER); 
	    ztStyle.setVerticalAlignment(XSSFCellStyle.VERTICAL_CENTER);
	    ztStyle.setWrapText(true);
	    // 生成一个表格
	    workBook.setSheetName(0,"销售计划");
	    // 创建表格标题行 第一行
	    for(int i = 0 ;i<headers.size();i++ ) {
	    	if(i<=3) {
	    		XSSFRow newRow = sheet.createRow(i);
	    		Cell cell = newRow.createCell(1);
	    		cell.setCellValue(headers.get(i));
	    		cell.setCellStyle(ztStyle);
	    		if(i==1) {
	    			Cell cell_01 = newRow.createCell(2);
	    			cell_01.setCellValue("2018/01/01");
	    		}else if(i==2) {
	    			Cell cell_02 = newRow.createCell(2);
	    			cell_02.setCellValue("2018/01/31");
	    		}else if(i==3) {
	    			Cell cell_03 = newRow.createCell(2);
	    			cell_03.setCellValue("月计划");
	    		}else {
	    			Cell cell_0 = newRow.createCell(2);
	    			cell_0.setCellValue("请将时间清空重新填入");
	    		}
	    	}
	    }
	    //模板例子
	   
	    XSSFRow row_0 = sheet.createRow(4);
	    for(int i = 0 ; i<users.size();i++) {
	    	row_0.createCell(i+2).setCellValue(users.get(i).getId());
	    	row_0.setZeroHeight(true);
	    }
	    XSSFRow row = sheet.createRow(5);
	    Cell ce = row.createCell(1);
	    ce.setCellValue("产品");
	    ce.setCellStyle(ztStyle);
	    for(int i = 0 ; i<users.size();i++) {
	    	Cell cell = row.createCell(i+2);
	    	cell.setCellValue(users.get(i).getRealname());
	    	cell.setCellStyle(ztStyle);
	    }
	   sheet.setColumnHidden((short)0,true);
	    //插入需导出的数据
	    for(int i=0;i<productRecords.size();i++){
	        XSSFRow rowP = sheet.createRow(i+6);
	        rowP.createCell(0).setCellValue(productRecords.get(i).getStr("sell_product_id"));
	        Cell cell = rowP.createCell(1);
	        cell.setCellValue(productRecords.get(i).getStr("custom_name")+" "+productRecords.get(i).getStr("valueName"));
	        cell.setCellStyle(ztStyle);
	        for(int j = 0;j<users.size() ; j++) {
	        	rowP.createCell(j+2).setCellValue(0);
	        }
	    }
	    File  file = new File(filePath);
	    //文件输出流
	    try {
			FileOutputStream outStream = new FileOutputStream(file);
			workBook.write(outStream);
			outStream.flush();
			outStream.close();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
		renderFile(new File(filePath));
	
	}
	@Before(Tx.class)
	@RequiresPermissions(value = { "/admin/plans/uploading", "/admin/dealer/all",
			"/admin/all" }, logical = Logical.OR)
	
	public void uploading() {
		int inCnt = 0;

		String sellerId = getSessionAttr("sellerId");
		User user = getSessionAttr(Consts.SESSION_LOGINED_USER);
		String dataArea = getSessionAttr(Consts.SESSION_SELECT_DATAAREA);
		List<Record> productRecords = SellerProductQuery.me().findProductListForApp(sellerId, "", ""); 
		List<User> users = UserQuery.me().findByData(dataArea);
		//开始时间
		String startDate = "";
		//结束时间
		String endDate = "";
		//计划类型
		String type = "";
		File file = getFile().getFile();
		try {
			Workbook workbook = WorkbookFactory.create(file);
			 Sheet sheet = workbook.getSheetAt(0);
			 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			//设置单元格类型
			 Cell cell_01 = sheet.getRow(1).getCell(2);
			 if(cell_01==null) {
				 renderAjaxResultForError("开始时间不能为空！");
					return;
			 }
			 startDate = sdf.format(HSSFDateUtil.getJavaDate(cell_01.getNumericCellValue()));
			 Cell cell_02 = sheet.getRow(2).getCell(2);
			 if(cell_02==null) {
				 renderAjaxResultForError("结束时间不能为空！");
					return;
			 }
			 endDate = sdf.format(HSSFDateUtil.getJavaDate(cell_02.getNumericCellValue()));
			 if(sheet.getRow(3).getCell(2)==null) {
				 renderAjaxResultForError("计划类型不能为空");
					return;
			 }
			 type = sheet.getRow(3).getCell(2).getStringCellValue();
			 Dict dict = DictQuery.me().findbyName(type);
			 for(int i = 0;i<users.size() ; i++) {
				 Cell cell = sheet.getRow(4).getCell(i+2);
				 User us = UserQuery.me().findById(cell.getStringCellValue());
				 Seller seller = SellerQuery.me()._findByDeptId(us.getDepartmentId());
				 for(int j = 0;j<productRecords.size();j++) {
					String sellerProductId = sheet.getRow(j+6).getCell(0).getStringCellValue();
					Cell cl = sheet.getRow(j+6).getCell(i+2);
					if(cl==null) {
						continue;
					}
					if(cl.getNumericCellValue()==0) {
						continue;
					}
					cl.setCellType(CellType.STRING);
					Plans plans = new Plans();
					plans.setId(StrKit.getRandomUUID());
					plans.setSellerId(seller.getId());
					plans.setUserId(user.getId());
					plans.setType(dict.getValue());
					plans.setSellerProductId(sellerProductId);
					plans.setPlanNum(new BigDecimal(cl.getStringCellValue()));
					plans.setCompleteNum(new BigDecimal(0));
					plans.setCompleteRatio(new BigDecimal(0));
					plans.setStartDate(sdf.parse(startDate));
					plans.setEndDate(sdf.parse(endDate));
					plans.setDeptId(us.getDepartmentId());
					plans.setDataArea(us.getDataArea());
					plans.setCreateDate(new Date());
					plans.save();
					inCnt++;
				 }
			 }
		} catch (EncryptedDocumentException e) {
			e.printStackTrace();
		} catch (InvalidFormatException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (ParseException e) {
			e.printStackTrace();
		}
		renderAjaxResultForSuccess("成功导入计划" + inCnt + "条数据");
	}
	
}
