/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 * <p>
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.gnu.org/licenses/lgpl-3.0.txt
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.ccloud.Consts;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class Bi2SalesQuery extends JBaseQuery {

	private static final Bi2SalesQuery QUERY = new Bi2SalesQuery();

	public static Bi2SalesQuery me() {
		return QUERY;
	}

	// 订单总金额
	public Double findTotalAmount(String[] dataArea, String provName, String cityName, String countryName,
	                              String startDate, String endDate) {

		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder sqlBuilder = new StringBuilder(" SELECT ifnull(SUM(cso.total_amount), 0) - ifnull(SUM(t.totalAmount), 0) AS totalAmount ");
		sqlBuilder.append(" FROM cc_sales_outstock cso ");
		sqlBuilder.append(" JOIN cc_seller_customer csc ON cso.customer_id = csc.id ");
		sqlBuilder.append(" JOIN cc_customer cc ON csc.customer_id = cc.id ");
		sqlBuilder.append(" LEFT JOIN ");
		sqlBuilder.append(" (SELECT csri.outstock_id, ifnull(SUM(csri.total_reject_amount),0) AS totalAmount ");
		sqlBuilder.append(" FROM cc_sales_refund_instock csri ");
		sqlBuilder.append(" WHERE csri.biz_date IS NOT NULL ");
		sqlBuilder.append(" GROUP BY csri.outstock_id)t ON cso.id = t.outstock_id ");

		sqlBuilder.append(" WHERE csc.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "cso.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.country_name", countryName, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and cso.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and cso.biz_date <= ?");
			params.add(endDate);
		}

		return Db.queryBigDecimal(sqlBuilder.toString(), params.toArray()).doubleValue();

	}

	// 订单记录总数
	public Long findOrderCount(String[] dataArea, String provName, String cityName, String countryName,
	                           String startDate, String endDate) {

		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder sqlBuilder = new StringBuilder(" SELECT count(1) FROM cc_sales_outstock cso ");
		sqlBuilder.append(" JOIN cc_seller_customer csc ON csc.id = cso.customer_id ");
		sqlBuilder.append(" JOIN cc_customer cc ON cc.id = csc.customer_id ");

		sqlBuilder.append(" WHERE csc.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "cso.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.country_name", countryName, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and cso.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and cso.biz_date <= ?");
			params.add(endDate);
		}

		return Db.queryLong(sqlBuilder.toString(), params.toArray());
	}

	// 订单客户总数
	public Long findCustomerCount(String[] dataArea, String provName, String cityName, String countryName,
	                              String startDate, String endDate) {

		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder sqlBuilder = new StringBuilder("select count(1) from (");
		sqlBuilder.append(" SELECT cso.customer_id ");
		sqlBuilder.append(" FROM cc_sales_outstock cso ");
		sqlBuilder.append(" JOIN cc_seller_customer csc ON cso.customer_id = csc.id ");
		sqlBuilder.append(" JOIN cc_customer cc ON csc.customer_id = cc.id ");

		sqlBuilder.append(" WHERE csc.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);
		sqlBuilder.append(" and cso.biz_date is not null ");

		appendIfNotEmptyWithLike(sqlBuilder, "cso.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.country_name", countryName, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and cso.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and cso.biz_date <= ?");
			params.add(endDate);
		}
		sqlBuilder.append(" GROUP BY cso.customer_id ) t1");
		return Db.queryLong(sqlBuilder.toString(), params.toArray());

	}

	// 客户总数
	public Long findAllCustomerCount(String[] dataArea, String provName, String cityName, String countryName) {

		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder sqlBuilder = new StringBuilder("SELECT count(1) FROM cc_seller_customer csc");
		sqlBuilder.append(" JOIN cc_customer cc ON cc.id = csc.customer_id ");

		sqlBuilder.append(" where csc.is_enabled = 1 ");
		sqlBuilder.append(" and csc.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmptyWithLike(sqlBuilder, "csc.data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.country_name", countryName, params, false);

		return Db.queryLong(sqlBuilder.toString(), params.toArray());

	}

	// 订单平均金额
	public List<Record> findOrderAvgAmountList(String[] dataArea, String provName, String cityName, String countryName,
	                                           String startDate, String endDate) {

		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder(" SELECT CONCAT(YEAR(cso.biz_date) ,'-', MONTH(cso.biz_date),'-',DAY(cso.biz_date)) idate, ");
		sqlBuilder.append(" TRUNCATE(((ifnull(SUM(cso.total_amount),0)- ifnull(SUM(t.totalAmount),0))/COUNT(1)),2)as avgAmount ");
		sqlBuilder.append(" FROM cc_sales_outstock cso ");
		sqlBuilder.append(" JOIN cc_seller_customer csc ON cso.customer_id = csc.id ");
		sqlBuilder.append(" JOIN cc_customer cc ON csc.customer_id = cc.id ");
		sqlBuilder.append(" LEFT JOIN ");
		sqlBuilder.append(" (SELECT csri.outstock_id, ifnull(SUM(csri.total_reject_amount),0) AS totalAmount ");
		sqlBuilder.append(" FROM cc_sales_refund_instock csri ");
		sqlBuilder.append(" WHERE csri.biz_date IS NOT NULL ");
		sqlBuilder.append(" GROUP BY csri.outstock_id)t ON cso.id = t.outstock_id ");

		sqlBuilder.append(" WHERE csc.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "cso.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "cc.country_name", countryName, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and cso.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and cso.biz_date <= ?");
			params.add(endDate);
		}
		sqlBuilder.append(" GROUP BY YEAR(cso.biz_date) , MONTH(cso.biz_date),DAY(cso.biz_date) ");
		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	//产品区域分布
	public List<Record> findAreaListByProduct(String[] dataArea, String provName, String cityName, String countryName,
	                                          String startDate, String endDate, String cInvCode) {

		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder("select concat(p.name,' ',t1.valueName) as cInvName ,");
		if (StrKit.notBlank(cityName)) {
			sqlBuilder.append(" c.country_name countryName");
		} else if (StrKit.notBlank(provName)) {
			sqlBuilder.append(" c.city_name cityName");
		} else {
			sqlBuilder.append(" c.prov_name provName");
		}

		sqlBuilder.append(" ,TRUNCATE ((SUM(sod.product_count) - ifnull(sum(t.product_count), 0)) / p.convert_relate,2) totalNum, ");
		sqlBuilder.append(" TRUNCATE ((sum(sod.product_amount) - ifnull(sum(t.product_amount), 0)) / 10000, 2) totalAmount ");
		sqlBuilder.append(" FROM cc_sales_outstock_detail sod ");
		sqlBuilder.append(" JOIN cc_sales_outstock so ON sod.outstock_id = so.id ");
		sqlBuilder.append(" JOIN cc_seller_customer sc ON so.customer_id = sc.id ");
		sqlBuilder.append(" JOIN cc_customer c ON sc.customer_id = c.id ");
		sqlBuilder.append(" JOIN cc_seller_product sp ON sod.sell_product_id = sp.id ");
		sqlBuilder.append(" JOIN cc_product p ON sp.product_id = p.id ");

		sqlBuilder.append(" LEFT JOIN (SELECT sv.id, cv.product_set_id, GROUP_CONCAT(sv.`name`) AS valueName FROM cc_goods_specification_value sv RIGHT JOIN cc_product_goods_specification_value cv ON cv.goods_specification_value_set_id = sv.id GROUP BY cv.product_set_id ) t1 ON t1.product_set_id = p.id ");

		sqlBuilder.append(" LEFT JOIN (SELECT srd.outstock_detail_id, srd.product_count, srd.product_amount ");
		sqlBuilder.append(" FROM cc_sales_refund_instock_detail srd ");
		sqlBuilder.append(" JOIN cc_sales_refund_instock sr ON srd.refund_instock_id = sr.id ");
		sqlBuilder.append(" WHERE sr.biz_date IS NOT NULL)t ON sod.id = t.outstock_detail_id ");

		sqlBuilder.append(" WHERE sc.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "so.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "c.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "c.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "c.country_name", countryName, params, false);
		appendIfNotEmpty(sqlBuilder, "p.id", cInvCode, params, false);

		if (StrKit.notBlank(startDate)) {
			sqlBuilder.append(" and so.biz_date >= ?");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			sqlBuilder.append(" and so.biz_date <= ?");
			params.add(endDate);
		}

		sqlBuilder.append(" group by c.prov_name");
		if (StrKit.notBlank(provName)) {
			sqlBuilder.append(", c.city_name");
		}

		if (StrKit.notBlank(cityName)) {
			sqlBuilder.append(", c.country_name");
		}
		sqlBuilder.append(" order by totalAmount desc");

		return Db.find(sqlBuilder.toString(), params.toArray());

	}

	public List<Record> findCustomerTypeList(String[] dataArea, String provName, String cityName, String countryName,
	                                         String startDate, String endDate) {

		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder("SELECT ct.`name` ");
		sqlBuilder.append("FROM cc_sales_outstock o LEFT JOIN cc_seller_customer cc ON o.customer_id = cc.id ");
		sqlBuilder.append("LEFT JOIN cc_customer cu on cc.customer_id = cu.id ");
		sqlBuilder.append("LEFT JOIN cc_customer_type ct on ct.id = o.customer_type_id ");

		boolean needWhere = true;
		needWhere = appendIfNotEmpty(sqlBuilder, "o.dealer_data_area", dataArea, params, needWhere);
		needWhere = appendIfNotEmpty(sqlBuilder, "cu.prov_name", provName, params, needWhere);
		needWhere = appendIfNotEmpty(sqlBuilder, "cu.city_name", cityName, params, needWhere);
		needWhere = appendIfNotEmpty(sqlBuilder, "cu.country_name", countryName, params, needWhere);

		if (needWhere) {
			sqlBuilder.append(" where o.status != ? and cc.customer_kind = ? ");
		} else {
			sqlBuilder.append(" and o.status != ? and cc.customer_kind = ? ");
		}
		params.add(Consts.SALES_OUT_STOCK_STATUS_DEFUALT);
		params.add(Consts.CUSTOMER_KIND_COMMON);
		if (startDate != null) {
			sqlBuilder.append(" and o.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and o.biz_date <= ?");
			params.add(endDate);
		}

		sqlBuilder.append(" group by o.customer_type_id");

		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	//产品客户分布
	public List<Record> findCustomerTypeListByProduct(String[] dataArea, String provName, String cityName,
	                                                  String countryName, String startDate, String endDate, String cInvCode) {

		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder(" SELECT ct.`name` customerTypeName ");
		sqlBuilder.append(" ,TRUNCATE ((SUM(sod.product_count) - ifnull(sum(t.product_count), 0)) / p.convert_relate,2) totalNum, ");
		sqlBuilder.append(" TRUNCATE ((sum(sod.product_amount) - ifnull(sum(t.product_amount), 0)) / 10000, 2) totalAmount ");
		sqlBuilder.append(" FROM cc_sales_outstock_detail sod ");
		sqlBuilder.append(" JOIN cc_sales_outstock so ON sod.outstock_id = so.id ");
		sqlBuilder.append(" JOIN cc_seller_customer sc ON so.customer_id = sc.id ");
		sqlBuilder.append(" JOIN cc_customer c ON sc.customer_id = c.id ");
		sqlBuilder.append(" JOIN cc_seller_product sp ON sod.sell_product_id = sp.id ");
		sqlBuilder.append(" JOIN cc_product p ON sp.product_id = p.id ");
		sqlBuilder.append(" JOIN cc_customer_type ct on so.customer_type_id = ct.id");
		sqlBuilder.append(" LEFT JOIN (SELECT srd.outstock_detail_id, srd.product_count, srd.product_amount ");
		sqlBuilder.append(" FROM cc_sales_refund_instock_detail srd ");
		sqlBuilder.append(" JOIN cc_sales_refund_instock sr ON srd.refund_instock_id = sr.id ");
		sqlBuilder.append(" WHERE sr.biz_date IS NOT NULL)t ON sod.id = t.outstock_detail_id ");

		sqlBuilder.append(" WHERE sc.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "so.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "c.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "c.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "c.country_name", countryName, params, false);
		appendIfNotEmpty(sqlBuilder, "p.id", cInvCode, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and so.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and so.biz_date <= ?");
			params.add(endDate);
		}

		sqlBuilder.append(" GROUP BY so.customer_type_id");
		sqlBuilder.append(" order by totalAmount desc");

		return Db.find(sqlBuilder.toString(), params.toArray());

	}

	//产品销售排行
	public List<Record> findProductList(String[] dataArea, String provName, String cityName, String countryName,
	                                    String startDate, String endDate) {

		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder(" SELECT concat(p.name,' ',t1.valueName) as custom_name, p.id, ");
		sqlBuilder.append(" TRUNCATE ((SUM(sod.product_count) - ifnull(sum(t.product_count), 0)) / p.convert_relate,2) productCount, ");
		sqlBuilder.append(" TRUNCATE ((sum(sod.product_amount) - ifnull(sum(t.product_amount), 0)) / 10000, 2) totalAmount ");
		sqlBuilder.append(" FROM cc_sales_outstock_detail sod ");
		sqlBuilder.append(" JOIN cc_sales_outstock so ON sod.outstock_id = so.id ");
		sqlBuilder.append(" JOIN cc_seller_customer sc ON so.customer_id = sc.id ");
		sqlBuilder.append(" JOIN cc_customer c ON sc.customer_id = c.id ");
		sqlBuilder.append(" JOIN cc_seller_product sp ON sod.sell_product_id = sp.id ");
		sqlBuilder.append(" JOIN cc_product p ON sp.product_id = p.id ");

		sqlBuilder.append(" LEFT JOIN (SELECT sv.id, cv.product_set_id, GROUP_CONCAT(sv.`name`) AS valueName FROM cc_goods_specification_value sv RIGHT JOIN cc_product_goods_specification_value cv ON cv.goods_specification_value_set_id = sv.id GROUP BY cv.product_set_id ) t1 ON t1.product_set_id = p.id ");

		sqlBuilder.append(" LEFT JOIN (SELECT srd.outstock_detail_id, srd.product_count, srd.product_amount ");
		sqlBuilder.append(" FROM cc_sales_refund_instock_detail srd ");
		sqlBuilder.append(" JOIN cc_sales_refund_instock sr ON srd.refund_instock_id = sr.id ");
		sqlBuilder.append(" WHERE sr.biz_date IS NOT NULL)t ON sod.id = t.outstock_detail_id ");

		sqlBuilder.append(" WHERE sc.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "so.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "c.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "c.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "c.country_name", countryName, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and so.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and so.biz_date <= ?");
			params.add(endDate);
		}

		sqlBuilder.append(" GROUP BY p.id");
		sqlBuilder.append(" order by totalAmount desc");

		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	public List<Record> findOrderAmount(String[] dataArea, String provName, String cityName, String countryName,
	                                    String startDate, String endDate, int divideFlg) {

		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder("select ");

		if (StrKit.notBlank(cityName)) {
			sqlBuilder.append(" cc.country_name as countryName");
		} else if (StrKit.notBlank(provName)) {
			sqlBuilder.append(" cc.city_name as countryName");
		} else {
			sqlBuilder.append(" cc.prov_name as countryName");
		}

		if (divideFlg == 1) {
			sqlBuilder.append(", TRUNCATE(SUM(cso.total_amount)/10000, 2) as totalAmount");
		} else if (divideFlg == 2) {
			sqlBuilder.append(", TRUNCATE(SUM(cso.total_amount)/100000, 2) as totalAmount");
		} else if (divideFlg == 3) {
			sqlBuilder.append(", TRUNCATE(SUM(cso.total_amount)/40000, 2) as totalAmount");
		} else if (divideFlg == 4) {
			sqlBuilder.append(", TRUNCATE(SUM(cso.total_amount)/20000, 2) as totalAmount");
		}

		sqlBuilder.append(" from cc_sales_outstock cso ");
		sqlBuilder.append(" left join cc_seller_customer csc on cso.customer_id = csc.id");
		sqlBuilder.append(" left join cc_customer cc on csc.customer_id = cc.id");

		boolean needWhere = true;
		needWhere = appendIfNotEmpty(sqlBuilder, "cso.dealer_data_area", dataArea, params, needWhere);
		needWhere = appendIfNotEmpty(sqlBuilder, "cc.prov_name", provName, params, needWhere);
		needWhere = appendIfNotEmpty(sqlBuilder, "cc.city_name", cityName, params, needWhere);
		needWhere = appendIfNotEmpty(sqlBuilder, "cc.country_name", countryName, params, needWhere);

		if (needWhere) {
			sqlBuilder.append(" where 1 = 1");
		}

		if (StrKit.notBlank(startDate)) {
			sqlBuilder.append(" and cso.biz_date >= ?");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			sqlBuilder.append(" and cso.biz_date <= ?");
			params.add(endDate);
		}
		sqlBuilder.append(" and csc.customer_kind != ?");
		params.add(Consts.CUSTOMER_KIND_SELLER);

		sqlBuilder.append(" group by cc.prov_name");
		if (StrKit.notBlank(provName)) {
			sqlBuilder.append(", cc.city_name");
		}

		if (StrKit.notBlank(cityName)) {
			sqlBuilder.append(", cc.country_name");
		}
		sqlBuilder.append(" order by totalAmount desc");

		return Db.find(sqlBuilder.toString(), params.toArray());

	}

	//经销商销售排行和销售情况
	public List<Record> findsalesList(boolean isDealer, String provName, String cityName, String countryName,
	                                  String[] dataArea, String startDate, String endDate) {

		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder("SELECT s.id, d.data_area, TRUNCATE( (ifnull(sum(so.total_amount),0) - ifnull(sum(t.totalAmount),0)) / 10000 , 2) totalAmount, ");
		if (isDealer) {
			sqlBuilder.append(" s.id, d.data_area, TRUNCATE( (ifnull(sum(so.total_amount),0) - ifnull(sum(t.totalAmount),0)) / 10000 , 2) totalAmount, s.seller_name dealerName,s.id dealerCode ");
		} else {
			sqlBuilder.append(" so.seller_id, d.data_area, TRUNCATE( (ifnull(sum(so.total_amount),0) - ifnull(sum(t.totalAmount),0)) / 10000 , 2) totalAmount, se.seller_name sellerName,se.id dealerCode ");
		}
		sqlBuilder.append(" FROM cc_sales_outstock so ");
		sqlBuilder.append(" JOIN cc_seller_customer sc ON sc.id=so.customer_id ");
		sqlBuilder.append(" JOIN cc_customer c ON c.id=sc.customer_id ");
		sqlBuilder.append(" JOIN cc_department d ON so.dealer_data_area = d.data_area");
		sqlBuilder.append(" JOIN cc_seller s ON d.id=s.dept_id ");

		if (!isDealer) {
			sqlBuilder.append(" JOIN cc_seller se ON so.seller_id = se.id ");
		}
		sqlBuilder.append(" LEFT JOIN ");
		sqlBuilder.append(" (SELECT csri.outstock_id, ifnull(SUM(csri.total_reject_amount),0) AS totalAmount ");
		sqlBuilder.append(" FROM cc_sales_refund_instock csri ");
		sqlBuilder.append(" WHERE csri.biz_date IS NOT NULL ");
		sqlBuilder.append(" GROUP BY csri.outstock_id)t ON so.id = t.outstock_id ");

		sqlBuilder.append(" where d.data_area > '001001' ");

		sqlBuilder.append(" and sc.customer_kind = ?");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "so.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "c.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "c.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "c.country_name", countryName, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and so.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and so.biz_date <= ?");
			params.add(endDate);
		}

		if (isDealer) {
			sqlBuilder.append(" GROUP BY s.id");
		} else {
			sqlBuilder.append(" GROUP BY so.seller_id");
		}
		sqlBuilder.append(" order by totalAmount desc");

		return Db.find(sqlBuilder.toString(), params.toArray());

	}

	//经销商产品销售排行
	public List<Record> findProductListByDealer(String provName, String cityName, String countryName, String dataArea,
	                                            String startDate, String endDate) {

		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder("SELECT concat(p.name,' ',t1.valueName) as cInvName,");
		sqlBuilder.append(" TRUNCATE ((SUM(sod.product_count) - ifnull(sum(t.product_count), 0)) / p.convert_relate,2) totalNum, ");
		sqlBuilder.append(" TRUNCATE ((sum(sod.product_amount) - ifnull(sum(t.product_amount), 0)) / 10000, 2) totalAmount ");
		sqlBuilder.append(" FROM cc_sales_outstock_detail sod ");
		sqlBuilder.append(" JOIN cc_sales_outstock so ON sod.outstock_id = so.id ");
		sqlBuilder.append(" JOIN cc_seller_customer sc ON so.customer_id = sc.id ");
		sqlBuilder.append(" JOIN cc_customer c ON sc.customer_id = c.id ");
		sqlBuilder.append(" JOIN cc_seller_product sp ON sod.sell_product_id = sp.id ");
		sqlBuilder.append(" JOIN cc_product p ON sp.product_id = p.id ");

		sqlBuilder.append(" LEFT JOIN (SELECT sv.id, cv.product_set_id, GROUP_CONCAT(sv.`name`) AS valueName FROM cc_goods_specification_value sv RIGHT JOIN cc_product_goods_specification_value cv ON cv.goods_specification_value_set_id = sv.id GROUP BY cv.product_set_id ) t1 ON t1.product_set_id = p.id ");

		sqlBuilder.append(" LEFT JOIN (SELECT srd.outstock_detail_id, srd.product_count, srd.product_amount ");
		sqlBuilder.append(" FROM cc_sales_refund_instock_detail srd ");
		sqlBuilder.append(" JOIN cc_sales_refund_instock sr ON srd.refund_instock_id = sr.id ");
		sqlBuilder.append(" WHERE sr.biz_date IS NOT NULL)t ON sod.id = t.outstock_detail_id ");

		sqlBuilder.append(" WHERE sc.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "c.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "c.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "c.country_name", countryName, params, false);
		appendIfNotEmpty(sqlBuilder, "so.dealer_data_area", dataArea, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and so.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and so.biz_date <= ?");
			params.add(endDate);
		}

		sqlBuilder.append(" GROUP BY p.id");
		sqlBuilder.append(" order by totalAmount desc");

		return Db.find(sqlBuilder.toString(), params.toArray());

	}

	public List<Record> findByCusTypeId(String[] dataArea, String provName, String cityName, String countryName,
	                                    String startDate, String endDate) {
		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder("SELECT cc.id,cu.customer_name,cu.country_name,cu.city_name,cu.prov_name,o.customer_type_id,ct.`name`,IFNULL(SUM(o.total_amount),0) as totalAmount, ");
		sqlBuilder.append("IFNULL(SUM(t1.refundAmount),0) as refundAmount, TRUNCATE((IFNULL(SUM(o.total_amount),0) - IFNULL(SUM(t1.refundAmount),0))/10000,2) as realAmount ");
		sqlBuilder.append("FROM cc_sales_outstock o JOIN cc_seller_customer cc ON o.customer_id = cc.id ");
		sqlBuilder.append("JOIN cc_customer cu on cc.customer_id = cu.id ");
		sqlBuilder.append("JOIN cc_customer_type ct on ct.id = o.customer_type_id ");
		sqlBuilder.append("LEFT JOIN (SELECT cr.outstock_id,SUM(cr.total_reject_amount) as refundAmount FROM cc_sales_refund_instock cr ");
		sqlBuilder.append("WHERE cr.`biz_date` is not null GROUP BY cr.outstock_id) t1 ON t1.outstock_id = o.id ");

		sqlBuilder.append(" WHERE cc.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "o.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.country_name", countryName, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and o.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and o.biz_date <= ?");
			params.add(endDate);
		}

		sqlBuilder.append(" group by o.customer_type_id");
		sqlBuilder.append(" order by realAmount desc");

		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	public List<Record> findProductListByCusType(String[] dataArea, String provName, String cityName, String countryName,
	                                             String startDate, String endDate, String customerTypeName) {
		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder("SELECT ct.`name` , concat(cp.name,' ',temp.valueName) as custom_name, TRUNCATE((IFNULL(SUM(cc.product_amount),0) - IFNULL(SUM(t1.refundAmount),0))/10000,2) as totalAmount ");
		if (StrKit.notBlank(countryName)) {
			sqlBuilder.append(", cu.country_name");
		} else if (StrKit.notBlank(cityName)) {
			sqlBuilder.append(", cu.city_name");
		} else {
			sqlBuilder.append(", cu.prov_name");
		}
		sqlBuilder.append(", TRUNCATE(IFNULL(SUM(cc.product_count/cp.convert_relate),0) - IFNULL(SUM(t1.refundCount),0),2) as productCount FROM cc_sales_outstock_detail cc ");
		sqlBuilder.append(" JOIN cc_sales_outstock o ON o.id = cc.outstock_id ");
		sqlBuilder.append(" JOIN cc_seller_customer csu ON csu.id = o.customer_id ");
		sqlBuilder.append(" JOIN cc_customer cu ON cu.id = csu.customer_id ");
		sqlBuilder.append(" JOIN cc_customer_type ct ON ct.id = o.customer_type_id ");
		sqlBuilder.append(" JOIN cc_seller_product cs ON cs.id = cc.sell_product_id ");
		sqlBuilder.append(" JOIN cc_product cp on cp.id = cs.product_id ");

		sqlBuilder.append(" LEFT JOIN (SELECT sv.id, cv.product_set_id, GROUP_CONCAT(sv.`name`) AS valueName FROM cc_goods_specification_value sv RIGHT JOIN cc_product_goods_specification_value cv ON cv.goods_specification_value_set_id = sv.id GROUP BY cv.product_set_id ) temp ON temp.product_set_id = cp.id ");

		sqlBuilder.append("LEFT JOIN (SELECT cd.outstock_detail_id, SUM(cd.product_amount) as refundAmount, SUM(cd.product_count/pr.convert_relate) as refundCount ");
		sqlBuilder.append("FROM cc_sales_refund_instock_detail cd ");
		sqlBuilder.append(" JOIN cc_sales_refund_instock cr on cr.id = cd.refund_instock_id ");
		sqlBuilder.append(" JOIN cc_seller_product sp on cd.sell_product_id = sp.id ");
		sqlBuilder.append(" JOIN cc_product pr on pr.id = sp.product_id ");
		sqlBuilder.append("WHERE cr.`biz_date` is not null ");
		sqlBuilder.append("GROUP BY cd.outstock_detail_id) t1 on t1.outstock_detail_id = cc.id ");

		sqlBuilder.append(" WHERE csu.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "ct.name", customerTypeName, params, false);
		appendIfNotEmpty(sqlBuilder, "o.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.country_name", countryName, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and o.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and o.biz_date <= ?");
			params.add(endDate);
		}

		sqlBuilder.append("GROUP BY cp.id ");
		sqlBuilder.append(" order by totalAmount desc");

		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	public List<Record> findAreaListByCusTypeId(String[] dataArea, String provName, String cityName, String countryName,
	                                            String startDate, String endDate, String customerTypeName) {
		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder("SELECT cc.id,cu.customer_name,o.customer_type_id,ct.`name`,IFNULL(SUM(o.total_amount),0) as totalAmount, ");

		if (StrKit.notBlank(cityName)) {
			sqlBuilder.append(" cu.country_name,");
		} else if (StrKit.notBlank(provName)) {
			sqlBuilder.append(" cu.city_name,");
		} else {
			sqlBuilder.append(" cu.prov_name,");
		}
		sqlBuilder.append("IFNULL(SUM(t1.refundAmount),0) as refundAmount, TRUNCATE((IFNULL(SUM(o.total_amount),0) - IFNULL(SUM(t1.refundAmount),0))/10000,2) as realAmount ");
		sqlBuilder.append("FROM cc_sales_outstock o LEFT JOIN cc_seller_customer cc ON o.customer_id = cc.id ");
		sqlBuilder.append("LEFT JOIN cc_customer cu on cc.customer_id = cu.id ");
		sqlBuilder.append("LEFT JOIN cc_customer_type ct on ct.id = o.customer_type_id ");
		sqlBuilder.append("LEFT JOIN (SELECT cr.outstock_id,SUM(cr.total_reject_amount) as refundAmount FROM cc_sales_refund_instock cr ");
		sqlBuilder.append("WHERE cr.`biz_date` is not null GROUP BY cr.outstock_id) t1 ON t1.outstock_id = o.id ");

		sqlBuilder.append(" WHERE cc.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "ct.name", customerTypeName, params, false);
		appendIfNotEmpty(sqlBuilder, "o.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.country_name", countryName, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and o.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and o.biz_date <= ?");
			params.add(endDate);
		}

		sqlBuilder.append(" group by cu.prov_name");
		if (StrKit.notBlank(provName)) {
			sqlBuilder.append(", cu.city_name");
		}

		if (StrKit.notBlank(cityName)) {
			sqlBuilder.append(", cu.country_name");
		}
		sqlBuilder.append(" order by realAmount desc");

		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	public List<Map<String, Object>> findAreaArray(String[] dataArea, String provName, String cityName,
	                                               String countryName, String startDate, String endDate) {

		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder("select ");

		if (StrKit.notBlank(cityName)) {
			sqlBuilder.append(" cu.country_name");
		} else if (StrKit.notBlank(provName)) {
			sqlBuilder.append(" cu.city_name");
		} else {
			sqlBuilder.append(" cu.prov_name");
		}

		sqlBuilder.append(" ,TRUNCATE((IFNULL(SUM(o.total_amount),0) - IFNULL(SUM(t1.refundAmount),0))/10000,2) as totalAmount ");
		sqlBuilder.append(" FROM cc_sales_outstock o ");
		sqlBuilder.append(" JOIN cc_seller_customer csu ON csu.id = o.customer_id ");
		sqlBuilder.append(" JOIN cc_customer cu ON cu.id = csu.customer_id ");
		sqlBuilder.append(" JOIN cc_customer_type ct ON ct.id = o.customer_type_id ");
		sqlBuilder.append(" LEFT JOIN (SELECT cr.outstock_id, SUM(cr.total_reject_amount) as refundAmount ");
		sqlBuilder.append(" FROM cc_sales_refund_instock cr");
		sqlBuilder.append(" where cr.biz_date is not null");
		sqlBuilder.append(" GROUP BY cr.outstock_id) t1 on o.id = t1.outstock_id ");

		sqlBuilder.append(" WHERE csu.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "o.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.country_name", countryName, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and o.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and o.biz_date <= ?");
			params.add(endDate);
		}

		sqlBuilder.append(" group by cu.prov_name");
		if (StrKit.notBlank(provName)) {
			sqlBuilder.append(", cu.city_name");
		}

		if (StrKit.notBlank(cityName)) {
			sqlBuilder.append(", cu.country_name");
		}
		sqlBuilder.append(" order by totalAmount desc");
		return Db.query(sqlBuilder.toString(), params.toArray());

	}

	public List<Record> findProductList(String customerId, String startDate, String endDate) {
		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder("SELECT cs.custom_name as cInvName, co.biz_date as idate, o.product_amount - IFNULL(t1.refundPrice,0) as totalAmount, ");
		sqlBuilder.append("(o.product_count - IFNULL(t1.refundCount,0))/cp.convert_relate as totalNum ");
		sqlBuilder.append("FROM cc_sales_outstock_detail o LEFT JOIN cc_seller_product cs ON o.sell_product_id = cs.id ");
		sqlBuilder.append("LEFT JOIN cc_product cp on cp.id = cs.product_id ");
		sqlBuilder.append("LEFT JOIN cc_sales_outstock co on co.id = o.outstock_id ");
		sqlBuilder.append("LEFT JOIN cc_seller_customer cu ON cu.id =  co.customer_id ");
		sqlBuilder.append("LEFT JOIN (SELECT cr.outstock_detail_id, SUM(cr.reject_product_count) as refundCount, SUM(cr.reject_product_price) as refundPrice FROM cc_sales_refund_instock_detail cr ");
		sqlBuilder.append("LEFT JOIN cc_sales_refund_instock cc ON cc.id = cr.refund_instock_id ");
		sqlBuilder.append("WHERE cc.biz_date is not null GROUP BY cr.outstock_detail_id) t1 ON o.id = t1.outstock_detail_id ");
		sqlBuilder.append("WHERE co.biz_date is not null ");

		appendIfNotEmpty(sqlBuilder, "cu.customer_kind", Consts.CUSTOMER_KIND_COMMON, params, false);
		appendIfNotEmpty(sqlBuilder, "co.customer_id", customerId, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and co.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and co.biz_date <= ?");
			params.add(endDate);
		}

		sqlBuilder.append(" order by co.biz_date desc, o.outstock_id ");

		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	public List<Record> findVistList(String customerId, String startDate, String endDate) {
		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder(" SELECT d.name AS typeName, u.realname, cv.create_date  ");
		sqlBuilder.append("FROM cc_customer_visit cv ");
		sqlBuilder.append("LEFT JOIN cc_user u ON cv.user_id = u.id ");
		sqlBuilder.append("LEFT JOIN dict d ON cv.question_type = d.value ");
		sqlBuilder.append("WHERE cv.lng is not null and cv.lat is not null");

		appendIfNotEmpty(sqlBuilder, "cv.seller_customer_id", customerId, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and cv.create_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and cv.create_date <= ?");
			params.add(endDate);
		}

		sqlBuilder.append(" ORDER BY cv.create_date DESC ");

		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	public List<Record> findAreaSales(String[] dataArea, String provName, String cityName,
	                                  String countryName, String startDate, String endDate) {

		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder("select csu.lng, csu.lat ");

		sqlBuilder.append(" ,TRUNCATE((IFNULL(SUM(o.total_amount),0) - IFNULL(SUM(t1.refundAmount),0))/2,2) as count ");
		sqlBuilder.append(" FROM cc_sales_outstock o ");
		sqlBuilder.append(" JOIN cc_seller_customer csu ON csu.id = o.customer_id ");
		sqlBuilder.append(" JOIN cc_customer cu ON cu.id = csu.customer_id ");
		sqlBuilder.append(" LEFT JOIN (SELECT cr.outstock_id, SUM(cr.total_reject_amount) as refundAmount ");
		sqlBuilder.append(" FROM cc_sales_refund_instock cr");
		sqlBuilder.append(" where cr.biz_date is not null");
		sqlBuilder.append(" GROUP BY cr.outstock_id) t1 on o.id = t1.outstock_id ");

		sqlBuilder.append(" WHERE csu.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmpty(sqlBuilder, "o.dealer_data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "cu.country_name", countryName, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and o.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and o.biz_date <= ?");
			params.add(endDate);
		}
		sqlBuilder.append(" group by o.customer_id");

		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	public List<Record> findAreaCustomer(String[] dataArea, String provName, String cityName,
	                                     String countryName, String startDate, String endDate) {

		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder(" select sc.lng, sc.lat ");

		sqlBuilder.append(", 105 as count");

		sqlBuilder.append(" from cc_seller_customer sc ");
		sqlBuilder.append(" JOIN cc_customer c ON sc.customer_id = c.id ");
		sqlBuilder.append(" where sc.lng is not  null and sc.lat is not null ");
		sqlBuilder.append(" and sc.customer_kind = ? ");
		params.add(Consts.CUSTOMER_KIND_COMMON);

		appendIfNotEmptyWithLike(sqlBuilder, "sc.data_area", dataArea, params, false);
		appendIfNotEmpty(sqlBuilder, "c.prov_name", provName, params, false);
		appendIfNotEmpty(sqlBuilder, "c.city_name", cityName, params, false);
		appendIfNotEmpty(sqlBuilder, "c.country_name", countryName, params, false);

		if (startDate != null) {
			sqlBuilder.append(" and sc.create_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and sc.create_date <= ?");
			params.add(endDate);
		}

		return Db.find(sqlBuilder.toString(), params.toArray());
	}


	//经销商
	public List<Record> findDealerList(String startDate, String endDate) {

		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder(" select d.data_area, s.seller_name, s.prov_name, s.city_name, s.country_name ");

		sqlBuilder.append(" from cc_sales_outstock so ");
		sqlBuilder.append(" join cc_department d on so.dealer_data_area = d.data_area ");
		sqlBuilder.append(" join cc_seller s on d.id = s.dept_id ");
		sqlBuilder.append(" join cc_seller_brand sb on s.id = sb.seller_id ");
		sqlBuilder.append(" join cc_brand b on sb.brand_id = b.id ");

		sqlBuilder.append(" where d.data_area > '001001' ");
		sqlBuilder.append(" and b.code = 'B001' ");

		if (startDate != null) {
			sqlBuilder.append(" and so.biz_date >= ?");
			params.add(startDate);
		}

		if (endDate != null) {
			sqlBuilder.append(" and so.biz_date <= ?");
			params.add(endDate);
		}

		sqlBuilder.append(" GROUP BY s.id");

		return Db.find(sqlBuilder.toString(), params.toArray());

	}

	public List<Record> findSellerByDataArea(String dataArea) {
		return Db.find(" select s.prov_name, s.city_name, s.country_name from cc_seller s join cc_department d on s.dept_id = d.id where d.data_area = ? ", dataArea);
	}

}
