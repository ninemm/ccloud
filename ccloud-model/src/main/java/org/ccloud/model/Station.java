/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model;

import org.ccloud.model.ModelSorter.ISortModel;
import com.jfinal.plugin.ehcache.CacheKit;
import com.jfinal.plugin.ehcache.IDataLoader;
import org.ccloud.model.core.Table;
import org.ccloud.model.base.BaseStation;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
@Table(tableName="station",primaryKey="id")
public class Station extends BaseStation<Station> implements ISortModel<Station> {
    private static final long serialVersionUID = 1L;

    private int layer = 0;
    private Station parent;
    private List<Station> childList;

    @Override
    public boolean save() {
        removeCache(getId());

        clearList();

        return super.save();
    }

    @Override
    public boolean update() {
        removeCache(getId());

        clearList();

        return super.update();
    }

    @Override
    public boolean delete() {
        removeCache(getId());

        clearList();

        return super.delete();
    }

    @Override
    public boolean deleteById(Object idValue) {
        removeCache(getId());

        clearList();
        return super.deleteById(idValue);

    }

    @Override
    public boolean saveOrUpdate() {

        clearList();

        if (null == get(getPrimaryKey())) {
            return this.save();
        }
        return this.update();
    }

    public <T> T getFromListCache(Object key, IDataLoader dataloader) {
        Set<String> inCacheKeys = CacheKit.get(CACHE_NAME, "cachestationkeys");

        Set<String> cacheKeyList = new HashSet<String>();
        if (inCacheKeys != null) {
            cacheKeyList.addAll(inCacheKeys);
        }

        cacheKeyList.add(key.toString());
        CacheKit.put(CACHE_NAME, "cachestationkeys", cacheKeyList);

        return CacheKit.get("station_list", key, dataloader);
    }

    public void clearList() {
        Set<String> list = CacheKit.get(CACHE_NAME, "cachestationkeys");
        if (list != null && list.size() > 0) {
            for (String key : list) {

                // 过滤

                CacheKit.remove("station_list", key);
            }
        }
    }

    public void setLayer(int layer) {
        this.layer = layer;
    }

    public String getLayerString() {
        String layerString = "";
        for (int i = 0; i < layer; i++) {
            layerString += "— ";
        }
        return layerString;
    }

    public void setParent(Station parent) {
        this.parent = parent;
    }

    public Station getParent() {
        return parent;
    }


    public void addChild(Station child) {

        if(null == childList)
            childList = new ArrayList<>();

        //如果是从ehcache内存取到的数据，可能该model已经添加过了
        if(!childList.contains(child)){
            childList.add(child);
        }
    }

    public List<Station> getChildList() {
        return this.childList;
    }

    public void setChildList(List<Station> childList) {
        this.childList = childList;
    }
	
}
