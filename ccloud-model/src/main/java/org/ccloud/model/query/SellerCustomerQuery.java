/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.LinkedList;

import com.jfinal.kit.StrKit;
import org.ccloud.model.SellerCustomer;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.IDataLoader;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class SellerCustomerQuery extends JBaseQuery {

	protected static final SellerCustomer DAO = new SellerCustomer();
	private static final SellerCustomerQuery QUERY = new SellerCustomerQuery();

	public static SellerCustomerQuery me() {
		return QUERY;
	}

	public SellerCustomer findById(final String id) {
		return DAO.getCache(id, new IDataLoader() {
			@Override
			public Object load() {
				return DAO.findById(id);
			}
		});
	}

	public Record findMoreById(final String id) {

		StringBuilder fromBuilder = new StringBuilder(
				" select sc.*, c.customer_code, c.customer_name, c.contact, c.mobile ");
		fromBuilder.append(" , c.prov_name, c.city_name, c.country_name ");
		fromBuilder.append(" , c.prov_code, c.city_code, c.country_code, c.address ");
		fromBuilder.append(" from `cc_seller_customer` sc ");
		fromBuilder.append(" join `cc_customer` c on c.id = sc.customer_id ");
		fromBuilder.append(" WHERE sc.id = ? ");

		return Db.findFirst(fromBuilder.toString(), id);
	}

	public Page<Record> paginate(int pageNumber, int pageSize, String keyword, String dataArea) {

		boolean needWhere = true;
		LinkedList<Object> params = new LinkedList<Object>();

		String select = "select sc.*, c.customer_code, c.customer_name"
				+ ", c.contact, c.mobile, c.prov_name, c.city_name, c.country_name"
				+ ", c.prov_code, c.city_code, c.country_code, c.address" + ", t1.customerTypeNames, t2.realnames";

		StringBuilder fromBuilder = new StringBuilder(" from `cc_seller_customer` sc ");
		fromBuilder.append(" join `cc_customer` c on c.id = sc.customer_id ");

		fromBuilder.append(" LEFT JOIN (SELECT c1.id,GROUP_CONCAT(ct. NAME) AS customerTypeNames ");
		fromBuilder.append(" FROM cc_seller_customer c1 ");
		fromBuilder.append(" LEFT JOIN cc_customer_join_customer_type cjct ON c1.id = cjct.seller_customer_id ");
		fromBuilder.append(" LEFT JOIN cc_customer_type ct ON cjct.customer_type_id = ct.id ");
		fromBuilder.append(" GROUP BY c1.id) t1 ON sc.id = t1.id ");

		fromBuilder.append(" JOIN (SELECT c2.id, GROUP_CONCAT(u.realname) AS realnames ");
		fromBuilder.append(" FROM cc_seller_customer c2 ");
		fromBuilder.append(" JOIN cc_user_join_customer ujc ON c2.id = ujc.seller_customer_id ");
		fromBuilder.append(" JOIN USER u ON ujc.user_id = u.id ");

		appendIfNotEmptyWithLike(fromBuilder, "ujc.data_area", dataArea, params, true);
		fromBuilder.append(" GROUP BY c2.id) t2 ON sc.id = t2.id ");

		needWhere = appendIfNotEmptyWithLike(fromBuilder, "c.customer_name", keyword, params, needWhere);

		fromBuilder.append(" GROUP BY sc.id ");
		fromBuilder.append(" order by sc.create_date ");

		if (params.isEmpty())
			return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public boolean enable(String id, int isEnabled) {
		SellerCustomer sellerCustomer = DAO.findById(id);
		sellerCustomer.set("is_enabled", isEnabled);

		return sellerCustomer.saveOrUpdate();
	}

	public String findsellerCustomerBycusId(String customerId, String dataArea) {

		StringBuilder fromBuilder = new StringBuilder(" select sc.id ");
		fromBuilder.append(" from cc_seller_customer sc ");
		fromBuilder.append(" join cc_user_join_customer ujc on sc.id = ujc.seller_customer_id ");
		fromBuilder.append(" where sc.customer_id = ? ");
		fromBuilder.append(" AND ujc.data_area like ? ");

		return Db.queryStr(fromBuilder.toString(), customerId, dataArea);
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public void findUserListAsTree() {

	}

	public Page<Record> findByUserTypeForApp(int pageNumber, int pageSize, Object[] userId, String customerType, String isOrdered, String searchKey) {
		boolean needwhere = false;
		LinkedList<Object> params = new LinkedList<Object>();

		String select = "SELECT c.id,c.customer_name,c.contact,c.mobile,c.prov_name,c.city_name,c.country_name,c.address ";
		StringBuilder sql = new StringBuilder("FROM (SELECT c.id,c.customer_name,c.contact,c.mobile,c.prov_name,c.city_name,c.country_name,c.address FROM cc_user_join_customer cujc ");
		sql.append("LEFT JOIN cc_customer_join_customer_type ccjct ON cujc.seller_customer_id = ccjct.seller_customer_id ");
		sql.append("LEFT JOIN cc_seller_customer csc ON cujc.seller_customer_id = csc.id ");
		sql.append("LEFT JOIN cc_customer c ON csc.customer_id = c.id ");
		sql.append("LEFT JOIN cc_sales_order cso ON cujc.seller_customer_id = cso.customer_id ");

		if (StrKit.notBlank(searchKey)) {
			sql.append("WHERE ( c.customer_name LIKE ? OR c.contact LIKE ? ) ");
			if (searchKey.contains("%")) {
				params.add(searchKey);
				params.add(searchKey);
			} else {
				params.add("%" + searchKey + "%");
				params.add("%" + searchKey + "%");
			}
		} else {
			sql.append("WHERE c.customer_name is not null ");
			needwhere = false;
		}

		needwhere = appendIfNotEmpty(sql, "cujc.user_id", userId, params, needwhere);
		needwhere = appendIfNotEmpty(sql, "ccjct.customer_type_id", customerType, params, needwhere);

		sql.append("GROUP BY c.id ");

		if (StrKit.notBlank(isOrdered)) {

			if (isOrdered.equals("1")) sql.append("HAVING count(DISTINCT(cso.order_sn)) > 0 ");
			if (isOrdered.equals("0")) sql.append("HAVING count(DISTINCT(cso.order_sn)) = 0 ");
		}

		sql.append(") AS c");
		return Db.paginate(pageNumber, pageSize, select, sql.toString(), params.toArray());

	}

}
