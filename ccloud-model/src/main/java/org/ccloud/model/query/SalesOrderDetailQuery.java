/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.ccloud.model.SalesOrderDetail;
import org.ccloud.utils.StringUtils;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class SalesOrderDetailQuery extends JBaseQuery {

	protected static final SalesOrderDetail DAO = new SalesOrderDetail();
	private static final SalesOrderDetailQuery QUERY = new SalesOrderDetailQuery();

	public static SalesOrderDetailQuery me() {
		return QUERY;
	}

	public List<Record> findByOrderId(String orderId) {

		StringBuilder sqlBuilder = new StringBuilder(
				" SELECT sod.*, sp.custom_name, p.big_unit, p.small_unit, p.convert_relate, w.code as warehouseCode ");
		sqlBuilder.append(" from `cc_sales_order_detail` sod ");
		sqlBuilder.append(" LEFT JOIN cc_seller_product sp ON sod.sell_product_id = sp.id ");
		sqlBuilder.append(" LEFT JOIN cc_product p ON sp.product_id = p.id ");
		sqlBuilder.append(" LEFT JOIN cc_warehouse w ON sod.warehouse_id = w.id ");
		sqlBuilder.append(" WHERE order_id = ? ");
		sqlBuilder.append(" ORDER BY sod.warehouse_id ");

		return Db.find(sqlBuilder.toString(), orderId);
	}

	@SuppressWarnings("unchecked")
	public boolean insert(Map<String, String[]> paraMap, String orderId, String sellerId, String userId, Date date,
			String deptId, String dataArea, int index) {
		List<SalesOrderDetail> detailList = new ArrayList<>();
		String convert = StringUtils.getArrayFirst(paraMap.get("convert" + index));
		String bigNum = StringUtils.getArrayFirst(paraMap.get("bigNum" + index));
		String smallNum = StringUtils.getArrayFirst(paraMap.get("smallNum" + index));
		Integer productCount = Integer.valueOf(bigNum) * Integer.valueOf(convert) + Integer.valueOf(smallNum);
		String productId = StringUtils.getArrayFirst(paraMap.get("productId" + index));
		Map<String, Object> result = this.getWarehouseId(productId, sellerId, productCount, Integer.parseInt(convert));
		String status = result.get("status").toString();
		List<Map<String, String>> list = (List<Map<String, String>>) result.get("countList");
		
		if (!status.equals("enough")) {
			return false;
		}
		for (Map<String, String> map : list) {
			SalesOrderDetail detail = new SalesOrderDetail();
			detail.setProductCount(Integer.parseInt(map.get("productCount").toString()));
			detail.setLeftCount(detail.getProductCount());
			detail.setOutCount(0);
			// 库存盘点写入库存总账未完成
			detail.setWarehouseId(map.get("warehouse_id").toString());
			
			detail.setId(StrKit.getRandomUUID());
			detail.setOrderId(orderId);
			detail.setSellProductId(StringUtils.getArrayFirst(paraMap.get("sellProductId" + index)));

			String productPrice = StringUtils.getArrayFirst(paraMap.get("bigPrice" + index));
			String productAmount = StringUtils.getArrayFirst(paraMap.get("rowTotal" + index));
			String isGift = StringUtils.getArrayFirst(paraMap.get("isGift" + index));
			detail.setProductPrice(new BigDecimal(productPrice));
			detail.setProductAmount(StringUtils.isNumeric(productAmount)? new BigDecimal(productAmount) : new BigDecimal(0));
			detail.setIsGift(StringUtils.isNumeric(isGift)? Integer.parseInt(isGift) : 0);
			detail.setCreateDate(date);
			detail.setDeptId(deptId);
			detail.setDataArea(dataArea);	
			detailList.add(detail);
		}
		int[] i = Db.batchSave(detailList, detailList.size());
		int count = 0;
		for (int j : i) {
			count = count + j;
		}
		if (count != detailList.size()) {
			return false;
		}
		return true;
	}
	
	private Map<String, Object> getWarehouseId(String productId, String sellerId, Integer productCount, Integer convert) {
		Map<String, Object> result = new HashMap<>();
		List<Map<String, String>> countList = new ArrayList<>();
		boolean isCheckStore = true;

		StringBuilder defaultSqlBuilder = new StringBuilder(" select i.warehouse_id, i.balance_count ");
		defaultSqlBuilder.append(" from cc_inventory i ");
		defaultSqlBuilder.append(" LEFT JOIN cc_warehouse w ON i.warehouse_id = w.id ");
		defaultSqlBuilder.append(" WHERE w.is_default = 1 ");
		defaultSqlBuilder.append(" AND i.seller_id = ? AND i.product_id = ? ");

		Record defaultRecord = Db.findFirst(defaultSqlBuilder.toString(), sellerId, productId);
		Integer defaultCount = defaultRecord.getInt("balance_count") * convert;
		if (!isCheckStore || (defaultCount >= productCount)) {
			Map<String, String> map = new HashMap<>();
			map.put("warehouse_id", defaultRecord.getStr("warehouse_id"));
			map.put("productCount", productCount.toString());
			countList.add(map);
			result.put("status", "enough");
			result.put("countList", countList);
			return result;
		}
		StringBuilder sqlBuilder = new StringBuilder(" select i.warehouse_id, i.balance_count ");
		sqlBuilder.append(" from cc_inventory i ");
		sqlBuilder.append(" WHERE i.seller_id = ? AND i.product_id = ? AND w.is_default != 1");
		List<Record> records = Db.find(sqlBuilder.toString(), sellerId, productId);
		if (defaultCount > 0) {
			Map<String, String> map = new HashMap<>();
			map.put("warehouse_id", defaultRecord.getStr("warehouse_id"));
			map.put("productCount", productCount.toString());
			countList.add(map);
		}
		Integer count = this.findMoreWareHouse(records, countList, productCount - defaultCount, convert);
		if (count > 0) {
			result.put("status", "notEnough");
		} else {
			result.put("status", "enough");
		}
		result.put("countList", countList);
		return result;
	}
	
	private Integer findMoreWareHouse(List<Record> records, List<Map<String, String>> countList, Integer productCount, Integer convert) {
		Integer count = productCount;
		for (Record record : records) {
			Integer store = record.getInt("balance_count") * convert;
			if (store >= count) {
				Map<String, String> map = new HashMap<>();
				map.put("warehouse_id", record.getStr("warehouse_id"));
				map.put("productCount", productCount.toString());
				countList.add(map);
				count = 0;
				break;
			} else {
				count = count - store;
				if (store > 0) {
					Map<String, String> map = new HashMap<>();
					map.put("warehouse_id", record.getStr("warehouse_id"));
					map.put("produtCount", store.toString());
					countList.add(map);
				}
			}
		}
		return count;
	}

	public SalesOrderDetail findById(final String id) {
		return DAO.findById(id);
	}

	public Page<SalesOrderDetail> paginate(int pageNumber, int pageSize, String orderby) {
		String select = "select * ";
		StringBuilder fromBuilder = new StringBuilder("from `cc_sales_order_detail` ");

		LinkedList<Object> params = new LinkedList<Object>();

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public List<SalesOrderDetail> findBySalesOrderId(String id) {
		return DAO.doFind("order_id = ?", id);
	}

}
