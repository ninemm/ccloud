/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.LinkedList;
import java.util.List;

import org.ccloud.model.CustomerType;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class CustomerTypeQuery extends JBaseQuery {

	protected static final CustomerType DAO = new CustomerType();
	private static final CustomerTypeQuery QUERY = new CustomerTypeQuery();

	public static CustomerTypeQuery me() {
		return QUERY;
	}

	public Record findById(final String id) {
		StringBuilder fromBuilder = new StringBuilder(" select ");
		fromBuilder.append(" c.id, c.name, c.code, c.price_system_id, c.proc_def_key, p.name as price_system_name");
		fromBuilder.append(" from `cc_customer_type` c left join `cc_price_system` p on c.price_system_id = p.id ");
		fromBuilder.append(" where c.id = ? ");

		return Db.findFirst(fromBuilder.toString(), id);
	}

	public Record findMoreById(final String id) {
		StringBuilder fromBuilder = new StringBuilder(" select ");
		fromBuilder.append(
				" c.id, c.name, c.code, c.price_system_id, p.name as price_system_name, c.proc_def_key, c.dept_id, c.data_area, d.dept_name ");
		fromBuilder.append(" from `cc_customer_type` c left join `cc_price_system` p on c.price_system_id = p.id ");
		fromBuilder.append(" left join department d on c.dept_id = d.id ");
		fromBuilder.append(" where c.id = ? ");

		return Db.findFirst(fromBuilder.toString(), id);
	}

	public Page<Record> paginate(int pageNumber, int pageSize, String keyword, String show, 
			String dataArea) {
		String select = "select c.id, c.name, c.code, c.is_show, p.name as price_system_name, d.dept_name ";
		StringBuilder fromBuilder = new StringBuilder(
				"from `cc_customer_type` c left join `cc_price_system` p on c.price_system_id = p.id ");
		fromBuilder.append(" left join department d on c.dept_id = d.id ");

		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = true;

		needWhere = appendIfNotEmptyWithLike(fromBuilder, "c.name", keyword, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "c.is_show", show, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "c.data_area", dataArea, params, needWhere);

		fromBuilder.append(" order by c.create_date ");

		if (params.isEmpty())
			return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public boolean enable(String id, int show) {
		CustomerType ccCustomerType = DAO.findById(id);
		ccCustomerType.set("is_show", show);

		return ccCustomerType.saveOrUpdate();
	}

	public List<Record> findCustomerTypeList(String dataArea) {
		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder(" select c.id, c.name ");
		sqlBuilder.append(" from `cc_customer_type` c ");
		sqlBuilder.append(" where c.is_show = 1 ");
		sqlBuilder.append(" and c.data_area = ? ");
		params.add(dataArea);
//		appendIfNotEmptyWithLike(sqlBuilder, "c.data_area", dataArea, params, false);
		sqlBuilder.append(" order by c.create_date ");

		return Db.find(sqlBuilder.toString(), params.toArray());
	}
	
	public List<CustomerType> findByDataArea(String dataArea) {
		
		LinkedList<Object> params = new LinkedList<Object>();
		
		StringBuilder sql = new StringBuilder("select *");
		sql.append(" from `cc_customer_type`");
		sql.append(" where is_show = 1");
		
		appendIfNotEmpty(sql, "data_area", dataArea, params, false);
		
		sql.append(" order by create_date");
		
		return DAO.find(sql.toString(), params.toArray());
		
	}

	public String findIdByName(String name, String dataArea) {
		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = true;

		StringBuilder sqlBuilder = new StringBuilder(" select c.id ");
		sqlBuilder.append(" from `cc_customer_type` c ");
		needWhere = appendIfNotEmpty(sqlBuilder, "c.name", name, params, needWhere);
		needWhere = appendIfNotEmpty(sqlBuilder, "c.data_area", dataArea, params, needWhere);

		return Db.queryStr(sqlBuilder.toString(), params.toArray());
	}
	
	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public List<CustomerType> findByDept(String id) {
		return DAO.doFind("dept_id = ?", id);
	}

	public List<Record> getCustomerTypes(String DataArea){
		StringBuilder fromBuilder = new StringBuilder("SELECT id,name FROM cc_customer_type WHERE `is_show`=1 and data_area = '"+DataArea+"'");
		List<Record> list = Db.find(fromBuilder.toString());
		return list;
	}
	
	public CustomerType findDataAreaAndName(String dataArea,String code){
		String sql = "select * from cc_customer_type where data_area = '"+dataArea+"' and code = ?";
		return DAO.findFirst(sql, code);
	}

	public List<Record> findByMember(String customerId, List<String> sellerId) {
		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sql = new StringBuilder( "SELECT cct.id AS id , cct. name AS name ");
		sql.append("FROM cc_seller_customer csc ");
		sql.append("LEFT JOIN cc_customer_join_customer_type ccjct ON csc.id = ccjct.seller_customer_id ");
		sql.append("LEFT JOIN cc_customer_type cct ON ccjct.customer_type_id = cct.id ");
		sql.append("WHERE csc.seller_id IN( ? ");

		for(int i = 1; i < sellerId.size(); i++)
			sql.append(", ? ");
		sql.append(") " );

		params.addAll(sellerId);

		sql.append("AND csc.customer_id = ? ");

		params.add(customerId);

		return Db.find(sql.toString(), params.toArray());
	}

	public CustomerType findBySellerCustomer(String sellerId, String customerId) {

		StringBuilder sql = new StringBuilder( "SELECT cct.* ");
		sql.append("FROM cc_seller_customer csc ");
		sql.append("LEFT JOIN cc_customer_join_customer_type ccjct ON csc.id = ccjct.seller_customer_id ");
		sql.append("LEFT JOIN cc_customer_type cct ON ccjct.customer_type_id = cct.id ");
		sql.append("WHERE csc.seller_id = ? ");
		sql.append("AND csc.customer_id = ? ");

		return DAO.findFirst(sql.toString(), sellerId, customerId);
	}

	public CustomerType findByName(String name, String dataArea) {
		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = true;

		StringBuilder sqlBuilder = new StringBuilder(" select c.* ");
		sqlBuilder.append(" from `cc_customer_type` c ");
		needWhere = appendIfNotEmpty(sqlBuilder, "c.name", name, params, needWhere);
		needWhere = appendIfNotEmpty(sqlBuilder, "c.data_area", dataArea, params, needWhere);

		return DAO.findFirst(sqlBuilder.toString(), params.toArray());
	}
}
