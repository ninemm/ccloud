/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.ccloud.model.TransferBillDetail;
import org.ccloud.model.vo.ProductInfo;
import org.ccloud.model.vo.transferBillInfo;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.IDataLoader;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class TransferBillDetailQuery extends JBaseQuery { 

	protected static final TransferBillDetail DAO = new TransferBillDetail();
	private static final TransferBillDetailQuery QUERY = new TransferBillDetailQuery();

	public static TransferBillDetailQuery me() {
		return QUERY;
	}

	public TransferBillDetail findById(final String id) {
		return DAO.getCache(id, new IDataLoader() {
			@Override
			public Object load() {
				return DAO.findById(id);
			}
		});
	}

	public Page<TransferBillDetail> paginate(int pageNumber, int pageSize, String orderby) {
		String select = "select * ";
		StringBuilder fromBuilder = new StringBuilder("from `cc_transfer_bill_detail` ");

		LinkedList<Object> params = new LinkedList<Object>();

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}
	
	
	
public List<transferBillInfo> findByTransferBillDetailId(String id) {
		
	 	StringBuilder fromBuilder = new StringBuilder("select c1.transfer_bill_sn,c1.from_warehouse_id,c1.to_warehouse_id,c1.biz_user_id,c1.biz_date,c1.`status`,c1.create_date, ");
	 	fromBuilder.append("c2.product_id,c2.product_count");
	 	fromBuilder.append(" FROM cc_transfer_bill c1 ");
	 	fromBuilder.append(" inner JOIN cc_transfer_bill_detail c2 ON c1.id = c2.transfer_bill_id ");
	 	fromBuilder.append(" WHERE c2.transfer_bill_id = ?");
		List<Record> list = Db.find(fromBuilder.toString(), id);
		List<transferBillInfo> iList = new ArrayList<>();
		for (Record record : list) {
			transferBillInfo transferBillInfo = new transferBillInfo();
			transferBillInfo.setTransferBillSn(record.getStr("transfer_bill_sn"));
			transferBillInfo.setFromWarehouseId(record.getStr("from_warehouse_id"));
			transferBillInfo.setToWarehouseId(record.getStr("to_warehouse_id"));
			transferBillInfo.setBizUserId(record.getStr("biz_user_id"));
			transferBillInfo.setBizDate(record.getDate("biz_date"));
			transferBillInfo.setStatus(record.getInt("status"));
			transferBillInfo.setProductId(record.getStr("product_id"));
			transferBillInfo.setProductCount(record.getInt("product_count"));
			List<ProductInfo> ProductInfo = ProductQuery.me().getAllProductInfoById(transferBillInfo.getProductId());
			transferBillInfo.setProductInfos(ProductInfo);
			iList.add(transferBillInfo);
		}
		return iList;
		}
	
	
	public List<TransferBillDetail> deleteByTransferBillId(String id) {
		return DAO.doFind("transfer_bill_id = ?", id);
	}

	
}
