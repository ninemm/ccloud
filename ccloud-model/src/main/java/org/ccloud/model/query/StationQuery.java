/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.*;

import com.google.common.collect.Lists;
import com.jfinal.kit.StrKit;

import org.ccloud.model.ModelSorter;
import org.ccloud.model.Station;
import org.ccloud.model.User;

import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.ehcache.IDataLoader;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class StationQuery extends JBaseQuery {

	protected static final Station DAO = new Station();
	private static final StationQuery QUERY = new StationQuery();

	public static StationQuery me() {
		return QUERY;
	}

	public Station findById(final String id) {
		return DAO.getCache(id, new IDataLoader() {
			@Override
			public Object load() {

				StringBuilder sqlBuilder = new StringBuilder("select s.*, st.station_name as parent_name ");
				sqlBuilder.append("from `station` s ");
				sqlBuilder.append("join `station` st on st.id = s.parent_id ");
				sqlBuilder.append("where s.id = ?");
				return DAO.findFirst(sqlBuilder.toString(), id);
			}
		});
	}

	public List<Station> findByParentId(final String id) {
		StringBuilder sqlBuilder = new StringBuilder("select * ");
		sqlBuilder.append("from `station` ");
		sqlBuilder.append("where parent_id = ? ");
		return DAO.find(sqlBuilder.toString(), id);
	}

	public Long countChildsByParentId(final String id) {
		return DAO.doFindCount("parent_id = ? ", id);
	}

	public List<Station> findAll() {
		return DAO.doFind();
	}

	public Page<Station> paginate(int pageNumber, int pageSize, String keyword, String dataArea, String orderby) {
		String select = "select s.*, s.station_name as station_name, st.station_name as parent_name ";

		StringBuilder fromBuilder = new StringBuilder("from `station` s ");
		fromBuilder.append("join `station` st on st.id = s.parent_id ");

		LinkedList<Object> params = new LinkedList<Object>();

		appendIfNotEmptyWithLike(fromBuilder, "s.station_name", keyword, params, true);
		appendIfNotEmptyWithLike(fromBuilder, "s.data_area", dataArea, params, true);

		fromBuilder.append("order by " + orderby);

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());

	}

	public List<Map<String, Object>> findStationListAsTree(Integer enable, String dataArea) {
		List<Station> list = findStationList(null, dataArea, "order_list asc");
		ModelSorter.tree(list);
		List<Map<String, Object>> resTreeList = new ArrayList<>();
		Map<String, Object> map = new HashMap<>();
		map.put("text", "岗位根节点");
		map.put("tags", Lists.newArrayList(0));
		map.put("nodes", doBuild(list));
		resTreeList.add(map);
		return resTreeList;
	}

	public int batchDelete(List<String> ids) {
		if (ids != null && ids.size() > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.size(); i++) {
				if (DAO.deleteById(ids.get(i))) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public List<Station> findStationList(String parentId, String dataArea, String orderby) {
		final StringBuilder sqlBuilder = new StringBuilder("SELECT * FROM station s ");
		sqlBuilder.append("where s.id <> '0' ");

		final List<Object> params = new LinkedList<Object>();

		appendIfNotEmpty(sqlBuilder, "parent_id", parentId, params, false);
		appendIfNotEmptyWithLike(sqlBuilder, "s.data_area", dataArea, params, false);

		buildOrderBy(orderby, sqlBuilder);

		String key = buildKey(null, null, null, null, orderby);

		List<Station> data = DAO.getFromListCache(key, new IDataLoader() {

			@Override
			public Object load() {
				if (params.isEmpty()) {
					return DAO.find(sqlBuilder.toString());
				}
				return DAO.find(sqlBuilder.toString(), params.toArray());
			}
		});

		if (data == null)
			return null;
		return new ArrayList<Station>(data);
	}

	private String buildKey(String module, Object... params) {
		StringBuffer keyBuffer = new StringBuffer(module == null ? "" : "module:" + module);
		if (params != null && params.length > 0) {
			for (int i = 0; i < params.length; i++) {
				keyBuffer.append("-p").append(i).append(":").append(params[i]);
			}
		}
		return keyBuffer.toString().replace(" ", "");
	}

	private List<Map<String, Object>> doBuild(List<Station> list) {
		List<Map<String, Object>> resTreeList = new ArrayList<>();
		for (Station station : list) {
			Map<String, Object> map = new HashMap<>();
			map.put("text", station.getStationName());
			map.put("tags", Lists.newArrayList(station.getId()));
			resTreeList.add(map);

			if (station.getChildList() != null && station.getChildList().size() > 0) {
				map.put("nodes", doBuild(station.getChildList()));
			}
		}
		return resTreeList;
	}

	protected void buildOrderBy(String orderBy, StringBuilder fromBuilder) {

		fromBuilder.append(" order by ");
		if (StrKit.isBlank(orderBy)) {
			fromBuilder.append("s.order_list asc ");
			return;
		}

		String orderbyInfo[] = orderBy.trim().split("\\s+");
		orderBy = orderbyInfo[0];

		fromBuilder.append("s.order_list ");

		if (orderbyInfo.length == 1) {
			fromBuilder.append("desc");
		} else {
			fromBuilder.append(orderbyInfo[1]);
		}
	}

	public List<Station> queryStationOperation(String stationId, String operationId) {
		StringBuilder sqlBuilder = new StringBuilder("select * ");

		sqlBuilder.append("from `station` s ");
		sqlBuilder.append("join `station_operation_rel` gr on gr.station_id = s.id ");
		sqlBuilder.append("join `operation` g on g.id = gr.operation_id ");
		sqlBuilder.append("where s.id = ? and g.id = ? ");

		return DAO.find(sqlBuilder.toString(), stationId, operationId);
	}

	public List<Station> findStation() {
		return DAO.doFind("id != 0");
	}

	public List<Station> findByOperationId(String id) {
		StringBuilder sqlBuilder = new StringBuilder("select * ");

		sqlBuilder.append("from `station` s ");
		sqlBuilder.append("join `station_operation_rel` gr on gr.station_id = s.id ");
		sqlBuilder.append("join `operation` g on g.id = gr.operation_id ");
		sqlBuilder.append("where g.id = ? ");

		return DAO.find(sqlBuilder.toString(), id);
	}

	public List<Station> findByDept(String dataArea) {
		StringBuilder sqlBuilder = new StringBuilder("select * ");

		sqlBuilder.append("from `station` s ");
		final List<Object> params = new LinkedList<Object>();
		appendIfNotEmptyWithLike(sqlBuilder, "s.data_area", dataArea, params, true);
		if (params.isEmpty()) {
			return DAO.find(sqlBuilder.toString());
		}
		return DAO.find(sqlBuilder.toString(), params.toArray());
	}

	public void updateParent(Station station) {
		if (station != null && !station.getParentId().equals("0")) {
			Station parent = StationQuery.me().findById(station.getParentId());
			Integer childNum = StationQuery.me().childNumById(station.getParentId());
			if (parent != null && childNum > 0) {
				if (parent.getIsParent() == 0) {
					parent.setIsParent(1);
					parent.update();
				}
			} else {
				if (parent.getIsParent() > 0) {
					parent.setIsParent(0);
					parent.update();
				}
			}
		}
	}

	private Integer childNumById(String parentId) {
		Integer num = DAO.doFindCount("parent_id = ?", parentId).intValue();
		return num;
	}

	public List<Map<String, Object>> findUserListByStation(String id) {
		List<Station> list = findByDeptId(id);
		ModelSorter.tree(list);
		List<Map<String, Object>> resTreeList = new ArrayList<>();
		Map<String, Object> map = new HashMap<>();
		
		String title = "所有岗位";
		if (list.size() == 0) {
			title = "暂无数据";
		}
		map.put("text", title);
		map.put("tags", Lists.newArrayList(0));
		map.put("nodes", doBuildByUser(list));
		resTreeList.add(map);
		return resTreeList;
	}

	public List<Station> findByDeptId(String id) {
		return DAO.doFind("dept_id = ? and id <> 0", id);
	}
	
	private List<Map<String, Object>> doBuildByUser(List<Station> list) {
		List<Map<String, Object>> resTreeList = new ArrayList<>();
		for (Station station : list) {
			Map<String, Object> map = new HashMap<>();
			map.put("text", station.getStationName());
			map.put("tags", Lists.newArrayList(station.getId()));

			List<Map<String, Object>> childList = new ArrayList<Map<String, Object>>();
			
			if (station.getChildList() != null && station.getChildList().size() > 0) {
				map.put("nodes", doBuild(station.getChildList()));
			}
			
			childList = addUser(station.getId(), childList);
			map.put("nodes", childList);

			resTreeList.add(map);
			
		}
		return resTreeList;
	}	
	
	private List<Map<String, Object>> addUser(String stationId, List<Map<String, Object>> childList) {
		List<User> list = UserQuery.me().findByStation(stationId);
		for (User user : list) {
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("text", user.getRealname());
			map.put("tags", Lists.newArrayList(user.getId(), "user"));
			childList.add(map);

		}
		return childList;
	}	
}
