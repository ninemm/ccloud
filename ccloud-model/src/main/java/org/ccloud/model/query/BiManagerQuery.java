/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 * <p>
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * <p>
 * http://www.gnu.org/licenses/lgpl-3.0.txt
 * <p>
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.ccloud.Consts;

import java.util.LinkedList;
import java.util.List;
import java.util.Map;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class BiManagerQuery extends JBaseQuery {

	private static final BiManagerQuery QUERY = new BiManagerQuery();

	public static BiManagerQuery me() {
		return QUERY;
	}

	public List<Record> findAllSeller() {

		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder sqlBuilder = new StringBuilder(" select s.seller_name, d.data_area as dealer_data_area ");
		sqlBuilder.append(" from cc_seller s join cc_department d on s.dept_id = d.id ");
		sqlBuilder.append(" where LENGTH(d.data_area) = ? ");
		params.add(6);

		return Db.find(sqlBuilder.toString(), params.toArray());

	}

	public List<Record> findSellerByUser(String id) {

		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder sqlBuilder = new StringBuilder(" select b.dealer_data_area, s.seller_name ");
		sqlBuilder.append(" from bi_user_join_seller b ");
		sqlBuilder.append(" left join cc_department d on b.dealer_data_area = d.data_area ");
		sqlBuilder.append(" left join cc_seller s on d.id = s.dept_id ");
		appendIfNotEmpty(sqlBuilder, "b.user_id", id, params, true);

		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	public int delUSellerByUserId(String id) {
		return Db.update("delete from bi_user_join_seller where user_id = ?", id);
	}

	public List<Record> findAllBrand() {

		StringBuilder sqlBuilder = new StringBuilder(" select id as brand_id, name ");
		sqlBuilder.append(" from cc_brand ");

		return Db.find(sqlBuilder.toString());

	}

	public List<Record> findBrandByUser(String id) {

		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder sqlBuilder = new StringBuilder(" select ujb.brand_id, b.name ");
		sqlBuilder.append(" from bi_user_join_brand ujb ");
		sqlBuilder.append(" left join cc_brand b on ujb.brand_id = b.id ");
		appendIfNotEmpty(sqlBuilder, "user_id", id, params, true);

		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	public int delUBrandBByUserId(String id) {
		return Db.update("delete from bi_user_join_brand where user_id = ?", id);
	}

	public List<Record> findAllProduct() {

		StringBuilder sqlBuilder = new StringBuilder(" select p.id as product_id, concat(p.name,' ',t1.valueName) as name  ");
		sqlBuilder.append(" from cc_product p ");
		sqlBuilder.append(" LEFT JOIN (SELECT sv.id, cv.product_set_id, GROUP_CONCAT(sv.`name`) AS valueName FROM cc_goods_specification_value sv RIGHT JOIN cc_product_goods_specification_value cv ON cv.goods_specification_value_set_id = sv.id GROUP BY cv.product_set_id ) t1 ON t1.product_set_id = p.id ");

		return Db.find(sqlBuilder.toString());

	}



	public List<Record> findProductByUser(String id) {

		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder sqlBuilder = new StringBuilder(" select up.product_id, concat(p.name,' ',t1.valueName) as name ");
		sqlBuilder.append(" from bi_user_join_product up ");
		sqlBuilder.append(" join cc_product p on up.product_id = p.id ");
		sqlBuilder.append(" LEFT JOIN (SELECT sv.id, cv.product_set_id, GROUP_CONCAT(sv.`name`) AS valueName FROM cc_goods_specification_value sv RIGHT JOIN cc_product_goods_specification_value cv ON cv.goods_specification_value_set_id = sv.id GROUP BY cv.product_set_id ) t1 ON t1.product_set_id = p.id ");
		appendIfNotEmpty(sqlBuilder, "user_id", id, params, true);

		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	public int delUProductByUserId(String id) {
		return Db.update("delete from bi_user_join_product where user_id = ?", id);
	}

}
