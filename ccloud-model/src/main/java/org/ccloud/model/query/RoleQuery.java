/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.ccloud.model.Role;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class RoleQuery extends JBaseQuery {

	protected static final Role DAO = new Role();
	private static final RoleQuery QUERY = new RoleQuery();

	public static RoleQuery me() {
		return QUERY;
	}

	public Role findById(final String id) {
		return DAO.findById(id);
	}
	public List<Role> findAll() {
		return DAO.doFind();
	}

	public Page<Role> paginate(int pageNumber, int pageSize, String keyword, String dataArea, String orderby) {
		String select = "select r.*,d.dept_name ";
		StringBuilder fromBuilder = new StringBuilder("from `role` r INNER JOIN `department` d ON d.id = r.dept_id ");

		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "r.role_name", keyword, params, needWhere);
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "r.data_area", dataArea, params, needWhere);
		fromBuilder.append("order by " + orderby);
		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public List<Role> queryRoleGroupRelation(String roleId, String groupId) {
		StringBuilder sqlBuilder = new StringBuilder("select * ");

		sqlBuilder.append("from `role` r ");
		sqlBuilder.append("join `group_role_rel` gr on gr.role_id = r.id ");
		sqlBuilder.append("join `group` g on g.id = gr.group_id ");
		sqlBuilder.append("where r.id = ? and g.id = ? ");

		return DAO.find(sqlBuilder.toString(), roleId, groupId);
	}

	public Map<String, List<String>> getPermissions(String userId) {
		Map<String, List<String>> map = new HashMap<>();
		List<String> roleIds = new ArrayList<>();
		List<String> roleCodes = new ArrayList<>();
		List<Role> list = RoleQuery.me().findByUserId(userId);
		for (Role role : list) {
			roleCodes.add(role.getRoleCode());
			roleIds.add(role.getId());
		}
		map.put("roleIds", roleIds);
		map.put("roleCodes", roleCodes);
		return map;
	}

	public List<Role> findByUserId(String userId) {
		StringBuilder sqlBuilder = new StringBuilder("select r.* ");

		sqlBuilder.append("from `role` r ");
		sqlBuilder.append("left join `group_role_rel` gr on gr.role_id = r.id ");
		sqlBuilder.append("where gr.group_id in (SELECT ug.group_id FROM user_group_rel ug where ug.user_id = ?)");

		return DAO.find(sqlBuilder.toString(), userId);
	}

	public List<Role> queryRoleOperation(String roleId, String operationId) {
		StringBuilder sqlBuilder = new StringBuilder("select * ");

		sqlBuilder.append("from `role` r ");
		sqlBuilder.append("join `role_operation_rel` gr on gr.role_id = r.id ");
		sqlBuilder.append("join `operation` g on g.id = gr.operation_id ");
		sqlBuilder.append("where r.id = ? and g.id = ? ");

		return DAO.find(sqlBuilder.toString(), roleId, operationId);
	}

	public List<Role> findBydept(String dataArea) {
		StringBuilder sqlBuilder = new StringBuilder("select * ");
		sqlBuilder.append("from `role` r ");
		final List<Object> params = new LinkedList<Object>();
		appendIfNotEmptyWithLike(sqlBuilder, "r.data_area", dataArea, params, true);
		if (params.isEmpty()) {
			return DAO.find(sqlBuilder.toString());
		}
		return DAO.find(sqlBuilder.toString(), params.toArray());
	}

	public List<Record> findBydeptAndGroup(String dataArea, String id) {
		String data = dataArea + "%";
 		StringBuilder fromBuilder = new StringBuilder("select * ");
		fromBuilder.append("from role r ");
		fromBuilder.append("left join (SELECT gr.role_id FROM group_role_rel gr WHERE gr.group_id = ?) b ");
		fromBuilder.append("on r.id = b.role_id ");
		fromBuilder.append("where r.data_area like ?");
		List<Record> list = Db.find(fromBuilder.toString(), id, data);
		return list;
	}

	public List<Record> findBydeptAndOperation(String dataArea, String id) {
 		StringBuilder fromBuilder = new StringBuilder("select * ");
		fromBuilder.append("from role r ");
		fromBuilder.append("left join (SELECT gr.role_id FROM role_operation_rel gr WHERE gr.operation_id = ?) b ");
		fromBuilder.append("on r.id = b.role_id ");
		fromBuilder.append("where r.data_area like ?");
		List<Record> list = Db.find(fromBuilder.toString(), id, dataArea);
		return list;
	}

	public List<Role> findByDeptId() {
		String sql = "SELECT * from `role` where dept_id = '0' and role_code >'002' and role_code<'020'";
		return DAO.find(sql);
	}

	public List<Record> findByRoleCheck(String id, String dataArea) {
		StringBuilder stringBuilder = new StringBuilder("SELECT r.id,r.role_name,a.id as check_status FROM role r LEFT JOIN ");
		stringBuilder.append("(SELECT * FROM group_role_rel gr WHERE gr.group_id = ?) a ");
		stringBuilder.append("ON r.id = a.role_id ");
		LinkedList<Object> params = new LinkedList<Object>();
		params.add(id);
		appendIfNotEmptyWithLike(stringBuilder, "r.data_area", dataArea, params, false);
		return Db.find(stringBuilder.toString(), params.toArray());
	}

	public List<Role> findByDeptId(String deptId) {
		return DAO.doFind("dept_id = ?", deptId);
	}
}

