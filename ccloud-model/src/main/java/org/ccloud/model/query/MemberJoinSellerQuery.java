/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.LinkedList;
import java.util.List;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Record;
import org.ccloud.Consts;
import org.ccloud.model.MemberJoinSeller;

import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.ehcache.IDataLoader;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class MemberJoinSellerQuery extends JBaseQuery { 

	protected static final MemberJoinSeller DAO = new MemberJoinSeller();
	private static final MemberJoinSellerQuery QUERY = new MemberJoinSellerQuery();

	public static MemberJoinSellerQuery me() {
		return QUERY;
	}

	public MemberJoinSeller findById(final String id) {
		return DAO.getCache(id, new IDataLoader() {
			@Override
			public Object load() {
				return DAO.findById(id);
			}
		});
	}

	public Page<MemberJoinSeller> paginate(int pageNumber, int pageSize, String orderby) {
		String select = "select * ";
		StringBuilder fromBuilder = new StringBuilder("from `cc_member_join_seller` ");

		LinkedList<Object> params = new LinkedList<Object>();

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public List<Record> findProductListForApp(String memberId, String keyword, String tag) {
		StringBuilder fromBuilder = new StringBuilder(
				" SELECT sp.seller_id, sp.id AS sell_product_id, sp.product_id, sp.custom_name, sp.store_count, "
						+ "sp.price, sp.cost, sp.account_price, sp.tags, p.convert_relate, p.product_sn, p.big_unit, "
						+ "p.small_unit, p.description, t1.valueName, g.`name` AS goodsName, g.product_image_list_store, "
						+ "gc.`id` AS categoryId, gc.`name` AS categoryName, gt.`id` as typeId, gt.`name` as typeName, "
						+ "cs.seller_name, u.realname ");
		fromBuilder.append(" FROM cc_seller_product sp JOIN cc_product p ON sp.product_id = p.id ");
		fromBuilder.append(" LEFT JOIN (SELECT sv.id, cv.product_set_id, GROUP_CONCAT(sv.`name`) AS valueName FROM cc_goods_specification_value sv RIGHT JOIN cc_product_goods_specification_value cv ON cv.goods_specification_value_set_id = sv.id GROUP BY cv.product_set_id ) t1 ON t1.product_set_id = p.id ");
		fromBuilder.append(" JOIN cc_goods g ON p.goods_id = g.id JOIN cc_goods_category gc ON g.goods_category_id = gc.id JOIN cc_goods_type gt on g.goods_type_id = gt.id ");
		fromBuilder.append(" LEFT JOIN cc_seller cs ON cs.id = sp.seller_id ");
		fromBuilder.append(" LEFT JOIN cc_member_join_seller cmjs ON cmjs.seller_id = sp.seller_id ");
		fromBuilder.append(" LEFT JOIN `user` u ON u.id = cmjs.user_id");
		fromBuilder.append(" WHERE sp.is_enable = 1 AND sp.is_gift = 0 AND cmjs.member_id = ? ");

		LinkedList<Object> params = new LinkedList<Object>();
		params.add(memberId);

		fromBuilder.append(" AND sp.seller_id IN (SELECT cmjs.seller_id FROM cc_member_join_seller cmjs WHERE cmjs.member_id = ? AND cmjs.status = ? ) ");
		params.add(memberId);
		params.add(1);

		appendIfNotEmptyWithLike(fromBuilder, "sp.custom_name", keyword, params, false);

		if (StrKit.notBlank(tag)) {
			fromBuilder.append(" AND FIND_IN_SET(?, sp.tags)");
			params.add(tag);
		}

		fromBuilder.append(" ORDER BY gc.`parent_id`, gc.`order_list`, gc.`id`, sp.order_list ");

		return Db.find(fromBuilder.toString(), params.toArray());
	}

	public MemberJoinSeller findUser(String memberId, String sellerId) {
		String sql = "SELECT * FROM cc_member_join_seller WHERE member_id = ? AND seller_id = ? ";
		return DAO.findFirst(sql, memberId, sellerId);
	}

	public List<Record> findUsers(String memberId, String sellerId) {
		String sql = "SELECT u.id, u.realname FROM cc_member_join_seller cmjs " +
				"LEFT JOIN user u ON cmjs.user_id = u.id " +
				"WHERE cmjs.member_id = ? AND cmjs.seller_id = ? ";
		return Db.find(sql, memberId, sellerId);
	}

	public MemberJoinSeller checkExists(String memberId, String sellerId, String userId) {
		String sql = "SELECT * FROM cc_member_join_seller WHERE member_id = ? AND seller_id = ? AND user_id = ? ";
		return DAO.findFirst(sql, memberId, sellerId, userId);
	}

	public List<Record> findDetailByProductId(String id, String memberId, String keyword, String tag) {
		StringBuilder fromBuilder = new StringBuilder("SELECT aa.title as activity_name, cs.seller_id, cp.id,cp.name,cp.price,cp.seller_product_id,cp.sub_seller_product_id,cs.product_id as product_id,cg.product_id as sub_product_id, ");
		fromBuilder.append("t1.valueName as product_sp, t2.valueName as sub_product_sp, cg.price as sub_price, cp.activity_id as actId, cp.state as state, ");
		fromBuilder.append("cs.custom_name as product_name,cg.custom_name as sub_product_name,cp.sub_product_count,cp.parent_id,p.product_sn,g.product_image_list_store, ");
		fromBuilder.append("cp.is_gift,cp.main_product_count, p.big_unit as main_bunit, p.small_unit as main_sunit, p.convert_relate as main_convert, p1.big_unit as sub_bunit, p1.small_unit as sub_sunit, p1.convert_relate as sub_convert ");
		fromBuilder.append("from `cc_product_composition` cp ");
		fromBuilder.append("LEFT JOIN cc_activity aa on aa.id = cp.activity_id ");
		fromBuilder.append("JOIN cc_seller_product cs ON cs.id = cp.seller_product_id ");
		fromBuilder.append("JOIN cc_product p ON cs.product_id = p.id ");
		fromBuilder.append("JOIN cc_goods g ON p.goods_id = g.id ");
		fromBuilder.append("LEFT JOIN cc_seller_product cg ON cg.id = cp.sub_seller_product_id ");
		fromBuilder.append("JOIN cc_product p1 ON cg.product_id = p1.id ");
		fromBuilder.append("LEFT JOIN (SELECT sv.id, cv.product_set_id, GROUP_CONCAT(sv. NAME) AS valueName FROM cc_goods_specification_value sv ");
		fromBuilder.append("RIGHT JOIN cc_product_goods_specification_value cv ON cv.goods_specification_value_set_id = sv.id GROUP BY cv.product_set_id) t1 on t1.product_set_id = cs.product_id ");
		fromBuilder.append("LEFT JOIN (SELECT sv.id, cv.product_set_id, GROUP_CONCAT(sv. NAME) AS valueName FROM cc_goods_specification_value sv ");
		fromBuilder.append("RIGHT JOIN cc_product_goods_specification_value cv ON cv.goods_specification_value_set_id = sv.id GROUP BY cv.product_set_id) t2 on t2.product_set_id = cg.product_id ");
		fromBuilder.append("LEFT JOIN cc_member_join_seller cmjs ON cmjs.seller_id = cs.seller_id ");

		LinkedList<Object> params = new LinkedList<Object>();
		fromBuilder.append(" WHERE  cmjs.member_id = ? AND cmjs.status = ?  ");
		params.add(memberId);
		params.add(1);
		boolean needWhere = false;
		needWhere = appendIfNotEmpty(fromBuilder, "cp.parent_id", id, params, needWhere);
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "cp.name", keyword, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "cp.state", Consts.STATUS_STATE_PUT, params, needWhere);

		if (StrKit.notBlank(tag)) {
			appendWhereOrAnd(fromBuilder, needWhere);
			fromBuilder.append(" FIND_IN_SET(?, cs.tags)");
			params.add(tag);
		}

		fromBuilder.append("order by cp.parent_id");
		return Db.find(fromBuilder.toString(), params.toArray());
	}

}
