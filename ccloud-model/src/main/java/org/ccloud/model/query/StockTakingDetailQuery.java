/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.ccloud.model.InventoryDetail;
import org.ccloud.model.StockTakingDetail;
import org.ccloud.model.vo.ProductInfo;
import org.ccloud.model.vo.StockTakingInfo;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.IDataLoader;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class StockTakingDetailQuery extends JBaseQuery { 

	protected static final StockTakingDetail DAO = new StockTakingDetail();
	private static final StockTakingDetailQuery QUERY = new StockTakingDetailQuery();

	public static StockTakingDetailQuery me() {
		return QUERY;
	}

	public StockTakingDetail findById(final String id) {
		return DAO.getCache(id, new IDataLoader() {
			@Override
			public Object load() {
				return DAO.findById(id);
			}
		});
	}

	public Page<StockTakingDetail> paginate(int pageNumber, int pageSize, String orderby) {
		String select = "select * ";
		StringBuilder fromBuilder = new StringBuilder("from `cc_stock_taking_detail` ");

		LinkedList<Object> params = new LinkedList<Object>();

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	
	public List<StockTakingInfo> findByStockTakingDetailId(String id) {
		
	 	StringBuilder fromBuilder = new StringBuilder("select c1.stock_taking_sn,c1.warehouse_id,c1.biz_user_id,c1.biz_date,c1.`status`,c1.create_date, ");
	 	fromBuilder.append("c2.product_id,c2.product_amount,c2.product_count,c2.remark");
	 	fromBuilder.append(" FROM cc_stock_taking c1 ");
	 	fromBuilder.append(" inner JOIN cc_stock_taking_detail c2 ON c1.id = c2.stock_taking_id ");
	 	fromBuilder.append(" WHERE c2.stock_taking_id = ?");
		List<Record> list = Db.find(fromBuilder.toString(), id);
		List<StockTakingInfo> iList = new ArrayList<>();
		for (Record record : list) {
			StockTakingInfo stockTakingInfo = new StockTakingInfo();
			stockTakingInfo.setStockTakingSn(record.getStr("stock_taking_sn"));
			stockTakingInfo.setWarehouseId(record.getStr("warehouse_id"));
			stockTakingInfo.setBizUserId(record.getStr("biz_user_id"));
			stockTakingInfo.setBizDate(record.getDate("biz_date"));
			stockTakingInfo.setStatus(record.getInt("status"));
			stockTakingInfo.setProductId(record.getStr("product_id"));
			stockTakingInfo.setProductAmount(record.getBigDecimal("product_amount"));
			stockTakingInfo.setProductCount(record.getBigDecimal("product_count"));
			stockTakingInfo.setRemark(record.getStr("remark"));
			List<ProductInfo> ProductInfo = ProductQuery.me().getAllProductInfoById(stockTakingInfo.getProductId());
			stockTakingInfo.setProductInfos(ProductInfo);
			iList.add(stockTakingInfo);
		}
		return iList;
		}
	
	public List<StockTakingDetail> deleteByStockTakingId(String id) {
		return DAO.doFind("stock_taking_id = ?", id);
	}


	public List<Map<String, Object>> findByStockTakingDetailId1(String id) {
		StringBuilder fromBuilder = new StringBuilder("select * from cc_stock_taking_detail cs join cc_product cp on cs.product_id=cp.id where stock_taking_id =?");
		List<Record> list = Db.find(fromBuilder.toString(), id);
		List<Map<String, Object>> iList = new ArrayList<>();
		for (Record record : list) {
			Map<String, Object>map=new HashMap<>();
			map.put("product_id", record.getStr("product_id"));
			map.put("remark", record.getStr("remark"));
			map.put("market_price", record.getStr("market_price"));
			map.put("convert_relate", record.getStr("convert_relate"));
			map.put("product_count", record.getStr("product_count"));
			map.put("product_amount", record.getStr("product_amount"));
			iList.add(map);
		}
		return iList;
	}

	public List<Record> selectSellProductId(String productId, String sellerId) {
		StringBuilder fromBuilder1 = new StringBuilder("select id from cc_seller_product where product_id=? and seller_id=?");
		List<Record> find = Db.find(fromBuilder1.toString(),productId,sellerId);
		return find ;
	}

	public List<Record> findByInventory(String productId, String warehouseId, String sellerId) {
		StringBuilder fromBuilder1 = new StringBuilder("select * from cc_inventory where product_id=? and warehouse_id=? and seller_id=?");
		List<Record> find = Db.find(fromBuilder1.toString(),productId,warehouseId,sellerId);
		return find;
	}

	public List<Record> findByInventoryDetail(String sell_product_id, String warehouseId) {
		StringBuilder fromBuilder1 = new StringBuilder("select * from cc_inventory_detail where sell_product_id=? and warehouse_id=?");
		List<Record> find = Db.find(fromBuilder1.toString(),sell_product_id,warehouseId);
		return find;
		
	}
	
}
