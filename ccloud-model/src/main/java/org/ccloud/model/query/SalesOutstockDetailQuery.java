/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import org.ccloud.model.SalesOutstockDetail;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.IDataLoader;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class SalesOutstockDetailQuery extends JBaseQuery {

	protected static final SalesOutstockDetail DAO = new SalesOutstockDetail();
	private static final SalesOutstockDetailQuery QUERY = new SalesOutstockDetailQuery();

	public static SalesOutstockDetailQuery me() {
		return QUERY;
	}
	
	public List<Record> findByOutstockId(String outstockId) {

		StringBuilder sqlBuilder = new StringBuilder(
				" SELECT sod.*, sp.custom_name, p.big_unit, p.small_unit, p.convert_relate, sp.seller_id, sp.product_id");
		sqlBuilder.append(" from `cc_sales_outstock_detail` sod ");
		sqlBuilder.append(" LEFT JOIN cc_seller_product sp ON sod.sell_product_id = sp.id ");
		sqlBuilder.append(" LEFT JOIN cc_product p ON sp.product_id = p.id ");
		sqlBuilder.append(" WHERE sod.outstock_id = ? ");

		return Db.find(sqlBuilder.toString(), outstockId);
	}

	public boolean insert(String outstockId, Record orderDetail, Date date) {
		SalesOutstockDetail detail = new SalesOutstockDetail();
		detail.setId(StrKit.getRandomUUID());
		detail.setOutstockId(outstockId);
		detail.setSellProductId(orderDetail.getStr("sell_product_id"));
		detail.setProductCount(orderDetail.getInt("product_count"));
		detail.setProductPrice(orderDetail.getBigDecimal("product_price"));
		detail.setProductAmount(orderDetail.getBigDecimal("product_amount"));
		detail.setIsGift(orderDetail.getInt("is_gift"));
		detail.setOrderDetailId(orderDetail.getStr("id"));
		detail.setCreateDate(date);
		detail.setDeptId(orderDetail.getStr("dept_id"));
		detail.setDataArea(orderDetail.getStr("data_area"));
		
		return detail.save();
	}

	public SalesOutstockDetail findById(final String id) {
		return DAO.getCache(id, new IDataLoader() {
			@Override
			public Object load() {
				return DAO.findById(id);
			}
		});
	}

	public Page<SalesOutstockDetail> paginate(int pageNumber, int pageSize, String orderby) {
		String select = "select * ";
		StringBuilder fromBuilder = new StringBuilder("from `cc_sales_outstock_detail` ");

		LinkedList<Object> params = new LinkedList<Object>();

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

}
