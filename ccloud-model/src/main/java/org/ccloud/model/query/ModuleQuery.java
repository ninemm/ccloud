/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.ccloud.model.ModelSorter;
//import org.ccloud.model.ModelSorter;
import org.ccloud.model.Module;

import com.google.common.collect.Lists;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.ehcache.IDataLoader;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class ModuleQuery extends JBaseQuery {

	protected static final Module DAO = new Module();
	private static final ModuleQuery QUERY = new ModuleQuery();

	public static ModuleQuery me() {
		return QUERY;
	}

	public List<Module> findAll() {
		return DAO.doFind();
	}

	public Module findById(final String id) {
		return DAO.getCache(id, new IDataLoader() {
			@Override
			public Object load() {

				StringBuilder sqlBuilder = new StringBuilder("select m.*, p.module_name as parent_name ");
				sqlBuilder.append("from `module` m ");
				sqlBuilder.append("join `module` p on p.id = m.parent_id ");
				sqlBuilder.append("where m.id = ?");
				return DAO.findFirst(sqlBuilder.toString(), id);
			}
		});
	}

	public Page<Module> paginate(int pageNumber, int pageSize, String parentId, String keyword, String orderby) {

		String select = "select m.*, s.name as sys_name, me.module_name as parent_name ";

		StringBuilder fromBuilder = new StringBuilder("from `module` m ");
		fromBuilder.append("join `systems` s on s.id = m.system_id ");
		fromBuilder.append("join `module` me on me.id = m.parent_id ");

		boolean needWhere = true;
		LinkedList<Object> params = new LinkedList<Object>();
		needWhere = appendIfNotEmpty(fromBuilder, "m.parent_id", parentId, params, needWhere);
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "m.module_name", keyword, params, needWhere);

		buildOrderBy(orderby, fromBuilder);

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public List<Map<String, Object>> findModuleListAsTree(Integer enable, String systemId) {

		List<Module> list = findModuleList(null, "order_list asc", systemId);
		ModelSorter.tree(list);
		List<Map<String, Object>> resTreeList = new ArrayList<>();
		Map<String, Object> map = new HashMap<>();
		map.put("text", "功能根节点");
		map.put("tags", Lists.newArrayList(0));
		map.put("nodes", doBuild(list));
		resTreeList.add(map);
		return resTreeList;

	}
	
	@SuppressWarnings("unused")
	private List<Module> tree (List<Module> list) {
		List<Module> treeList = new ArrayList<>();
		List<Module> childList = new ArrayList<>();
		for (Module module : list) {
			if (module.getParentId().equals("0")) {
				treeList.add(module);
			} else {
				childList.add(module);
			}
		}
		for (Module module : treeList) {
			for (Module module2 : childList) {
				if (module2.getParentId().equals(module.getId())) {
					module.addChild(module2);
				}
			}
		}
		return treeList;
	}	
	
	public List<Module> findModuleList(String parentId, String orderby, String systemId) {
		final StringBuilder sqlBuilder = new StringBuilder("SELECT m.id,m.module_name,m.parent_id,m.is_parent FROM module m ");
		sqlBuilder.append("where m.id <> '0' ");

		final List<Object> params = new LinkedList<Object>();
		appendIfNotEmpty(sqlBuilder, "m.parent_id", parentId, params, false);
		appendIfNotEmpty(sqlBuilder, "m.system_id", systemId, params, false);
		buildOrderBy(orderby, sqlBuilder);

		String key = buildKey(systemId, null, null, null, orderby);

		List<Module> data = DAO.getFromListCache(key, new IDataLoader() {
			@Override
			public Object load() {
				if (params.isEmpty()) {
					return DAO.find(sqlBuilder.toString());
				}
				return DAO.find(sqlBuilder.toString(), params.toArray());
			}
		});

		if (data == null)
			return null;
		return new ArrayList<Module>(data);
	}

	private List<Map<String, Object>> doBuild(List<Module> list) {
		List<Map<String, Object>> resTreeList = new ArrayList<>();
		for (Module module : list) {
			Map<String, Object> map = new HashMap<>();
			map.put("text", module.getModuleName());
			map.put("tags", Lists.newArrayList(module.getId()));
			// if(menu.getLong("selected") == 1) {
			// Map<String, Object> stateMap = new HashMap<>();
			// stateMap.put("checked", true);
			// stateMap.put("selected", true);
			// stateMap.put("disabled", false);
			// stateMap.put("expanded", true);
			// map.put("state", stateMap);
			// }
			// if(!resTreeList.contains(map))
			resTreeList.add(map);

			if (module.getChildList() != null && module.getChildList().size() > 0) {
				map.put("nodes", doBuild(module.getChildList()));
			}
		}
		return resTreeList;
	}

	protected void buildOrderBy(String orderBy, StringBuilder fromBuilder) {

		fromBuilder.append(" order by ");
		
		if (StrKit.isBlank(orderBy)) {
			fromBuilder.append("m.parent_id,m.order_list asc ");
			return;
		}
		
		String orderbyInfo[] = orderBy.trim().split("\\s+");
		orderBy = orderbyInfo[0];
		
		fromBuilder.append("m.parent_id,m.order_list ");
		
		if (orderbyInfo.length == 1) {
			fromBuilder.append("desc");
		} else {
			fromBuilder.append(orderbyInfo[1]);
		}
	}

	private String buildKey(String module, Object... params) {
		StringBuffer keyBuffer = new StringBuffer(module == null ? "" : "module:" + module);
		if (params != null && params.length > 0) {
			for (int i = 0; i < params.length; i++) {
				keyBuffer.append("-p").append(i).append(":").append(params[i]);
			}
		}
		return keyBuffer.toString().replace(" ", "");
	}

	public List<Module> findByParentId(final String id) {
		StringBuilder sqlBuilder = new StringBuilder("select * ");
		sqlBuilder.append("from `module` ");
		sqlBuilder.append("where parent_id = ? ");
		return DAO.find(sqlBuilder.toString(), id);
	}

	public int batchDelete(List<String> ids) {
		if (ids != null && ids.size() > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.size(); i++) {
				if (DAO.deleteById(ids.get(i))) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public List<Module> findBySystem(String id) {
		return DAO.doFind("system_id = ?", id);
	}

	public List<Module> findBySystemIds(String[] ids) {
		StringBuilder sqlBuilder = new StringBuilder("select * ");
		LinkedList<Object> params = new LinkedList<Object>();
		sqlBuilder.append("from `module` m ");
		if (ids.length > 0) {
			sqlBuilder.append("where m.system_id in (?");
			params.add(ids[0]);
			for (int i = 1; i < ids.length; i++) {
				sqlBuilder.append(",?");
				params.add(ids[i]);
			}

			sqlBuilder.append(") ");
		}
		return DAO.find(sqlBuilder.toString(), params.toArray());
	}

	public void updateParent(Module module) {
		if (module != null && !module.getParentId().equals("0")) {
			Module parent = ModuleQuery.me().findById(module.getParentId());
			Integer childNum = ModuleQuery.me().childNumById(module.getParentId());
			if (parent != null && childNum > 0) {
				if (parent.getIsParent() == 0) {
					parent.setIsParent(1);
					parent.update();
				}
			} else {
				if (parent.getIsParent() > 0) {
					parent.setIsParent(0);
					parent.update();
				}
			}
		}
	}

	private Integer childNumById(String parentId) {
		Integer num = DAO.doFindCount("parent_id = ?", parentId).intValue();
		return num;
	}
}
