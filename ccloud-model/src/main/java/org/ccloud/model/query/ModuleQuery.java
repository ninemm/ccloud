/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.ccloud.model.ModelSorter;
import org.ccloud.model.Module;

import com.google.common.collect.Lists;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.ehcache.IDataLoader;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class ModuleQuery extends JBaseQuery { 

	protected static final Module DAO = new Module();
	private static final ModuleQuery QUERY = new ModuleQuery();

	public static ModuleQuery me() {
		return QUERY;
	}

	
	public List<Module> findAll() {
		return DAO.doFind();
	}
	
	public Module findById(final String id) {
		return DAO.getCache(id, new IDataLoader() {
			@Override
			public Object load() {
				return DAO.findById(id);
			}
		});
	}

	public Page<Module> paginate(int pageNumber, int pageSize, String parentId, String keyword, String orderby) {
		
		String select = "select m.*, s.name as sys_name, me.module_name as parent_name ";
		
		StringBuilder fromBuilder = new StringBuilder("from `module` m ");
		fromBuilder.append("join `systems` s on s.id = m.system_id ");
		fromBuilder.append("join `module` me on me.id = m.parent_id ");

		boolean needWhere = true;
		LinkedList<Object> params = new LinkedList<Object>();
		needWhere = appendIfNotEmpty(fromBuilder, "m.parent_id", parentId, params, needWhere);
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "m.module_name", keyword, params, needWhere);
		
		buildOrderBy(orderby, fromBuilder);

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	
	
public List<Map<String, Object>> findModuleListAsTree(Integer enable) {
		
		List<Module> list = findModuleList(null, "order_list asc");
		ModelSorter.tree(list);
		List<Map<String, Object>> resTreeList = new ArrayList<>();
		Map<String, Object> map = new HashMap<>();
		map.put("text", "功能根节点");
		map.put("tags", Lists.newArrayList(0));
		map.put("nodes", doBuild(list)); 
		resTreeList.add(map);
		return resTreeList;
		
	}
	


public List<Module> findModuleList(String parentId, String orderby) {
	final StringBuilder sqlBuilder = new StringBuilder("SELECT * FROM module m ");
	sqlBuilder.append("where m.id <> '0' ");
	
	final List<Object> params = new LinkedList<Object>();
	appendIfNotEmpty(sqlBuilder, "parent_id", parentId, params, false);
	buildOrderBy(orderby, sqlBuilder);
	
	String key = buildKey(null, null, null, null, orderby);
	
	List<Module> data = DAO.getFromListCache(key, new IDataLoader() {
		@Override
		public Object load() {
			if (params.isEmpty()) {
				return DAO.find(sqlBuilder.toString());
			}
			return DAO.find(sqlBuilder.toString(), params.toArray());
		}
	});
	
	if (data == null)
		return null;
	return new ArrayList<Module>(data);
}

	
private List<Map<String, Object>> doBuild(List<Module> list) {
	List<Map<String, Object>> resTreeList = new ArrayList<>();
	for(Module module : list) {
		Map<String, Object> map = new HashMap<>();
		map.put("text", module.getModuleName());
		map.put("tags", Lists.newArrayList(module.getId()));
//		if(menu.getLong("selected") == 1) {
//			Map<String, Object> stateMap = new HashMap<>();
//			stateMap.put("checked", true);
//			stateMap.put("selected", true);
//			stateMap.put("disabled", false);
//			stateMap.put("expanded", true);
//			map.put("state", stateMap);
//		}
//		if(!resTreeList.contains(map))
			resTreeList.add(map);
		
		if(module.getChildList() != null && module.getChildList().size() > 0) {
			map.put("nodes", doBuild(module.getChildList()));
		}
	}
	return resTreeList;
}



protected void buildOrderBy(String orderBy, StringBuilder fromBuilder) {
	
	fromBuilder.append(" order by ");
	
	if (StrKit.isBlank(orderBy)) {
		fromBuilder.append("m.order_list asc ");
		return ;
	}
	
	String orderbyInfo[] = orderBy.trim().split("\\s+");
	orderBy = orderbyInfo[0];
	
	fromBuilder.append("m.order_list ");
	
	if (orderbyInfo.length == 1) {
		fromBuilder.append("desc");
	} else {
		fromBuilder.append(orderbyInfo[1]);
	}
}


private String buildKey(String module, Object... params) {
	StringBuffer keyBuffer = new StringBuffer(module == null ? "" : "module:" + module);
	if (params != null && params.length > 0) {
		for (int i = 0; i < params.length; i++) {
			keyBuffer.append("-p").append(i).append(":").append(params[i]);
		}
	}
	return keyBuffer.toString().replace(" ", "");
}

}
