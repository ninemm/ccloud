/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.ccloud.model.Department;
import org.ccloud.model.GoodsCategory;
import org.ccloud.model.ModelSorter;

import com.google.common.collect.Lists;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.ehcache.IDataLoader;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class GoodsCategoryQuery extends JBaseQuery { 

	protected static final GoodsCategory DAO = new GoodsCategory();
	private static final GoodsCategoryQuery QUERY = new GoodsCategoryQuery();

	public static GoodsCategoryQuery me() {
		return QUERY;
	}

	public GoodsCategory findById(final String id) {
		return DAO.getCache(id, new IDataLoader() {
			@Override
			public Object load() {
				StringBuilder sqlBuilder = new StringBuilder("select cc.*, ccg.name as parent_name, cs.name as supplier_name, cb.name as brand_name ");
				sqlBuilder.append("from `cc_goods_category` cc ");
				sqlBuilder.append("join `cc_goods_category` ccg on ccg.id = cc.parent_id ");
				sqlBuilder.append("join `cc_supplier` cs on cs.id = cc.supplier_id ");
				sqlBuilder.append("join `cc_brand` cb on cb.id = cc.brand_id ");
				sqlBuilder.append("where cc.id = ?");				
				return DAO.findFirst(sqlBuilder.toString(), id);
			}
		});
	}

	public Page<GoodsCategory> paginate(int pageNumber, int pageSize, String parentId, String keyword, String orderby) {
		String select = "select cc.*, ccg.name as parent_name, cs.name as supplier_name, cb.name as brand_name ";
		StringBuilder fromBuilder = new StringBuilder("from `cc_goods_category` cc ");
		fromBuilder.append("join `cc_goods_category` ccg on ccg.id = cc.parent_id ");
		fromBuilder.append("join `cc_supplier` cs on cs.id = cc.supplier_id ");
		fromBuilder.append("join `cc_brand` cb on cb.id = cc.brand_id ");
		
		boolean needWhere = true;
		LinkedList<Object> params = new LinkedList<Object>();
		
		needWhere = appendIfNotEmpty(fromBuilder, "cc.parent_id", parentId, params, needWhere);
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "cc.name", keyword, params, needWhere);
		
		buildOrderBy(orderby, fromBuilder);	

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public List<Map<String, Object>> findCategoryListAsTree(int i) {
		List<GoodsCategory> list = findCategoryList(null,"order_list asc");
		ModelSorter.tree(list);
		List<Map<String, Object>> resTreeList = new ArrayList<>();
		Map<String, Object> map = new HashMap<>();
		map.put("text", "根层级");
		map.put("tags", Lists.newArrayList(0));
		map.put("nodes", doBuild(list));
		resTreeList.add(map);
		return resTreeList;
	}
	
	public List<GoodsCategory> findCategoryList(String parentId, String orderby) {
		final StringBuilder sqlBuilder = new StringBuilder("SELECT * FROM cc_goods_category cc ");
		sqlBuilder.append("where cc.id <> '0' ");

		final List<Object> params = new LinkedList<Object>();

		appendIfNotEmpty(sqlBuilder, "parent_id", parentId, params, false);

		buildOrderBy(orderby, sqlBuilder);

		String key = buildKey(null, null, null, null, orderby);

		List<GoodsCategory> data = DAO.getFromListCache(key, new IDataLoader() {

			@Override
			public Object load() {
				if (params.isEmpty()) {
					return DAO.find(sqlBuilder.toString());
				}
				return DAO.find(sqlBuilder.toString(), params.toArray());
			}
		});

		if (data == null)
			return null;
		return new ArrayList<GoodsCategory>(data);
	}	

	private String buildKey(String module, Object... params) {
		StringBuffer keyBuffer = new StringBuffer(module == null ? "" : "module:" + module);
		if (params != null && params.length > 0) {
			for (int i = 0; i < params.length; i++) {
				keyBuffer.append("-p").append(i).append(":").append(params[i]);
			}
		}
		return keyBuffer.toString().replace(" ", "");
	}
	
	private List<Map<String, Object>> doBuild(List<GoodsCategory> list) {
		List<Map<String, Object>> resTreeList = new ArrayList<>();
		for(GoodsCategory category : list) {
			Map<String, Object> map = new HashMap<>();
			map.put("text", category.getName());
			map.put("tags", Lists.newArrayList(category.getId()));
			resTreeList.add(map);

			if(category.getChildList() != null && category.getChildList().size() > 0) {
				map.put("nodes", doBuild(category.getChildList()));
			}
		}
		return resTreeList;
	}

	protected void buildOrderBy(String orderBy, StringBuilder fromBuilder) {

		fromBuilder.append(" order by ");
		if (StrKit.isBlank(orderBy)) {
			fromBuilder.append("cc.order_list asc ");
			return ;
		}

		String orderbyInfo[] = orderBy.trim().split("\\s+");
		orderBy = orderbyInfo[0];

		fromBuilder.append("cc.order_list ");

		if (orderbyInfo.length == 1) {
			fromBuilder.append("desc");
		} else {
			fromBuilder.append(orderbyInfo[1]);
		}
	}

	public Integer childNumById(String parentId) {
		Integer num = DAO.doFindCount("parent_id = ?", parentId).intValue();
		return num;
	}

	public List<GoodsCategory> findByParentId(String id) {
		return DAO.doFind("parent_id = ?", id);
	}

	public int batchDelete(List<String> ids) {
		if (ids != null && ids.size() > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.size(); i++) {
				if (DAO.deleteById(ids.get(i))) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public List<GoodsCategory> findCategoryByBrandId(String id) {
		return DAO.doFind("brand_id = ?", id);
	}

	public void updateParent(GoodsCategory category) {
		if (category != null && category.getParentId() != "0") {
			GoodsCategory parent = GoodsCategoryQuery.me().findById(category.getParentId());
			Integer childNum = GoodsCategoryQuery.me().childNumById(category.getParentId());
			if (childNum > 0) {
				if (parent.getIsParent() == 0) {
					parent.setIsParent(1);
					parent.update();
				}
			} else {
				if (parent.getIsParent() > 0) {
					parent.setIsParent(0);
					parent.update();
				}
			}
		}
	}
}
