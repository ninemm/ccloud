/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.ccloud.model.InventoryCheckDetail;
import org.ccloud.model.vo.ProductInfo;
import org.ccloud.model.vo.inventoryCheckInfo;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.IDataLoader;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class InventoryCheckDetailQuery extends JBaseQuery { 

	protected static final InventoryCheckDetail DAO = new InventoryCheckDetail();
	private static final InventoryCheckDetailQuery QUERY = new InventoryCheckDetailQuery();

	public static InventoryCheckDetailQuery me() {
		return QUERY;
	}

	public InventoryCheckDetail findById(final String id) {
		return DAO.getCache(id, new IDataLoader() {
			@Override
			public Object load() {
				return DAO.findById(id);
			}
		});
	}

	public Page<InventoryCheckDetail> paginate(int pageNumber, int pageSize, String orderby) {
		String select = "select * ";
		StringBuilder fromBuilder = new StringBuilder("from `cc_inventory_check_detail` ");

		LinkedList<Object> params = new LinkedList<Object>();

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	
	public List<inventoryCheckInfo> findByiCheckDetailId(String id) {
		
 	StringBuilder fromBuilder = new StringBuilder("select c1.bill_sn,c1.warehouse_id,c1.biz_user_id,c1.biz_date,c1.`status`,c1.create_date, ");
 	fromBuilder.append("c2.product_id,c2.product_amount,c2.product_count,c2.remark");
 	fromBuilder.append(" FROM cc_inventory_check c1 ");
 	fromBuilder.append(" inner JOIN cc_inventory_check_detail c2 ON c1.id = c2.inventory_check_id ");
 	fromBuilder.append(" WHERE c2.inventory_check_id = ?");
	List<Record> list = Db.find(fromBuilder.toString(), id);
	List<inventoryCheckInfo> iList = new ArrayList<>();
	for (Record record : list) {
		inventoryCheckInfo inventoryCheckInfo = new inventoryCheckInfo();
		inventoryCheckInfo.setBillSn(record.getStr("bill_sn"));
		inventoryCheckInfo.setWarehouseId(record.getStr("warehouse_id"));
		inventoryCheckInfo.setBizUserId(record.getStr("biz_user_id"));
		inventoryCheckInfo.setBizDate(record.getDate("biz_date"));
		inventoryCheckInfo.setStatus(record.getInt("status"));
		inventoryCheckInfo.setProductId(record.getStr("product_id"));
		inventoryCheckInfo.setProductAmount(record.getBigDecimal("product_amount"));
		inventoryCheckInfo.setProductCount(record.getInt("product_count"));
		inventoryCheckInfo.setRemark(record.getStr("remark"));
		List<ProductInfo> ProductInfo = ProductQuery.me().getAllProductInfoById(inventoryCheckInfo.getProductId());
		inventoryCheckInfo.setProductInfos(ProductInfo);
		iList.add(inventoryCheckInfo);
	}
	return iList;
	}
	
	
	public List<InventoryCheckDetail> deleteByICheckId(String id) {
		return DAO.doFind("inventory_check_id = ?", id);
	}
}
