/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.math.BigDecimal;
import java.util.LinkedList;
import java.util.List;

import org.ccloud.Consts;
import org.ccloud.model.PurchaseRefundOutstock;
import org.ccloud.utils.StringUtils;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class PurchaseRefundOutstockQuery extends JBaseQuery { 

	protected static final PurchaseRefundOutstock DAO = new PurchaseRefundOutstock();
	private static final PurchaseRefundOutstockQuery QUERY = new PurchaseRefundOutstockQuery();

	public static PurchaseRefundOutstockQuery me() {
		return QUERY;
	}

	public PurchaseRefundOutstock findById(final String id) {
				return DAO.findById(id);
	}

	public Page<Record> paginate(int pageNumber, int pageSize, String keyword, String startDate, String endDate,String dataArea,String deptId) {
		String select = "select r.*, CASE WHEN cs.`name` IS NOT NULL THEN cs.`name` ELSE s.seller_name END AS supplierName ";
		StringBuilder fromBuilder = new StringBuilder(" from `cc_purchase_refund_outstock` r");
		fromBuilder.append(" LEFT JOIN cc_supplier cs on r.supplier_id = cs.id "
				+ " LEFT JOIN cc_seller s on s.id = r.supplier_id ");

		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = true;

		needWhere = appendIfNotEmptyWithLike(fromBuilder, "r.outstock_sn", keyword, params, needWhere);
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "r.data_area", dataArea, params, needWhere);
		if (needWhere) {
			fromBuilder.append(" where 1 = 1  ");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and r.create_date >= ?");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and r.create_date <= ?");
			params.add(endDate);
		}

		fromBuilder.append(" and r.dept_id = '"+deptId+"'  order by r.create_date desc ");

		if (params.isEmpty())
			return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public Record findMoreById(final String id,String dataArea) {
		StringBuilder fromBuilder = new StringBuilder(
				" SELECT cpro.*,u.realname,u.mobile as userMobile,cs.name as supplierName,cs.code,cs.contact,cs.mobile as supplierMobile ");
		fromBuilder.append(" from cc_purchase_refund_outstock cpro ");
		fromBuilder.append(" LEFT JOIN cc_supplier cs on cs.id=cpro.supplier_id ");
		fromBuilder.append(" LEFT JOIN `user` u on u.id=cpro.biz_user_id ");
		fromBuilder.append(" where cpro.id=? and cpro.data_area='"+dataArea+"' ");

		return Db.findFirst(fromBuilder.toString(), id);
	}
	
	public List<PurchaseRefundOutstock> findByUser(String deptId, String dataArea){
		String sql = "select DISTINCT * from cc_purchase_refund_outstock  where dept_id='"+deptId+"' and data_area like '"+dataArea+"' ";
		return DAO.find(sql);
	}
	
	public String getNewSn(String sellerId) {
		String sql = "SELECT p.outstock_sn FROM cc_purchase_refund_outStock p LEFT JOIN cc_seller s on s.dept_id = p.dept_id WHERE date(p.create_date) = curdate()"
				+ " and s.id = '"+sellerId+"' ORDER BY p.create_date desc";
		PurchaseRefundOutstock purchaseRefundOutstock = DAO.findFirst(sql);
		String SN = "";
		if (purchaseRefundOutstock == null || StringUtils.isBlank(purchaseRefundOutstock.getOutstockSn())) {
			SN = Consts.SALES_OUT_STOCK_SN;
		} else {
			String endSN = StringUtils.substringSN(Consts.SALES_OUT_STOCK_SN, purchaseRefundOutstock.getOutstockSn());
			SN = new BigDecimal(endSN).add(new BigDecimal(1)).toString();
		}
		return SN;
	}
	
	public List<Record> findByDataArea(String dataArea){
		String sql = "select DISTINCT u.id,u.realname from cc_purchase_refund_outstock o LEFT JOIN user u on u.id = o.biz_user_id where o.data_area like '"+dataArea+"'";
		return Db.find(sql);
	}
	
	public PurchaseRefundOutstock findBySn(String refundSn) {
		String sql = "select * from cc_purchase_refund_outstock where outstock_sn = ?";
		return DAO.findFirst(sql, refundSn);
	}
}
