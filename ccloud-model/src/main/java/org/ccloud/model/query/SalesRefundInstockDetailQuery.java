/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.ccloud.Consts;
import org.ccloud.model.*;
import org.ccloud.utils.StringUtils;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class SalesRefundInstockDetailQuery extends JBaseQuery { 

	protected static final SalesRefundInstockDetail DAO = new SalesRefundInstockDetail();
	private static final SalesRefundInstockDetailQuery QUERY = new SalesRefundInstockDetailQuery();

	public static SalesRefundInstockDetailQuery me() {
		return QUERY;
	}

	public SalesRefundInstockDetail findById(final String id) {
		return DAO.findById(id);
	}
	
	public List<Record> findByRefundId(String refundId) {

		StringBuilder sqlBuilder = new StringBuilder(
				" SELECT sod.*,sp.tax_price, sp.custom_name, sod.is_gift, p.big_unit, p.small_unit, p.convert_relate,sp.product_id, t1.valueName, cs.is_composite ");
		sqlBuilder.append(" from `cc_sales_refund_instock_detail` sod ");
		sqlBuilder.append(" LEFT JOIN cc_sales_outstock_detail co ON sod.outstock_detail_id = co.id ");
		sqlBuilder.append(" LEFT JOIN cc_sales_order_detail cs ON co.order_detail_id = cs.id ");
		sqlBuilder.append(" LEFT JOIN cc_seller_product sp ON sod.sell_product_id = sp.id ");
		sqlBuilder.append(" LEFT JOIN cc_product p ON sp.product_id = p.id ");
		sqlBuilder.append("LEFT JOIN  (SELECT sv.id, cv.product_set_id, GROUP_CONCAT(sv. NAME) AS valueName FROM cc_goods_specification_value sv ");
		sqlBuilder.append("RIGHT JOIN cc_product_goods_specification_value cv ON cv.goods_specification_value_set_id = sv.id GROUP BY cv.product_set_id) t1 on t1.product_set_id = p.id ");			
		sqlBuilder.append(" WHERE sod.refund_instock_id = ? ");

		return Db.find(sqlBuilder.toString(), refundId);
	}
	
	public List<SalesRefundInstockDetail> findByInId(String refundId) {
		return DAO.doFind("refund_instock_id = ?", refundId);
	}	
	
	public boolean insert(Map<String, String[]> paraMap, String instockId, String sellerId, Date date,
			String deptId, String dataArea, int index) {
		SalesRefundInstockDetail detail = new SalesRefundInstockDetail();
		detail.setId(StrKit.getRandomUUID());
		detail.setRefundInstockId(instockId);
		detail.setSellProductId(StringUtils.getArrayFirst(paraMap.get("sellProductId" + index)));
		String convert = StringUtils.getArrayFirst(paraMap.get("convert" + index));
		String bigNum = StringUtils.getArrayFirst(paraMap.get("bigNum" + index));
		String smallNum = StringUtils.getArrayFirst(paraMap.get("smallNum" + index));
		
		Integer productCount = Integer.valueOf(bigNum) * Integer.valueOf(convert) + Integer.valueOf(smallNum);
		String productPrice = StringUtils.getArrayFirst(paraMap.get("bigPrice" + index));
		String productAmount = StringUtils.getArrayFirst(paraMap.get("rowTotal" + index));
		String isGift = StringUtils.getArrayFirst(paraMap.get("isGift" + index));
		
		detail.setProductCount(productCount);
		detail.setProductPrice(new BigDecimal(productPrice));
		detail.setProductAmount(new BigDecimal(productAmount));
		detail.setOutstockDetailId(StringUtils.getArrayFirst(paraMap.get("outstockDetailId" + index)));
		detail.setRejectProductCount(productCount);
		detail.setRejectProductPrice(new BigDecimal(productPrice));
		detail.setRejectAmount(new BigDecimal(productAmount));
		
		detail.setIsGift(StringUtils.isNumeric(isGift)? Integer.parseInt(isGift) : 0);
		detail.setCreateDate(date);
		detail.setDeptId(deptId);
		detail.setDataArea(dataArea);

		return detail.save();
	}

	public Page<SalesRefundInstockDetail> paginate(int pageNumber, int pageSize, String orderby) {
		String select = "select * ";
		StringBuilder fromBuilder = new StringBuilder("from `cc_sales_refund_instock_detail` ");

		LinkedList<Object> params = new LinkedList<Object>();

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public Map<String, Object> insertByApp(Record record, String instockId, String sellerId, 
			Date date, String bigCount, String smallCount) {
		SalesRefundInstockDetail detail = new SalesRefundInstockDetail();
		detail.setId(StrKit.getRandomUUID());
		detail.setRefundInstockId(instockId);
		detail.setSellProductId(record.getStr("sell_product_id"));
		Integer convert = record.getInt("convert_relate");
		Integer productCount = Integer.valueOf(bigCount) * Integer.valueOf(convert) + Integer.valueOf(smallCount);
		BigDecimal productPrice = record.getBigDecimal("product_price");
		BigDecimal productAmount = new BigDecimal(productCount).divide(new BigDecimal(convert), 2, BigDecimal.ROUND_HALF_UP)
				.multiply(productPrice);
		Integer isGift = record.getInt("is_gift");
		Integer isComposite = record.getInt("is_composite");
		
		detail.setProductCount(productCount);
		detail.setProductPrice(productPrice);
		detail.setProductAmount(productAmount);
		detail.setOutstockDetailId(record.getStr("id"));
		detail.setRejectProductCount(productCount);
		detail.setRejectProductPrice(productPrice);
		detail.setRejectAmount(productAmount);
		
		detail.setIsGift(isGift);
		detail.setCreateDate(date);
		detail.setDeptId(record.getStr("dept_id"));
		detail.setDataArea(record.getStr("data_area"));
		
		Map<String, Object> map = new HashMap<>();
		map.put("status", detail.save());
		if (isComposite == 1) {
			map.put("productAmount", getTotalAmount(record.getStr("sell_product_id"), record.getStr("composite_id")));
		} else if(isGift == 0) {
			map.put("productAmount", productAmount);
		} else {
			map.put("productAmount", new BigDecimal(0));
		}
		return map;
	}
	
	private BigDecimal getTotalAmount(String sellerProductId, String compositeId) {
		BigDecimal totalAmount = new BigDecimal(0);
		List<ProductComposition> composition = ProductCompositionQuery.me().findByParentId(compositeId);
		ProductComposition productComposition = composition.get(0);
		if (productComposition.getSellerProductId().equals(sellerProductId)) {
			return productComposition.getPrice();
		}
		return totalAmount;
	}

	
	   //批量入库
		public boolean batchInStock(List<Record> productInfos, String sellerId, Date date, String deptId,String dataArea,String userId, String inStockSN,
		                            String order_user, String order_date) {
			for (Record record : productInfos) {
				SalesRefundInstockDetail detail = SalesRefundInstockDetailQuery.me().findById(record.getStr("refundInstockDetailId"));
				if (!detail.saveOrUpdate()) {
					return false;
				}
				
				Inventory inventory = InventoryQuery.me().findBySellerIdAndProductIdAndWareHouseId(sellerId, record.getStr("product_id"), record.getStr("warehouse_id"));
				if (inventory == null) {
					return false;
				}
				BigDecimal oldInCount = inventory.getInCount() == null? new BigDecimal(0) : inventory.getInCount();
				BigDecimal oldInAmount = inventory.getInAmount() == null? new BigDecimal(0) : inventory.getInAmount();
				//BigDecimal oldOutPrice = inventory.getOutPrice() == null? new BigDecimal(0) : inventory.getOutPrice();
				BigDecimal oldBalanceAmount = inventory.getBalanceAmount() == null? new BigDecimal(0) : inventory.getBalanceAmount();
				BigDecimal oldBalanceCount = inventory.getBalanceCount() == null? new BigDecimal(0) : inventory.getBalanceCount();
						
				inventory.setInCount(oldInCount.add(new BigDecimal(record.getInt("bigCount")).add(new BigDecimal(record.getInt("smallCount")))));
				inventory.setInAmount(oldInAmount.add(new BigDecimal(record.getStr("reject_amount"))));
				inventory.setInPrice(record.getBigDecimal("big_Price"));
				inventory.setBalanceCount(oldBalanceCount.add(new BigDecimal(record.getInt("bigCount"))
						.add(new BigDecimal(record.getInt("smallCount")))));
				inventory.setBalanceAmount(oldBalanceAmount.add(record.getBigDecimal("reject_amount")));
				inventory.setModifyDate(new Date());
				
				if (!inventory.saveOrUpdate()) {
					return false;
				}
				
				InventoryDetail oldDetail = InventoryDetailQuery.me().findBySellerProductId(record.getStr("sell_product_id"), record.getStr("warehouse_id"));
				InventoryDetail inventoryDetail = new InventoryDetail();
				inventoryDetail.setId(StrKit.getRandomUUID());
				inventoryDetail.setWarehouseId(inventory.getWarehouseId());
				inventoryDetail.setSellProductId(detail.getSellProductId());
				inventoryDetail.setInAmount(detail.getProductAmount());
				inventoryDetail.setInCount(new BigDecimal(record.getInt("bigCount")).add(new BigDecimal(record.getInt("smallCount"))));
				inventoryDetail.setInPrice(inventory.getOutPrice());
				inventoryDetail.setBalanceAmount(oldDetail.getBalanceAmount().subtract(detail.getProductAmount()));
				inventoryDetail.setBalanceCount(oldDetail.getBalanceCount().add(new BigDecimal(record.getInt("bigCount"))
						.add(new BigDecimal(record.getInt("smallCount")))));
				inventoryDetail.setBalancePrice(oldDetail.getBalancePrice());
				inventoryDetail.setBizBillSn(inStockSN);
				inventoryDetail.setBizDate(detail.getCreateDate());
				inventoryDetail.setBizType(Consts.BIZ_TYPE_SALES_REFUND_INSTOCK);
				inventoryDetail.setBizUserId(userId);
				inventoryDetail.setDeptId(deptId);
				inventoryDetail.setDataArea(dataArea);
				inventoryDetail.setCreateDate(new Date());
				
				if (!inventoryDetail.save()) {
					return false;
				}
				
				SellerProduct sellerProduct = SellerProductQuery.me().findById(record.getStr("sell_product_id"));
				sellerProduct.setStoreCount(sellerProduct.getStoreCount().add(new BigDecimal(record.getInt("bigCount"))
						.add(new BigDecimal(record.getInt("smallCount")))));
				sellerProduct.setModifyDate(new Date());
				if (!sellerProduct.update()) {
					return false;
				}

				//更新计划
				BigDecimal bigProductCount = new BigDecimal(record.getInt("bigCount")).add(new BigDecimal(record.getInt("smallCount")).divide(new BigDecimal(record.getInt("convert_relate")), 2, BigDecimal.ROUND_HALF_UP));
				if (!updatePlans(order_user, record.getStr("sell_product_id"), order_date, bigProductCount)) {
					return false;
				}
				
			}
			return true;
		}

	private boolean updatePlans(String order_user, String sellerProductId, String orderDate, BigDecimal productCount) {

		List<PlansDetail> plansDetails = PlansDetailQuery.me().findBySales(order_user, sellerProductId, orderDate.substring(0,10));
		for (PlansDetail plansDetail : plansDetails) {
			BigDecimal planNum = plansDetail.getPlanNum();
			BigDecimal completeNum = plansDetail.getCompleteNum().subtract(productCount);
			plansDetail.setCompleteNum(completeNum);
			plansDetail.setCompleteRatio(completeNum.multiply(new BigDecimal(100)).divide(planNum, 2, BigDecimal.ROUND_HALF_UP));
			if(!plansDetail.update()){
				return  false;
			}
		}

		return true;
	}



}
