/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.math.BigDecimal;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.ccloud.model.SalesRefundInstockDetail;
import org.ccloud.utils.StringUtils;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class SalesRefundInstockDetailQuery extends JBaseQuery { 

	protected static final SalesRefundInstockDetail DAO = new SalesRefundInstockDetail();
	private static final SalesRefundInstockDetailQuery QUERY = new SalesRefundInstockDetailQuery();

	public static SalesRefundInstockDetailQuery me() {
		return QUERY;
	}

	public SalesRefundInstockDetail findById(final String id) {
		return DAO.findById(id);
	}
	
	public List<Record> findByRefundId(String refundId) {

		StringBuilder sqlBuilder = new StringBuilder(
				" SELECT sod.*, sp.custom_name, sod.is_gift, p.big_unit, p.small_unit, p.convert_relate,sp.product_id, t1.valueName, cs.is_composite ");
		sqlBuilder.append(" from `cc_sales_refund_instock_detail` sod ");
		sqlBuilder.append(" LEFT JOIN cc_sales_outstock_detail co ON sod.outstock_detail_id = co.id ");
		sqlBuilder.append(" LEFT JOIN cc_sales_order_detail cs ON co.order_detail_id = cs.id ");
		sqlBuilder.append(" LEFT JOIN cc_seller_product sp ON sod.sell_product_id = sp.id ");
		sqlBuilder.append(" LEFT JOIN cc_product p ON sp.product_id = p.id ");
		sqlBuilder.append("LEFT JOIN  (SELECT sv.id, cv.product_set_id, GROUP_CONCAT(sv. NAME) AS valueName FROM cc_goods_specification_value sv ");
		sqlBuilder.append("RIGHT JOIN cc_product_goods_specification_value cv ON cv.goods_specification_value_set_id = sv.id GROUP BY cv.product_set_id) t1 on t1.product_set_id = p.id ");			
		sqlBuilder.append(" WHERE sod.refund_instock_id = ? ");

		return Db.find(sqlBuilder.toString(), refundId);
	}
	
	public List<SalesRefundInstockDetail> findByInId(String refundId) {
		return DAO.doFind("refund_instock_id = ?", refundId);
	}	
	
	public boolean insert(Map<String, String[]> paraMap, String instockId, String sellerId, Date date,
			String deptId, String dataArea, int index) {
		SalesRefundInstockDetail detail = new SalesRefundInstockDetail();
		detail.setId(StrKit.getRandomUUID());
		detail.setRefundInstockId(instockId);
		detail.setSellProductId(StringUtils.getArrayFirst(paraMap.get("sellProductId" + index)));
		String convert = StringUtils.getArrayFirst(paraMap.get("convert" + index));
		String bigNum = StringUtils.getArrayFirst(paraMap.get("bigNum" + index));
		String smallNum = StringUtils.getArrayFirst(paraMap.get("smallNum" + index));
		
		Integer productCount = Integer.valueOf(bigNum) * Integer.valueOf(convert) + Integer.valueOf(smallNum);
		String productPrice = StringUtils.getArrayFirst(paraMap.get("bigPrice" + index));
		String productAmount = StringUtils.getArrayFirst(paraMap.get("rowTotal" + index));
		String isGift = StringUtils.getArrayFirst(paraMap.get("isGift" + index));
		
		detail.setProductCount(productCount);
		detail.setProductPrice(new BigDecimal(productPrice));
		detail.setProductAmount(new BigDecimal(productAmount));
		detail.setOutstockDetailId(StringUtils.getArrayFirst(paraMap.get("outstockDetailId" + index)));
		detail.setRejectProductCount(productCount);
		detail.setRejectProductPrice(new BigDecimal(productPrice));
		detail.setRejectAmount(new BigDecimal(productAmount));
		
		detail.setIsGift(StringUtils.isNumeric(isGift)? Integer.parseInt(isGift) : 0);
		detail.setCreateDate(date);
		detail.setDeptId(deptId);
		detail.setDataArea(dataArea);

		return detail.save();
	}

	public Page<SalesRefundInstockDetail> paginate(int pageNumber, int pageSize, String orderby) {
		String select = "select * ";
		StringBuilder fromBuilder = new StringBuilder("from `cc_sales_refund_instock_detail` ");

		LinkedList<Object> params = new LinkedList<Object>();

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	
}
