/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.ccloud.model.StationOperationRel;

import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.jfinal.plugin.ehcache.IDataLoader;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class StationOperationRelQuery extends JBaseQuery { 

	protected static final StationOperationRel DAO = new StationOperationRel();
	private static final StationOperationRelQuery QUERY = new StationOperationRelQuery();

	public static StationOperationRelQuery me() {
		return QUERY;
	}

	public StationOperationRel findById(final String id) {
		return DAO.getCache(id, new IDataLoader() {
			@Override
			public Object load() {
				return DAO.findById(id);
			}
		});
	}

	public Page<StationOperationRel> paginate(int pageNumber, int pageSize, String orderby) {
		String select = "select * ";
		StringBuilder fromBuilder = new StringBuilder("from `station_operation_rel` ");

		LinkedList<Object> params = new LinkedList<Object>();

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}
	public List<StationOperationRel> isValid(String stationId, String operationId) {
		StringBuilder sqlBuilder = new StringBuilder("select * ");

		sqlBuilder.append("from `station_operation_rel` ");
		sqlBuilder.append("where station_id = ? and operation_id = ? ");

		return DAO.find(sqlBuilder.toString(), stationId, operationId);
	}

	public int delete(String stationId, String operationId) {
		StringBuilder sql = new StringBuilder(" station_id = ? and operation_id = ? ");
		return DAO.doDelete(sql.toString(), stationId, operationId);
	}

	public int deleteByStationId(String stationId) {

		return DAO.doDelete(" station_id = ?", stationId);
	}

	public int batchDeleteByStationId(List<String> ids) {
		if (ids != null && ids.size() > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.size(); i++)
				deleteCount = deleteCount + DAO.doDelete("station_id = ? ", ids.get(i).toString());
			return deleteCount;
		}
		return 0;
	}

	public int deleteByOperationId(String operationId) {
		return DAO.doDelete(" operation_id = ?", operationId);
	}

	public List<String> findUrlByStationId(String string) {
		List<String> list = new ArrayList<>();
		StringBuilder fromBuilder = new StringBuilder("select o.url from ");
		fromBuilder.append("`station_operation_rel` r ");
		fromBuilder.append("left join `operation` o ");
		fromBuilder.append("on r.operation_id = o.id ");
		fromBuilder.append("where r.station_id = ? ");
		List<Record> records = Db.find(fromBuilder.toString(), string);
		for (Record record : records) {
			list.add(record.getStr("url"));
		}
		return list;
	}

}
