/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.ccloud.Consts;
import org.ccloud.model.PurchaseOrder;
import org.ccloud.model.vo.orderProductInfo;
import org.ccloud.model.vo.printAllNeedInfo;
import org.ccloud.utils.StringUtils;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class PurchaseOrderQuery extends JBaseQuery { 

	protected static final PurchaseOrder DAO = new PurchaseOrder();
	private static final PurchaseOrderQuery QUERY = new PurchaseOrderQuery();

	public static PurchaseOrderQuery me() {
		return QUERY;
	}

	public PurchaseOrder findById(final String id) {
				return DAO.findById(id);
	}

	public Page<PurchaseOrder> paginate(int pageNumber, int pageSize, String orderby) {
		String select = "select * ";
		StringBuilder fromBuilder = new StringBuilder("from `cc_purchase_order` ");

		LinkedList<Object> params = new LinkedList<Object>();

		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public Page<Record> paginate(int pageNumber, int pageSize, String keyword, String startDate, String endDate,String dataArea,String sellerId) {
		String select =  "SELECT cpo.*,cs.name as supplierName,u.realname  ";
		StringBuilder fromBuilder = new StringBuilder("FROM cc_purchase_order cpo ");
		fromBuilder.append(" LEFT JOIN cc_supplier cs on cs.id=cpo.supplier_id LEFT JOIN user u on u.id=cpo.biz_user_id "
				+ " LEFT JOIN cc_seller s on s.dept_id = cpo.dept_id ");

		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = true;

		needWhere = appendIfNotEmptyWithLike(fromBuilder, "cpo.data_area", dataArea, params, needWhere);

		if (needWhere) {
			fromBuilder.append(" where 1 = 1");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cpo.create_date >= ?");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cpo.create_date <= ?");
			params.add(endDate);
		}
		fromBuilder.append(" and s.id='"+sellerId+"' ");
		fromBuilder.append(" and ( cpo.porder_sn like '%"+keyword+"%' or cs.name like '%"+keyword+"%' ) order by cpo.create_date desc ");

		if (params.isEmpty())
			return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}
	
	public int findByUserId(String userId,String dataArea){
		String sql = "select c.* from cc_purchase_order c LEFT JOIN user u on c.dept_id=u.department_id where u.id=? and c.data_area='"+dataArea+"' ";
		return DAO.find(sql, userId).size();
	}
	
	public Record findMoreById(String id) {
		StringBuilder fromBuilder = new StringBuilder(
				" SELECT cpo.*,cs.`name` as supplier_name,cs.contact,u.mobile as userMobile,cs.mobile as supplierMobile,cs.`name` as supplier_name, cs.code,u.realname as biz_user  ");
		fromBuilder.append(" FROM cc_purchase_order cpo ");
		fromBuilder.append(" LEFT JOIN cc_supplier cs on cs.id=cpo.supplier_id ");
		fromBuilder.append(" LEFT JOIN user u on u.id=cpo.biz_user_id ");
		fromBuilder.append(" where cpo.id = ? ");

		return Db.findFirst(fromBuilder.toString(), id);
	}
	
	public Page<Record> paginateO(int pageNumber, int pageSize, String keyword, String startDate, String endDate,String dataArea,String id) {
		String select =  "SELECT cpo.*,cs.name as supplierName,u.realname  ";
		StringBuilder fromBuilder = new StringBuilder("FROM cc_purchase_order cpo ");
		fromBuilder.append(" LEFT JOIN cc_supplier cs on cs.id=cpo.supplier_id LEFT JOIN user u on u.id=cpo.biz_user_id  ");

		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = true;

		needWhere = appendIfNotEmptyWithLike(fromBuilder, "cpo.porder_sn", keyword, params, needWhere);

		if (needWhere) {
			fromBuilder.append(" where 1 = 1");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cpo.create_date >= ?");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cpo.create_date <= ?");
			params.add(endDate);
		}
		fromBuilder.append(" and u.id='"+id+"' and cpo.data_area= '"+dataArea+"' and cpo.status=1000 ");
		fromBuilder.append(" order by cpo.create_date ");

		if (params.isEmpty())
			return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}
	
	/*public PurchaseOrder findByPurchaseOrderDetailId(String purchaseOrderDetailId){
		String sql = "select cpo.* from cc_purchase_order cpo "
				+ " LEFT JOIN cc_purchase_order_detail cpod on cpo.id=cpod.purchase_order_id "
				+ " where cpod.id = ?";
		return DAO.findFirst(sql, purchaseOrderDetailId);
	}*/
	public PurchaseOrder findByPurchaseInstockDetailId(String orderId){
		String sql = " select cpo.* from cc_purchase_order cpo LEFT join cc_purchase_order_detail cpod on cpo.id = cpod.purchase_order_id "
				+ " where cpod.id=? ";
		return DAO.findFirst(sql, orderId);
	}
	
	public String getNewSn(String sellerId) {
		String sql = "SELECT p.porder_sn FROM cc_purchase_order p LEFT JOIN cc_seller s on s.dept_id = p.dept_id WHERE date(p.create_date) = curdate() "
					+" and s.id= '"+sellerId+"' ORDER BY p.create_date desc";
		PurchaseOrder order = DAO.findFirst(sql);
		String SN = "";
		if (order == null || StringUtils.isBlank(order.getPorderSn())) {
			SN = Consts.SALES_ORDER_SN;
		} else {
			String endSN = StringUtils.substringSN(Consts.SALES_ORDER_SN, order.getPorderSn());
			SN = new BigDecimal(endSN).add(new BigDecimal(1)).toString();
		}
		return SN;
	}
	
	public printAllNeedInfo findStockOutForPrint(final String id) {
		StringBuilder fromBuilder = new StringBuilder("SELECT cpo.id,cpo.porder_sn,cpo.total_amount,cpo.deal_date,cpo.remark,cpo.payment_type,cpo.create_date,u.realname,u.mobile as umobile,cs.contact,cs.mobile,cs.`name` as supplierName,cs.qq ");
		fromBuilder.append(" FROM cc_purchase_order cpo ");
		fromBuilder.append(" LEFT JOIN cc_supplier cs ON cs.id = cpo.supplier_id ");
		fromBuilder.append(" LEFT JOIN `user` u on u.id = cpo.biz_user_id ");
		fromBuilder.append(" WHERE cpo.id = ? ");
		printAllNeedInfo printAllNeedInfo = new printAllNeedInfo();
		Record record = Db.findFirst(fromBuilder.toString(), id);	
			printAllNeedInfo.setOutstockSn(record.getStr("porder_sn"));
			printAllNeedInfo.setCustomerName(record.getStr("supplierName"));
			printAllNeedInfo.setCustomerContacts(record.getStr("contact"));
			printAllNeedInfo.setCustomerPhone(record.getStr("mobile"));
			printAllNeedInfo.setPlaceOrderMan(record.getStr("realname"));
			printAllNeedInfo.setPlaceOrderPhone(record.getStr("umobile"));
			printAllNeedInfo.setSalesAmount(record.getBigDecimal("total_amount"));
			printAllNeedInfo.setRemark(record.getStr("remark"));
			printAllNeedInfo.setPlaceOrderTime(record.getDate("deal_date"));
			printAllNeedInfo.setOrderId(record.getStr("id"));
			printAllNeedInfo.setBizUserId(record.getStr("biz_user_id"));
			printAllNeedInfo.setReceiveType(record.getInt("payment_type"));
			printAllNeedInfo.setSellerName(record.getStr("supplierName"));
			printAllNeedInfo.setTotalCount(record.getBigDecimal("total_amount"));
			printAllNeedInfo.setPrintDate(record.getDate("create_date"));
			return printAllNeedInfo;
	}
	
	public List<orderProductInfo> findPrintProductInfo(String orderId,String dataArea) {
		StringBuilder sqlBuilder = new StringBuilder(
				" SELECT cpod.*,CONVERT( cpod.product_price/cp.convert_relate,decimal(18,2)) as small_price,floor(cpod.product_count/cp.convert_relate) as bigCount,MOD(cpod.product_count,cp.convert_relate) as smallCount ,cp.`name` AS productName,cp.big_unit,cp.small_unit,cp.convert_relate,GROUP_CONCAT(DISTINCT cgs.`name`) AS cps_name ");
		sqlBuilder.append(" from cc_purchase_order_detail cpod  ");
		sqlBuilder.append(" LEFT JOIN cc_product_goods_specification_value cpg ON cpod.product_id = cpg.product_set_id ");
		sqlBuilder.append(" LEFT JOIN cc_goods_specification_value cgs ON cpg.goods_specification_value_set_id = cgs.id ");
		sqlBuilder.append(" LEFT JOIN cc_product cp ON cp.id = cpod.product_id ");
		sqlBuilder.append(" where cpod.purchase_order_id=? and cpod.data_area='"+dataArea+"' GROUP BY cpod.id ");
		List<Record> records = Db.find(sqlBuilder.toString(), orderId);
		List<orderProductInfo> orderProductInfos = new ArrayList<>();
		for (Record record : records) {
			orderProductInfo orderProductInfo = new orderProductInfo();
			orderProductInfo.setProductName(record.getStr("productName"));//产品名称		
			orderProductInfo.setValueName(record.getStr("cps_name"));//产品规格		
			orderProductInfo.setBigUnit(record.getStr("big_unit"));//产品大单位
			orderProductInfo.setSmallUnit(record.getStr("small_unit"));//产品小单位
			orderProductInfo.setConvertRelate(record.getInt("convert_relate"));//换算关系
			orderProductInfo.setBigPrice(record.getBigDecimal("product_price"));//大单位价格
			orderProductInfo.setSmallPrice(record.getBigDecimal("small_price"));//小单位价格
			orderProductInfo.setBigCount(record.getInt("bigCount"));
			orderProductInfo.setSmallCount(record.getInt("smallCount"));
			orderProductInfo.setProductAmout(record.getBigDecimal("product_amount"));
			orderProductInfo.setProductCount(record.getInt("product_count"));
			orderProductInfo.setSalesOutDetaliId(record.getStr("id"));
			orderProductInfos.add(orderProductInfo);
		}
		 return orderProductInfos;
	}

	public PurchaseOrder findByStockSn(String stockOutSn) {
		return DAO.doFindFirst("stock_out_sn = ?", stockOutSn);
	}
	
}
