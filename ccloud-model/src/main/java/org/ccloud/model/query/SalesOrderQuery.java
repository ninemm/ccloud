/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model.query;

import java.math.BigDecimal;
import java.util.Date;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import org.ccloud.Consts;
import org.ccloud.model.Receivables;
import org.ccloud.model.SalesOrder;
import org.ccloud.model.SalesOrderDetail;
import org.ccloud.utils.DateUtils;
import org.ccloud.utils.StringUtils;

import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
public class SalesOrderQuery extends JBaseQuery {

	protected static final SalesOrder DAO = new SalesOrder();
	private static final SalesOrderQuery QUERY = new SalesOrderQuery();

	public static SalesOrderQuery me() {
		return QUERY;
	}

	public SalesOrder findById(final String id) {

		return DAO.findById(id);

	}

	public Record findMoreById(final String id) {
		StringBuilder fromBuilder = new StringBuilder(" select o.*,c.customer_name, c.contact as ccontact, c.mobile as cmobile, c.address as caddress, ct.name as customerTypeName, ct.code as typeCode,ct.proc_def_key, u.realname, u.mobile as umobile, cp.factor ,cc.id as sellerCustomerId,cc.customer_kind ");
		fromBuilder.append(" from `cc_sales_order` o ");
		fromBuilder.append(" left join cc_seller_customer cc ON o.customer_id = cc.id ");
		fromBuilder.append(" left join cc_customer c on cc.customer_id = c.id ");
		fromBuilder.append(" left join cc_customer_type ct on o.customer_type_id = ct.id ");
		fromBuilder.append(" left join cc_price_system cp on cp.id = ct.price_system_id ");
		fromBuilder.append(" left join user u on o.biz_user_id = u.id ");
		fromBuilder.append(" where o.id = ? ");

		return Db.findFirst(fromBuilder.toString(), id);
	}

	public Page<Record> paginate(int pageNumber, int pageSize, String keyword, String startDate, String endDate,
			String sellerId, String dataArea, String activityId) {
		String select = "";
		if(StrKit.notBlank(activityId)) {
			select = "select o.*, c.customer_name,t1.title, c.prov_name,c.city_name,c.country_name,c.address,c.contact as ccontact, c.mobile as cmobile,ct.`name` as customerTypeName,u.realname ";
		}else {
			select = "select o.*, c.customer_name, c.prov_name,c.city_name,c.country_name,c.address,c.contact as ccontact, c.mobile as cmobile,ct.`name` as customerTypeName,u.realname ";
		}
		StringBuilder fromBuilder = new StringBuilder("from `cc_sales_order` o ");
		fromBuilder.append("left join cc_seller_customer cc ON o.customer_id = cc.id ");
		fromBuilder.append("left join cc_customer c on cc.customer_id = c.id ");
		fromBuilder.append("LEFT JOIN cc_customer_type ct on ct.id = o.customer_type_id ");
		fromBuilder.append("LEFT JOIN user u on u.id = o.biz_user_id ");
		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = true;
		if (StrKit.notBlank(activityId)) {
			fromBuilder.append("LEFT JOIN (SELECT cs.order_id,ca.title, pc.activity_id FROM cc_sales_order_detail cs ");
			fromBuilder.append("LEFT JOIN cc_product_composition pc ON cs.composite_id = pc.id ");
			fromBuilder.append("LEFT JOIN cc_activity ca ON ca.id = pc.activity_id ");
			fromBuilder.append("GROUP BY cs.order_id) t1 on t1.order_id = o.id ");

			fromBuilder.append("LEFT JOIN (SELECT so.id, caa.activity_id FROM cc_sales_order so ");
			fromBuilder.append("LEFT JOIN cc_activity_apply caa ON so.activity_apply_id = caa.id ");
			fromBuilder.append(") t2 on t2.id = o.id ");
		}
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "o.data_area", dataArea, params, needWhere);

		if (needWhere) {
			fromBuilder.append(" where 1 = 1");
		}

		if (StrKit.notBlank(activityId)) {
			fromBuilder.append(" and (t1.activity_id = '" + activityId + "' or t2.activity_id = '" + activityId + "')");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and o.create_date >= ?");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and o.create_date <= ?");
			params.add(endDate);
		}

		if(!sellerId.equals("")) {
			fromBuilder.append(" and o.seller_id = '"+sellerId+"' ");
		}
		
		if (StrKit.notBlank(keyword)) {
			fromBuilder.append(" and ( o.order_sn like '%"+keyword+"%' or c.customer_name like '%"+keyword+"%' )");
		}
		
		fromBuilder.append(" order by o.create_date desc");

		if (params.isEmpty())
			return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public Page<Record> paginateForApp(int pageNumber, int pageSize, String keyword, String status,
			String customerTypeId, String startDate, String endDate, String sellerId, String dataArea,String bizUserId) {
		String select = "select o.*, c.customer_name, c.contact as ccontact, c.mobile as cmobile, ct.name as customerTypeName, a.ID_ taskId, a.NAME_ taskName, a.ASSIGNEE_ assignee,s.is_print ";
		StringBuilder fromBuilder = new StringBuilder("from `cc_sales_order` o ");
		fromBuilder.append("left join cc_seller_customer cc ON o.customer_id = cc.id ");
		fromBuilder.append("left join cc_customer c on cc.customer_id = c.id ");
		fromBuilder.append("left join cc_customer_type ct on o.customer_type_id = ct.id ");
		fromBuilder.append("left join act_ru_task a on o.proc_inst_id = a.PROC_INST_ID_ ");
		fromBuilder.append("LEFT JOIN cc_sales_order_join_outstock so on so.order_id = o.id ");
		fromBuilder.append("LEFT JOIN cc_sales_outstock s on s.id = so.outstock_id ");
		fromBuilder.append("LEFT JOIN user u on u.id = o.biz_user_id ");
		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = true;

		needWhere = appendIfNotEmpty(fromBuilder, "o.status", status, params, needWhere);
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "ct.name", customerTypeId, params, needWhere);
//		needWhere = appendIfNotEmpty(fromBuilder, "o.customer_type_id", customerTypeId, params, needWhere);
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "o.data_area", dataArea, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "o.seller_id", sellerId, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "o.biz_user_id", bizUserId, params, needWhere);

		if (needWhere) {
			fromBuilder.append(" where 1 = 1");
		}
		
		if (StrKit.notBlank(keyword)) {
			fromBuilder.append(" and (o.order_sn like '%" + keyword + "%' or c.customer_name like '%" + keyword + "%' or u.realname like '%" + keyword + "%')");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and o.create_date >= ?");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and o.create_date <= ?");
			params.add(endDate);
		}

		fromBuilder.append(" order by o.create_date desc ");

		if (params.isEmpty())
			return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public List<Record> findProductListBySeller(String sellerId) {
		StringBuilder fromBuilder = new StringBuilder( " SELECT sg.tax_price, sg.id, sg.product_id, sg.custom_name, sg.store_count,sg.account_price, sg.price, sg.warehouse_id, t1.valueName, p.big_unit, p.small_unit, p.convert_relate ");
		fromBuilder.append("FROM cc_seller_product sg ");
		fromBuilder.append("LEFT JOIN cc_product p ON sg.product_id = p.id ");
		fromBuilder.append("LEFT JOIN  (SELECT sv.id, cv.product_set_id, GROUP_CONCAT(sv. NAME) AS valueName FROM cc_goods_specification_value sv ");
		fromBuilder.append("RIGHT JOIN cc_product_goods_specification_value cv ON cv.goods_specification_value_set_id = sv.id GROUP BY cv.product_set_id) t1 on t1.product_set_id = sg.product_id ");
		fromBuilder.append("WHERE sg.is_enable = 1 and sg.is_gift = 0");

		LinkedList<Object> params = new LinkedList<Object>();
		appendIfNotEmpty(fromBuilder, "sg.seller_id", sellerId, params, false);

		fromBuilder.append(" ORDER BY sg.order_list ");

		return Db.find(fromBuilder.toString(), params.toArray());
	}

	public List<Record> findCustomerListByUser(String userId) {
		StringBuilder fromBuilder = new StringBuilder(
				" select cs.id, cc.customer_name, cc.contact, cc.mobile, cc.prov_name, cc.city_name, cc.country_name, cc.address ");
		fromBuilder.append(" from `cc_seller_customer` cs ");
		fromBuilder.append(" LEFT JOIN cc_customer cc ON cs.customer_id = cc.id ");
		fromBuilder.append(" JOIN cc_user_join_customer ujc ON cs.id = ujc.seller_customer_id ");
		// fromBuilder.append(" WHERE cs.customer_kind = '1' ");
		fromBuilder.append(" WHERE cs.is_enabled = 1 ");

		LinkedList<Object> params = new LinkedList<Object>();
		appendIfNotEmpty(fromBuilder, "ujc.user_id", userId, params, false);

		fromBuilder.append(" order by cc.create_date ");

		return Db.find(fromBuilder.toString(), params.toArray());
	}

	public List<Record> findCustomerTypeListByCustomerId(String customerId, String dataArea) {
		LinkedList<Object> params = new LinkedList<Object>();

		StringBuilder sqlBuilder = new StringBuilder("select c.id, c.name, c.code, cp.factor, c.proc_def_key ");
		sqlBuilder.append(" from `cc_customer_join_customer_type` cj ");
		sqlBuilder.append(" left join `cc_customer_type` c on cj.customer_type_id = c.id ");
		sqlBuilder.append(" left join `cc_price_system` cp on cp.id = c.price_system_id ");
		sqlBuilder.append(" where c.is_show = 1 ");
		appendIfNotEmpty(sqlBuilder, "cj.seller_customer_id", customerId, params, false);
		appendIfNotEmpty(sqlBuilder, "c.data_area", dataArea, params, false);

		return Db.find(sqlBuilder.toString(), params.toArray());
	}

	public boolean insert(Map<String, String[]> paraMap, String orderId, String orderSn, String sellerId, String userId,
			Date date, String deptId, String dataArea) {
		SalesOrder salesOrder = new SalesOrder();
		salesOrder.setId(orderId);
		salesOrder.setOrderSn(orderSn);
		salesOrder.setSellerId(sellerId);
		salesOrder.setBizUserId(userId);
		salesOrder.setCustomerId(StringUtils.getArrayFirst(paraMap.get("customerId")));
		salesOrder.setCustomerTypeId(StringUtils.getArrayFirst(paraMap.get("customerType")));
		salesOrder.setContact(StringUtils.getArrayFirst(paraMap.get("contact")));
		salesOrder.setMobile(StringUtils.getArrayFirst(paraMap.get("mobile")));
		salesOrder.setAddress(StringUtils.getArrayFirst(paraMap.get("address")));
		salesOrder.setStatus(Consts.SALES_ORDER_STATUS_DEFAULT);// 待审核
		String total = StringUtils.getArrayFirst(paraMap.get("total"));
		String type = StringUtils.getArrayFirst(paraMap.get("receiveType"));
		String productTotal = StringUtils.getArrayFirst(paraMap.get("productTotalCount"));
		salesOrder.setTotalCount(new BigDecimal(productTotal));
		salesOrder.setTotalAmount(new BigDecimal(total));
		salesOrder.setReceiveType(StringUtils.isNumeric(type) ? Integer.parseInt(type) : 1);
		salesOrder.setDeliveryAddress(StringUtils.getArrayFirst(paraMap.get("deliveryAddress")));
		Date deliveryDate = DateUtils.strToDate(StringUtils.getArrayFirst(paraMap.get("deliveryDate")),
				DateUtils.DEFAULT_NORMAL_FORMATTER);
		salesOrder.setDeliveryDate(deliveryDate);
		salesOrder.setRemark(StringUtils.getArrayFirst(paraMap.get("remark")));
		salesOrder.setCreateDate(date);
		salesOrder.setDeptId(deptId);
		salesOrder.setDataArea(dataArea);
		return salesOrder.save();
	}

	public boolean insertForApp(Map<String, String[]> paraMap, String orderId, String orderSn, String sellerId,
			String userId, Date date, String deptId, String dataArea) {
		SalesOrder salesOrder = new SalesOrder();
		salesOrder.setId(orderId);
		salesOrder.setOrderSn(orderSn);
		salesOrder.setSellerId(sellerId);
		salesOrder.setBizUserId(userId);
		salesOrder.setCustomerId(StringUtils.getArrayFirst(paraMap.get("customerId")));
		salesOrder.setCustomerTypeId(StringUtils.getArrayFirst(paraMap.get("customerType")));
		salesOrder.setContact(StringUtils.getArrayFirst(paraMap.get("contact")));
		salesOrder.setMobile(StringUtils.getArrayFirst(paraMap.get("mobile")));
		salesOrder.setAddress(StringUtils.getArrayFirst(paraMap.get("address")));
		if (StrKit.notBlank(StringUtils.getArrayFirst(paraMap.get("lat"))))
			salesOrder.setLat(new BigDecimal(StringUtils.getArrayFirst(paraMap.get("lat"))));
		if (StrKit.notBlank(StringUtils.getArrayFirst(paraMap.get("lng"))))
			salesOrder.setLng(new BigDecimal(StringUtils.getArrayFirst(paraMap.get("lng"))));
		if (StrKit.notBlank(StringUtils.getArrayFirst(paraMap.get("location"))))
			salesOrder.setLocation(StringUtils.getArrayFirst(paraMap.get("location")));
		salesOrder.setStatus(Consts.SALES_ORDER_STATUS_DEFAULT);// 待审核
		String total = StringUtils.getArrayFirst(paraMap.get("total"));
		String type = StringUtils.getArrayFirst(paraMap.get("receiveType"));
		String isAllGift = StringUtils.getArrayFirst(paraMap.get("isAllGift"));
		salesOrder.setIsGift(Integer.valueOf(isAllGift));
		salesOrder.setActivityApplyId(StringUtils.getArrayFirst(paraMap.get("activityId")));
		salesOrder.setTotalAmount(new BigDecimal(total));
		salesOrder.setReceiveType(StringUtils.isNumeric(type) ? Integer.parseInt(type) : 1);
		salesOrder.setDeliveryAddress(StringUtils.getArrayFirst(paraMap.get("deliveryAddress")));
		Date deliveryDate = DateUtils.strToDate(StringUtils.getArrayFirst(paraMap.get("deliveryDate")),
				DateUtils.DEFAULT_NORMAL_FORMATTER);
		String totalNumStr = StringUtils.getArrayFirst(paraMap.get("totalNum"));
		BigDecimal totalNum = new BigDecimal(0);
		if (StringUtils.isNotBlank(totalNumStr)) {
			totalNum = new BigDecimal(totalNumStr);
		}
		salesOrder.setTotalCount(totalNum);
		salesOrder.setDeliveryDate(deliveryDate);
		salesOrder.setRemark(StringUtils.getArrayFirst(paraMap.get("remark")));
		salesOrder.setCreateDate(date);
		salesOrder.setDeptId(deptId);
		salesOrder.setDataArea(dataArea);
		return salesOrder.save();
	}

	public boolean updateForApp(Map<String, String[]> paraMap, String userId, Date date) {
		SalesOrder salesOrder = SalesOrderQuery.me().findById(StringUtils.getArrayFirst(paraMap.get("id")));

		String total = StringUtils.getArrayFirst(paraMap.get("total"));
		salesOrder.setTotalAmount(new BigDecimal(total));
		String totalNum = StringUtils.getArrayFirst(paraMap.get("totalNum"));
		salesOrder.setTotalCount(new BigDecimal(totalNum));
		salesOrder.setConfirmUserId(userId);
		salesOrder.setConfirmDate(date);

		salesOrder.setModifyDate(date);
		return salesOrder.update();
	}
	
	public int updateConfirm(String orderId, int status, String userId, Date date) {

		return Db.update("update cc_sales_order set status = ?, confirm_user_id = ?, confirm_date = ? where id = ?",
				status, userId, date, orderId);

	}

	public int batchDelete(String... ids) {
		if (ids != null && ids.length > 0) {
			int deleteCount = 0;
			for (int i = 0; i < ids.length; i++) {
				if (DAO.deleteById(ids[i])) {
					++deleteCount;
				}
			}
			return deleteCount;
		}
		return 0;
	}

	public static String getBillIdBySn(String order_sn) {
		String sql = "SELECT id FROM cc_sales_order WHERE order_sn='" + order_sn + "'";
		return Db.queryStr(sql);
	}

	public String getNewSn(String sellerId) {
		String sql = "SELECT s.order_sn FROM cc_sales_order s WHERE date(s.create_date) = curdate() AND s.seller_id = ? ORDER BY s.create_date desc";
		SalesOrder sales = DAO.findFirst(sql, sellerId);
		String SN = "";
		if (sales == null || StringUtils.isBlank(sales.getOrderSn())) {
			SN = Consts.SALES_ORDER_SN;
		} else {
			String endSN = StringUtils.substringSN(Consts.SALES_ORDER_SN, sales.getOrderSn());
			SN = new BigDecimal(endSN).add(new BigDecimal(1)).toString();
		}
		return SN;
	}

	public boolean checkStatus(String outStockId, String userId, Date date, String total) {
		SalesOrder salesOrder = this.findByOutStockId(outStockId);
		createReceivables(salesOrder, total);
		List<SalesOrderDetail> list = SalesOrderDetailQuery.me().findBySalesOrderId(salesOrder.getId());
		boolean status = true;
		for (SalesOrderDetail salesOrderDetail : list) {
			if (salesOrderDetail.getLeftCount() > 0) {
				status = false;
				break;
			}
		}
		
		Integer outOrderStatus = 0;
		if (status) {
			salesOrder.setStatus(Consts.SALES_ORDER_STATUS_ALL_OUT);
			outOrderStatus = Consts.SALES_OUT_STOCK_STATUS_OUT;
		} else {
			salesOrder.setStatus(Consts.SALES_ORDER_STATUS_PART_OUT);
			outOrderStatus = Consts.SALES_OUT_STOCK_STATUS_PART_OUT;
		}
		salesOrder.setModifyDate(date);
		if (!SalesOutstockQuery.me().updateStatus(outStockId, userId, outOrderStatus, date, total) || !salesOrder.update()) {
			return false;
		}
		return true;
	}
	
	private void createReceivables(SalesOrder order, String total) {
		String customeId = order.getCustomerId();
		BigDecimal totalAmount = new BigDecimal(0);
		if (StrKit.notBlank(total)) {
			totalAmount = new BigDecimal(total);
		}
		Receivables receivables = ReceivablesQuery.me().findByCustomerId(customeId);
		if (receivables == null) {
			receivables = new Receivables();
			receivables.setObjectId(customeId);
			receivables.setObjectType(Consts.RECEIVABLES_OBJECT_TYPE_CUSTOMER);
			receivables.setReceiveAmount(totalAmount);
			receivables.setActAmount(new BigDecimal(0));
			receivables.setBalanceAmount(totalAmount);
			receivables.setDeptId(order.getDeptId());
			receivables.setDataArea(order.getDataArea());
			receivables.setCreateDate(new Date());
		} else {
			receivables.setReceiveAmount(receivables.getReceiveAmount().add(totalAmount));
			receivables.setBalanceAmount(receivables.getBalanceAmount().add(totalAmount));
		}
		receivables.saveOrUpdate();
	}	

	private SalesOrder findByOutStockId(String outStockId) {
		String sql = "SELECT cs.* FROM cc_sales_order cs LEFT JOIN cc_sales_order_join_outstock cj ON cs.id = cj.order_id where cj.outstock_id=? ";
		return DAO.findFirst(sql, outStockId);
	}

	public Page<Record> findBySellerCustomerId(int pageNumber, int pageSize, String customerId, String dataArea) {
		boolean needwhere = true;
		LinkedList<Object> params = new LinkedList<Object>();
		String select = "SELECT o.order_sn, o.total_count, o.create_date, o.total_amount, o.realname, o.`status`,o.data_area,o.receive_type,o.id ";

		StringBuilder sql = new StringBuilder("FROM (SELECT cso.order_sn, cso.total_count, cso.create_date, cso.total_amount, u.realname, cso.`status`,cso.data_area,cso.receive_type,cso.id ");
		sql.append("FROM cc_sales_order cso LEFT JOIN cc_sales_order_detail csod ON cso.id = csod.order_id ");
		sql.append("LEFT JOIN `user` u ON u.id = cso.biz_user_id ");
		sql.append("LEFT JOIN cc_seller_customer csc ON csc.id = cso.customer_id ");

		needwhere = appendIfNotEmpty(sql, "csc.id", customerId, params, needwhere);
		needwhere = appendIfNotEmptyWithLike(sql, "cso.data_area", dataArea, params, needwhere);

		sql.append("GROUP BY cso.id ");
		sql.append("ORDER BY cso.`status`, cso.create_date DESC) AS o");
		return Db.paginate(pageNumber, pageSize, select, sql.toString(), params.toArray());
	}

	public SalesOrder insertOrderByComposition(Map<String, String[]> paraMap, String orderId, String orderSn,
			String sellerId, String userId, Date date, String deptId, String dataArea) {
		SalesOrder salesOrder = new SalesOrder();
		salesOrder.setId(orderId);
		salesOrder.setOrderSn(orderSn);
		salesOrder.setSellerId(sellerId);		
		salesOrder.setBizUserId(userId);
		salesOrder.setCustomerId(StringUtils.getArrayFirst(paraMap.get("customerId")));
		salesOrder.setCustomerTypeId(StringUtils.getArrayFirst(paraMap.get("customerType")));
		salesOrder.setContact(StringUtils.getArrayFirst(paraMap.get("contact")));
		salesOrder.setMobile(StringUtils.getArrayFirst(paraMap.get("mobile")));
		salesOrder.setAddress(StringUtils.getArrayFirst(paraMap.get("address")));
		salesOrder.setStatus(Consts.SALES_ORDER_STATUS_DEFAULT);// 待审核
		String total = StringUtils.getArrayFirst(paraMap.get("total"));
		String type = StringUtils.getArrayFirst(paraMap.get("receiveType"));
		salesOrder.setTotalAmount(new BigDecimal(total));
		salesOrder.setReceiveType(StringUtils.isNumeric(type)? Integer.parseInt(type) : 1);
		salesOrder.setDeliveryAddress(StringUtils.getArrayFirst(paraMap.get("deliveryAddress")));
		Date deliveryDate = DateUtils.strToDate(StringUtils.getArrayFirst(paraMap.get("deliveryDate")), DateUtils.DEFAULT_NORMAL_FORMATTER);
		salesOrder.setDeliveryDate(deliveryDate);
		salesOrder.setRemark(StringUtils.getArrayFirst(paraMap.get("remark")));
		salesOrder.setCreateDate(date);
		salesOrder.setDeptId(deptId);
		salesOrder.setDataArea(dataArea);
		return salesOrder;
	}
	
	public List<SalesOrder> getToDo(String username) {
		StringBuilder sb = new StringBuilder();
		sb.append(" SELECT o.*, c.customer_name, c.contact as ccontact, c.mobile as cmobile, c.address as caddress, ct.name as customerTypeName, a.ID_ taskId, a.NAME_ taskName, a.ASSIGNEE_ assignee, a.CREATE_TIME_ createTime ");
		sb.append(" FROM cc_sales_order o ");
		sb.append(" left join cc_seller_customer cc ON o.customer_id = cc.id ");
		sb.append(" left join cc_customer c on cc.customer_id = c.id ");
		sb.append(" left join cc_customer_type ct on o.customer_type_id = ct.id ");
		sb.append(" JOIN act_ru_task a on o.proc_inst_id = a.PROC_INST_ID_ ");
		sb.append(" where FIND_IN_SET(?, a.ASSIGNEE_) ");
		sb.append(" order by o.create_date DESC");
		return DAO.find(sb.toString(), username);
	}
	
	public Page<Record> getHisProcessList(int pageNumber, int pageSize, String procKey, String username) {
	
		String select = "SELECT o.*, c.customer_name, c.contact as ccontact, c.mobile as cmobile, c.address as caddress, ct.name as customerTypeName,i.TASK_ID_ taskId, i.ACT_NAME_ taskName, i.ASSIGNEE_ assignee, i.END_TIME_ endTime  ";
		
		LinkedList<Object> params = new LinkedList<>();
		StringBuilder sql = new StringBuilder(" FROM cc_sales_order o ");
		sql.append(" left join cc_seller_customer cc ON o.customer_id = cc.id ");
		sql.append(" left join cc_customer c on cc.customer_id = c.id ");
		
		sql.append(" left join cc_customer_type ct on o.customer_type_id = ct.id ");
		sql.append(" JOIN act_hi_actinst i on o.proc_inst_id = i.PROC_INST_ID_ ");
		sql.append(" JOIN act_re_procdef p on p.ID_ = i.PROC_DEF_ID_ ");
		String key = key();
		sql.append(" WHERE i.DURATION_ is not null AND p.KEY_ in ("+key+") ");
		if (StrKit.notBlank(username)) {
			sql.append(" AND FIND_IN_SET(?, i.ASSIGNEE_)");
			params.add(username);
		}
		sql.append(" order by i.END_TIME_ desc ");
		
		return Db.paginate(pageNumber, pageSize, select, sql.toString(), params.toArray());
	}

	public String key() {
		String select="SELECT GROUP_CONCAT(\"'\",p.KEY_,\"'\") key_ FROM act_re_procdef p WHERE p.KEY_ NOT in('"+Consts.PROC_CUSTOMER_VISIT_REVIEW+"','";
		select=select+Consts.PROC_CUSTOMER_REVIEW+"','"+Consts.PROC_ACTIVITY_APPLY_REVIEW+"')";
		return Db.findFirst(select).getStr("key_");
	}
	
	//我的客户类型
	public Page<SalesOrder> findByCustomerType(int pageNumber, int pageSize, String startDate, String endDate,
			String keyword, String userId, boolean ifGift) {
		String product_count="sd.product_count";
		if (keyword.equals("sok.biz_date")) {
			product_count="sd.out_count";
		}
		String select = "SELECT ct.`name`,sp.custom_name,TRUNCATE(((IFNULL(sum("+product_count+"),0)-IFNULL(sum(t1.count), 0)) / p.convert_relate),2) productCountTotal ";
		StringBuilder fromBuilder = new StringBuilder(" FROM cc_sales_order so ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so.id=sojo.order_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_outstock sok ON sok.id=sojo.outstock_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_customer sc ON sc.id = so.customer_id ");
		fromBuilder.append("	 LEFT JOIN cc_customer_type ct ON ct.id = so.customer_type_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_detail sd ON sd.order_id=so.id ");
		fromBuilder.append(" LEFT JOIN cc_seller_product sp ON sp.id=sd.sell_product_id ");
		fromBuilder.append(" LEFT JOIN cc_product p ON p.id = sp.product_id ");
		fromBuilder.append(" LEFT JOIN( SELECT sum(srid.product_count) count , srid.sell_product_id , sri.outstock_id FROM cc_sales_refund_instock_detail srid ");
		fromBuilder.append(" LEFT JOIN cc_sales_refund_instock sri ON srid.refund_instock_id=sri.id ");
		fromBuilder.append(" where sri.status NOT in("+Consts.SALES_REFUND_INSTOCK_DEFUALT+","+Consts.SALES_REFUND_INSTOCK_CANCEL+")");
		fromBuilder.append(" GROUP BY srid.sell_product_id , srid.refund_instock_id) t1 ON t1.outstock_id = sok.id AND t1.sell_product_id = sd.sell_product_id ");
		fromBuilder.append(" WHERE so.biz_user_id='"+userId+"'");
		fromBuilder.append(" and so.status NOT in("+Consts.SALES_ORDER_STATUS_CANCEL+","+Consts.SALES_ORDER_STATUS_REJECT+") and sc.customer_kind ="+Consts.CUSTOMER_KIND_COMMON);
		if (ifGift) {
			fromBuilder.append(" and sd.is_gift=1 ");
		}else {
			fromBuilder.append(" and sd.is_gift=0 ");
		}
		if (keyword.equals("sok.biz_date")) {
			fromBuilder.append(" AND sd.out_count != 0");
		}
		LinkedList<Object> params = new LinkedList<Object>();
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and "+keyword+" >= ?");
			params.add(startDate);
		}
		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and "+keyword+" <= ?");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY ct.id,sp.id");
		
		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());
		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}
	
	//我的产品
	public Page<SalesOrder> findByProduct(int pageNumber, int pageSize, String startDate, String endDate,
			String keyword, String userId, boolean ifGift) {
		String product_count="sd.product_count";
		if (keyword.equals("sok.biz_date")) {
			product_count="sd.out_count";
		}	
		String select = "SELECT sp.custom_name,TRUNCATE(((IFNULL(sum("+product_count+"),0)-IFNULL(sum(t1.count), 0))/ p.convert_relate),2) productCountTotal";
		StringBuilder fromBuilder = new StringBuilder(" FROM cc_sales_order so ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so.id=sojo.order_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_outstock sok ON sok.id=sojo.outstock_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_detail sd ON sd.order_id=so.id ");
		fromBuilder.append(" LEFT JOIN cc_seller_product sp ON sp.id=sd.sell_product_id ");
		fromBuilder.append(" LEFT JOIN cc_product p ON p.id = sp.product_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_customer sc ON sc.id=so.customer_id ");
		fromBuilder.append(" LEFT JOIN( SELECT sum(srid.product_count) count , srid.sell_product_id , sri.outstock_id FROM cc_sales_refund_instock_detail srid ");
		fromBuilder.append(" LEFT JOIN cc_sales_refund_instock sri ON srid.refund_instock_id=sri.id ");
		fromBuilder.append(" where sri.status NOT in("+Consts.SALES_REFUND_INSTOCK_DEFUALT+","+Consts.SALES_REFUND_INSTOCK_CANCEL+")");
		fromBuilder.append(" GROUP BY srid.sell_product_id , srid.refund_instock_id) t1 ON t1.outstock_id = sok.id AND t1.sell_product_id = sd.sell_product_id ");
		fromBuilder.append(" WHERE so.biz_user_id='"+userId+"'");
		fromBuilder.append(" and so.status NOT in("+Consts.SALES_ORDER_STATUS_CANCEL+","+Consts.SALES_ORDER_STATUS_REJECT+") and sc.customer_kind ="+Consts.CUSTOMER_KIND_COMMON);
		if (ifGift) {
			fromBuilder.append(" and sd.is_gift=1 ");
		}else {
			fromBuilder.append(" and sd.is_gift=0 ");
		}
		if (keyword.equals("sok.biz_date")) {
			fromBuilder.append(" AND sd.out_count != 0");
		}
		LinkedList<Object> params = new LinkedList<Object>();
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and "+keyword+" >= ?");
			params.add(startDate);
		}
		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and "+keyword+" <= ?");
			params.add(endDate);
		}
		fromBuilder.append(" GROUP BY sp.id");
		
		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());
		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	//我部门的产品
	public Page<SalesOrder> findByDepartmentProduct(int pageNumber, int pageSize, String startDate, String endDate,
			String keyword, String dataArea, boolean ifGift, String sort, String order) {
		String product_count="sd.product_count";
		if (keyword.equals("sok.biz_date")) {
			product_count="sd.out_count";
		}
		String select = "SELECT cs.seller_name,sp.custom_name,TRUNCATE(((IFNULL(sum("+product_count+"),0)-IFNULL(sum(t1.count), 0)) / p.convert_relate),2) productCountTotal";
		StringBuilder fromBuilder = new StringBuilder(" FROM cc_sales_order so ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so.id=sojo.order_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_outstock sok ON sok.id=sojo.outstock_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_detail sd ON sd.order_id=so.id ");
		fromBuilder.append(" LEFT JOIN cc_seller_product sp ON sp.id=sd.sell_product_id ");
		fromBuilder.append(" LEFT JOIN cc_product p ON p.id = sp.product_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_customer sc ON sc.id=so.customer_id ");
		fromBuilder.append(" LEFT JOIN cc_seller cs ON cs.id=sp.seller_id ");
		fromBuilder.append(" LEFT JOIN( SELECT sum(srid.product_count) count , srid.sell_product_id , sri.outstock_id FROM cc_sales_refund_instock_detail srid ");
		fromBuilder.append(" LEFT JOIN cc_sales_refund_instock sri ON srid.refund_instock_id=sri.id ");
		fromBuilder.append(" where sri.status NOT in("+Consts.SALES_REFUND_INSTOCK_DEFUALT+","+Consts.SALES_REFUND_INSTOCK_CANCEL+")");
		fromBuilder.append(" GROUP BY srid.sell_product_id , srid.refund_instock_id) t1 ON t1.outstock_id = sok.id AND t1.sell_product_id = sd.sell_product_id ");
		fromBuilder.append(" WHERE so.status NOT in("+Consts.SALES_ORDER_STATUS_CANCEL+","+Consts.SALES_ORDER_STATUS_REJECT+") and sc.customer_kind ="+Consts.CUSTOMER_KIND_COMMON);
		if (ifGift) {
			fromBuilder.append(" and sd.is_gift=1 ");
		}else {
			fromBuilder.append(" and sd.is_gift=0 ");
		}
		if (keyword.equals("sok.biz_date")) {
			fromBuilder.append(" AND sd.out_count != 0");
		}
		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = false;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "so.data_area", dataArea, params, needWhere);
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and "+keyword+" >= ?");
			params.add(startDate);
		}
		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and "+keyword+" <= ?");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY sp.id ");
		if (!(sort==""||null==sort)) {
			fromBuilder.append(" order by "+sort+" "+order);
		}
		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());
		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	//我部门的业务员
	public Page<SalesOrder> findByDepartSalesman(int pageNumber, int pageSize, String startDate, String endDate,
			String keyword, String dataArea, boolean ifGift) {
		String product_count="sd.product_count";
		if (keyword.equals("sok.biz_date")) {
			product_count="sd.out_count";
		}
		String select = "SELECT u.realname ,TRUNCATE(((IFNULL(sum("+product_count+"),0)-IFNULL(sum(t1.count), 0)) / p.convert_relate),2) productCountTotal , sp.custom_name ";
		StringBuilder fromBuilder = new StringBuilder(" FROM cc_sales_order so ");
		fromBuilder.append(" LEFT JOIN `user` u ON u.id = so.biz_user_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so.id=sojo.order_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_outstock sok ON sok.id=sojo.outstock_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_detail sd ON sd.order_id=so.id ");
		fromBuilder.append(" LEFT JOIN cc_seller_product sp ON sp.id=sd.sell_product_id ");
		fromBuilder.append(" LEFT JOIN cc_product p ON p.id = sp.product_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_customer sc ON sc.id=so.customer_id ");
		fromBuilder.append(" LEFT JOIN( SELECT sum(srid.product_count) count , srid.sell_product_id , sri.outstock_id FROM cc_sales_refund_instock_detail srid ");
		fromBuilder.append(" LEFT JOIN cc_sales_refund_instock sri ON srid.refund_instock_id=sri.id ");
		fromBuilder.append(" where sri.status NOT in("+Consts.SALES_REFUND_INSTOCK_DEFUALT+","+Consts.SALES_REFUND_INSTOCK_CANCEL+")");
		fromBuilder.append(" GROUP BY srid.sell_product_id , srid.refund_instock_id) t1 ON t1.outstock_id = sok.id AND t1.sell_product_id = sd.sell_product_id ");
		fromBuilder.append(" WHERE so.status NOT in("+Consts.SALES_ORDER_STATUS_CANCEL+","+Consts.SALES_ORDER_STATUS_REJECT+") and sc.customer_kind ="+Consts.CUSTOMER_KIND_COMMON);
		if (ifGift) {
			fromBuilder.append(" and sd.is_gift=1 ");
		}else {
			fromBuilder.append(" and sd.is_gift=0 ");
		}
		if (keyword.equals("sok.biz_date")) {
			fromBuilder.append(" AND sd.out_count != 0");
		}
		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = false;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "so.data_area", dataArea, params, needWhere);
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and "+keyword+" >= ?");
			params.add(startDate);
		}
		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and "+keyword+" <= ?");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY so.biz_user_id ,sp.id");
		
		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());
		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}


	//我部门的直营商
	public Page<SalesOrder> findByManageSeller(int pageNumber, int pageSize, String startDate, String endDate,
			String keyword, String dataArea, boolean ifGift) {
		String product_count="sd.product_count";
		if (keyword.equals("sok.biz_date")) {
			product_count="sd.out_count";
		}
		String select = "SELECT sp.custom_name,s.seller_name,TRUNCATE(((IFNULL(sum("+product_count+"),0)-IFNULL(sum(t1.count), 0)) / p.convert_relate),2) productCountTotal ";
		StringBuilder fromBuilder = new StringBuilder(" FROM cc_sales_order so ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so.id=sojo.order_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_outstock sok ON sok.id=sojo.outstock_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_detail sd ON sd.order_id=so.id ");
		fromBuilder.append(" LEFT JOIN cc_seller s ON s.id=so.seller_id ");
		fromBuilder.append(" LEFT JOIN department d ON d.id=s.dept_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_product sp ON sp.id=sd.sell_product_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_customer sc ON sc.id=so.customer_id ");
		fromBuilder.append(" LEFT JOIN cc_product p ON p.id = sp.product_id ");
		fromBuilder.append(" LEFT JOIN( SELECT sum(srid.product_count) count , srid.sell_product_id , sri.outstock_id FROM cc_sales_refund_instock_detail srid ");
		fromBuilder.append(" LEFT JOIN cc_sales_refund_instock sri ON srid.refund_instock_id=sri.id ");
		fromBuilder.append(" where sri.status NOT in("+Consts.SALES_REFUND_INSTOCK_DEFUALT+","+Consts.SALES_REFUND_INSTOCK_CANCEL+")");
		fromBuilder.append(" GROUP BY srid.sell_product_id , srid.refund_instock_id) t1 ON t1.outstock_id = sok.id AND t1.sell_product_id = sd.sell_product_id ");
		fromBuilder.append(" WHERE sc.customer_kind ="+Consts.CUSTOMER_KIND_COMMON);
		fromBuilder.append(" and so.status NOT in("+Consts.SALES_ORDER_STATUS_CANCEL+","+Consts.SALES_ORDER_STATUS_REJECT+")");
		if (ifGift) {
			fromBuilder.append(" and sd.is_gift=1 ");
		}else {
			fromBuilder.append(" and sd.is_gift=0 ");
		}
		if (keyword.equals("sok.biz_date")) {
			fromBuilder.append(" AND sd.out_count != 0");
		}
		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = false;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " so.data_area", dataArea, params, needWhere);
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and "+keyword+" >= ?");
			params.add(startDate);
		}
		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and "+keyword+" <= ?");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY d.id,sp.id");
		
		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());
		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	//经销商的直营商的采购
	public Page<SalesOrder> findBypurSeller(int pageNumber, int pageSize, String startDate, String endDate,
			String keyword, String dataArea, boolean ifGift) {
		String product_count="sd.product_count";
		if (keyword.equals("sok.biz_date")) {
			product_count="sd.out_count";
		}
		String select = "SELECT sp.custom_name spname,c.customer_name cname,TRUNCATE(((IFNULL(sum("+product_count+"),0)-IFNULL(sum(t1.count), 0)) / p.convert_relate),2) productCountTotal ";
		StringBuilder fromBuilder = new StringBuilder(" FROM cc_sales_order so ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so.id=sojo.order_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_outstock sok ON sok.id=sojo.outstock_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_detail sd ON sd.order_id=so.id ");
		fromBuilder.append(" LEFT JOIN cc_seller s ON s.id=so.seller_id ");
		fromBuilder.append(" LEFT JOIN department d ON d.id=s.dept_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_product sp ON sp.id=sd.sell_product_id ");
		fromBuilder.append(" LEFT JOIN cc_product p ON p.id = sp.product_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_customer sc ON sc.id=so.customer_id ");
		fromBuilder.append(" LEFT JOIN cc_customer c ON c.id = sc.customer_id ");
		fromBuilder.append(" LEFT JOIN( SELECT sum(srid.product_count) count , srid.sell_product_id , sri.outstock_id FROM cc_sales_refund_instock_detail srid ");
		fromBuilder.append(" LEFT JOIN cc_sales_refund_instock sri ON srid.refund_instock_id=sri.id ");
		fromBuilder.append(" where sri.status NOT in("+Consts.SALES_REFUND_INSTOCK_DEFUALT+","+Consts.SALES_REFUND_INSTOCK_CANCEL+")");
		fromBuilder.append(" GROUP BY srid.sell_product_id , srid.refund_instock_id) t1 ON t1.outstock_id = sok.id AND t1.sell_product_id = sd.sell_product_id ");
		fromBuilder.append(" WHERE sc.customer_kind ="+Consts.CUSTOMER_KIND_SELLER);
		fromBuilder.append(" and so.status NOT in("+Consts.SALES_ORDER_STATUS_CANCEL+","+Consts.SALES_ORDER_STATUS_REJECT+")");
		if (ifGift) {
			fromBuilder.append(" and sd.is_gift=1 ");
		}else {
			fromBuilder.append(" and sd.is_gift=0 ");
		}
		if (keyword.equals("sok.biz_date")) {
			fromBuilder.append(" AND sd.out_count != 0");
		}
		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = false;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " so.data_area", dataArea, params, needWhere);
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and "+keyword+" >= ?");
			params.add(startDate);
		}
		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and "+keyword+" <= ?");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY d.id,sp.id");
		
		if (params.isEmpty())
			return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString());
		return DAO.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}
	
	//我部门的直营商详情
	public List<Record> findByMSellerDetail( String startDate, String endDate,
			String keyword, String dataArea, String sellerId, boolean ifGift) {
		String product_count="sd.product_count";
		if (keyword.equals("sok.biz_date")) {
			product_count="sd.out_count";
		}
		List<Record> records = SellerProductQuery.me().findConvertRelate(sellerId);
		StringBuilder fromBuilder=new StringBuilder("SELECT ");
		for (Record record : records) {
			String customName=record.getStr("custom_name");
			String convertRelate = record.getStr("convert_relate");
			String sellerProductId = record.getStr("id");
			fromBuilder.append(" TRUNCATE((( sum( CASE sp.id WHEN '"+sellerProductId+"' THEN "+product_count+" ELSE 0 END)) -IFNULL((SELECT sum(srid.product_count) from cc_sales_order so1");
			fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so1.id = sojo.order_id LEFT JOIN cc_sales_refund_instock sri ON sri.outstock_id=sojo.outstock_id ");
			fromBuilder.append(" LEFT JOIN cc_sales_order_detail sod ON sod.order_id=so1.id LEFT JOIN cc_sales_refund_instock_detail srid ON srid.refund_instock_id = sri.id AND srid.sell_product_id=sod.sell_product_id");
			fromBuilder.append(" WHERE srid.sell_product_id ='"+sellerProductId+"' AND so1.create_date >='"+startDate+"' AND so1.create_date <= '"+endDate+"' and so1.seller_id=so.seller_id ");
			if (ifGift) {
				fromBuilder.append("and sod.is_gift=1");
			}else {
				fromBuilder.append("and sod.is_gift=0");
			}
			fromBuilder.append(" and sri.status NOT in("+Consts.SALES_REFUND_INSTOCK_DEFUALT+","+Consts.SALES_REFUND_INSTOCK_CANCEL+")),0))/"+convertRelate+" , 2) '"+customName+"' ,");
		}
		fromBuilder.append("s.seller_name '直营商名称'");
		fromBuilder.append(" FROM cc_sales_order so ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so.id=sojo.order_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_outstock sok ON sok.id=sojo.outstock_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_detail sd ON sd.order_id=so.id ");
		fromBuilder.append(" LEFT JOIN cc_seller s ON s.id=so.seller_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_customer sc ON sc.id = so.customer_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_product sp ON sp.id=sd.sell_product_id ");
		fromBuilder.append(" WHERE sc.customer_kind ="+Consts.CUSTOMER_KIND_COMMON);
		fromBuilder.append(" and so.status NOT in("+Consts.SALES_ORDER_STATUS_CANCEL+","+Consts.SALES_ORDER_STATUS_REJECT+")");
		if (ifGift) {
			fromBuilder.append(" and sd.is_gift=1 ");
		}else {
			fromBuilder.append(" and sd.is_gift=0 ");
		}
		fromBuilder.append(" AND so.data_area like '"+ dataArea+"' ");
		fromBuilder.append(" AND "+ keyword+" >= '"+startDate+"'");
		fromBuilder.append(" AND "+ keyword+" <= '"+endDate+"'");
		if (keyword.equals("sok.biz_date")) {
			fromBuilder.append(" AND sd.out_count != 0");
		}
		fromBuilder.append(" GROUP BY s.id");
		return Db.find(fromBuilder.toString());
	}

	//我部门的业务员详情
	public List<Record> findByMSalesmanDetail(String startDate, String endDate,
			String keyword, String dataArea, String sellerId, boolean ifGift) {
		String product_count="sd.product_count";
		if (keyword.equals("sok.biz_date")) {
			product_count="sd.out_count";
		}
		List<Record> records = SellerProductQuery.me().findConvertRelate(sellerId);
		StringBuilder fromBuilder=new StringBuilder("SELECT ");
		for (Record record : records) {
			String customName=record.getStr("custom_name");
			String convertRelate = record.getStr("convert_relate");
			String sellerProductId = record.getStr("id");
			fromBuilder.append(" TRUNCATE((( sum( CASE sp.id WHEN '"+sellerProductId+"' THEN "+product_count+" ELSE 0 END)) -IFNULL((SELECT sum(srid.product_count) from cc_sales_order so1");
			fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so1.id = sojo.order_id LEFT JOIN cc_sales_refund_instock sri ON sri.outstock_id=sojo.outstock_id ");
			fromBuilder.append(" LEFT JOIN cc_sales_order_detail sod ON sod.order_id=so1.id LEFT JOIN cc_sales_refund_instock_detail srid ON srid.refund_instock_id = sri.id AND srid.sell_product_id=sod.sell_product_id");
			fromBuilder.append(" WHERE srid.sell_product_id ='"+sellerProductId+"' AND so1.create_date >='"+startDate+"' AND so1.create_date <= '"+endDate+"' and so1.biz_user_id=so.biz_user_id ");
			if (ifGift) {
				fromBuilder.append("and sod.is_gift=1");
			}else {
				fromBuilder.append("and sod.is_gift=0");
			}
			fromBuilder.append(" and sri.status NOT in("+Consts.SALES_REFUND_INSTOCK_DEFUALT+","+Consts.SALES_REFUND_INSTOCK_CANCEL+")),0))/"+convertRelate+" , 2) '"+customName+"' ,");
		}
		fromBuilder.append("u.realname '业务员名称'");
		fromBuilder.append(" FROM cc_sales_order so ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so.id=sojo.order_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_outstock sok ON sok.id=sojo.outstock_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_detail sd ON sd.order_id=so.id ");
		fromBuilder.append(" LEFT JOIN `user` u ON u.id = so.biz_user_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_customer sc ON sc.id = so.customer_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_product sp ON sp.id=sd.sell_product_id ");
		fromBuilder.append(" WHERE so.status NOT in("+Consts.SALES_ORDER_STATUS_CANCEL+","+Consts.SALES_ORDER_STATUS_REJECT+") and sc.customer_kind ="+Consts.CUSTOMER_KIND_COMMON);
		if (ifGift) {
			fromBuilder.append(" and sd.is_gift=1 ");
		}else {
			fromBuilder.append(" and sd.is_gift=0 ");
		}
		fromBuilder.append(" AND so.data_area like '"+ dataArea+"' ");
		fromBuilder.append(" AND "+ keyword+" >= '"+startDate+"'");
		fromBuilder.append(" AND "+ keyword+" <= '"+endDate+"'");
		if (keyword.equals("sok.biz_date")) {
			fromBuilder.append(" AND sd.out_count != 0");
		}
		fromBuilder.append(" GROUP BY u.id");
		return Db.find(fromBuilder.toString());
	}

	//我客户的详情
	public List<Record> findByCustomerDetail(String startDate, String endDate, String keyword, String userId,
			String sellerId, boolean ifGift) {
		String product_count="sd.product_count";
		if (keyword.equals("sok.biz_date")) {
			product_count="sd.out_count";
		}
		List<Record> records = SellerProductQuery.me().findConvertRelate(sellerId);
		StringBuilder fromBuilder=new StringBuilder("SELECT ");
		for (Record record : records) {
			String customName=record.getStr("custom_name");
			String convertRelate = record.getStr("convert_relate");
			String sellerProductId = record.getStr("id");
			fromBuilder.append(" TRUNCATE((( sum( CASE sp.id WHEN '"+sellerProductId+"' THEN "+product_count+" ELSE 0 END)) -IFNULL((SELECT sum(srid.product_count) from cc_sales_order so1");
			fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so1.id = sojo.order_id LEFT JOIN cc_sales_refund_instock sri ON sri.outstock_id=sojo.outstock_id ");
			fromBuilder.append(" LEFT JOIN cc_sales_order_detail sod ON sod.order_id=so1.id LEFT JOIN cc_sales_refund_instock_detail srid ON srid.refund_instock_id = sri.id AND srid.sell_product_id=sod.sell_product_id");
			fromBuilder.append(" WHERE srid.sell_product_id ='"+sellerProductId+"' AND so1.create_date >='"+startDate+"' AND so1.create_date <= '"+endDate+"' and so1.customer_id=so.customer_id AND so1.biz_user_id = '"+userId);
			if (ifGift) {
				fromBuilder.append("' and sod.is_gift=1");
			}else {
				fromBuilder.append("' and sod.is_gift=0");
			}
			fromBuilder.append(" and sri.status NOT in("+Consts.SALES_REFUND_INSTOCK_DEFUALT+","+Consts.SALES_REFUND_INSTOCK_CANCEL+")),0))/"+convertRelate+" , 2) '"+customName+"' ,");
		}
		fromBuilder.append("c.customer_name '客户名称',sc.id ");
		fromBuilder.append(" FROM cc_sales_order so ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so.id = sojo.order_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_outstock sok ON sok.id = sojo.outstock_id ");
		fromBuilder.append(" LEFT JOIN cc_seller_customer sc ON sc.id = so.customer_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_detail sd ON sd.order_id = so.id ");
		fromBuilder.append(" LEFT JOIN cc_seller_product sp ON sp.id = sd.sell_product_id ");
		fromBuilder.append(" LEFT JOIN cc_product p ON p.id = sp.product_id ");
		fromBuilder.append(" LEFT JOIN cc_customer c ON c.id = sc.customer_id ");
		fromBuilder.append(" WHERE so.biz_user_id ='"+userId+"'");
		fromBuilder.append(" and so.status NOT in("+Consts.SALES_ORDER_STATUS_CANCEL+","+Consts.SALES_ORDER_STATUS_REJECT+") and sc.customer_kind ="+Consts.CUSTOMER_KIND_COMMON);
		if (ifGift) {
			fromBuilder.append(" and sd.is_gift=1 ");
		}else {
			fromBuilder.append(" and sd.is_gift=0 ");
		}
		fromBuilder.append(" AND "+ keyword+" >= '"+startDate+"'");
		fromBuilder.append(" AND "+ keyword+" <= '"+endDate+"'");
		if (keyword.equals("sok.biz_date")) {
			fromBuilder.append(" AND sd.out_count != 0");
		}
		fromBuilder.append(" GROUP BY sc.id");
		return Db.find(fromBuilder.toString());
	}
	
	//统计今日订单量 销售额
	public Record queryCountToDayOrders(String userId,String dataArea) {
		StringBuilder fromBuilder = new StringBuilder(" select count(cso.order_sn) count_order,sum(cso.total_amount) sum_amount from cc_sales_order cso inner join `user` u on u.id = cso.biz_user_id ");
		fromBuilder.append("where DATE_FORMAT(cso.create_date, '%Y-%m-%d') = DATE_FORMAT(NOW(), '%Y-%m-%d') and cso.status NOT in("+Consts.SALES_ORDER_STATUS_CANCEL+",");
		fromBuilder.append(Consts.SALES_ORDER_STATUS_REJECT+") and u.data_area like '"+dataArea+"' ");
		return Db.findFirst(fromBuilder.toString());
	}
	
	//统计业务员当日 当月 销售额排行(前5)
		public List<Record> querysalesManAmountBy(String selDataArea,String by,String desc){
			StringBuilder fromBuilder = new StringBuilder("select t1.biz_user_id,t1.title,t1.sumamount from (SELECT cso.biz_user_id , u.realname title , SUM(so.total_amount) sumamount ");
			fromBuilder.append(" FROM cc_sales_outstock so ");
			fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON sojo.outstock_id = so.id ");
			fromBuilder.append(" LEFT JOIN cc_sales_order cso ON cso.id = sojo.order_id ");
			fromBuilder.append(" LEFT JOIN `user` u ON u.id = cso.biz_user_id ");
			if(by.equals("day")) {
				fromBuilder.append(" where DATE_FORMAT(so.create_date, '%Y-%m-%d') = DATE_FORMAT(NOW(), '%Y-%m-%d') ");
			}else if(by.equals("month")) {
				fromBuilder.append(" where so.create_date like CONCAT(DATE_FORMAT(NOW(),'%Y-%m'),'%') ");
			}
			fromBuilder.append(" and cso.data_area like '"+selDataArea+"%' ");
			fromBuilder.append(" GROUP BY cso.biz_user_id ORDER BY sumamount ");
			fromBuilder.append(desc+" limit 0,5 ");
			fromBuilder.append(") t1 ORDER BY t1.sumamount asc ");
			return Db.find(fromBuilder.toString());
		}

	public Long findTotalOrdersCountByDataArea(String dataArea) {
		StringBuilder sql = new StringBuilder("SELECT COUNT(o.id) ");
		sql.append("FROM `cc_sales_order` o ");
		sql.append("JOIN cc_seller_customer c on o.customer_id = c.id ");
		sql.append("WHERE c.customer_kind = '100401' AND o.`status` in (2000, 3000) AND o.data_area like ?");
		return Db.queryLong(sql.toString(), dataArea);
	}	
	
	public Record getMyOrderAmount(String startDate, String endDate, String dayTag, String customerType,
			String deptId, String sellerId, String userId, String dataArea, String print) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.total_count),0) as productCount, IFNULL(SUM(cc.total_amount),0) as totalAmount, count(*) as orderCount FROM cc_sales_order cc ");
		fromBuilder.append("LEFT JOIN cc_customer_type ct on cc.customer_type_id = ct.id ");		
		boolean needWhere = true;
		if (StringUtils.isBlank(userId)) {
			if (StringUtils.isNotBlank(deptId)) {
				needWhere = appendIfNotEmpty(fromBuilder, " cc.dept_id", deptId, params, needWhere);
			} else {
				needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
				needWhere = appendIfNotEmpty(fromBuilder, " cc.seller_id", sellerId, params, needWhere);
			}			
		}
		needWhere = appendIfNotEmpty(fromBuilder, "cc.biz_user_id", userId, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "cc.customer_type_id", customerType, params, needWhere);
		
		if (needWhere) {
			fromBuilder.append(" where cc.status not in (1001,1002)");
		} else {
			fromBuilder.append(" and cc.status not in (1001,1002)");
		}
		
		if (StrKit.notBlank(print)) {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cc.print_time >= ?");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cc.print_time <= ?");
				params.add(endDate);
			}
		} else {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cc.create_date >= ?");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cc.create_date <= ?");
				params.add(endDate);
			}
		}

		
		if (params.isEmpty())
			return Db.findFirst(fromBuilder.toString());

		return Db.findFirst(fromBuilder.toString(), params.toArray());
	}
	
	@SuppressWarnings("unused")
	private void refundFromBuilderAppend(StringBuilder fromBuilder) {
		fromBuilder.append("LEFT JOIN (SELECT o.id, IFNULL(t1.refundCount,0) as refundCount,IFNULL(t1.refundProductCount,0) as refundProductCount, cso.order_id FROM cc_sales_outstock o ");
		fromBuilder.append("LEFT JOIN (SELECT cr.outstock_id, SUM(cr.total_reject_amount) as refundCount, SUM(t2.refundProductCount) as refundProductCount  FROM cc_sales_refund_instock cr ");
		fromBuilder.append("LEFT JOIN (SELECT SUM(cri.reject_product_count/cp.convert_relate) as refundProductCount, cri.refund_instock_id FROM cc_sales_refund_instock_detail cri ");
		fromBuilder.append("LEFT JOIN cc_seller_product sp ON sp.id = cri.sell_product_id ");
		fromBuilder.append("LEFT JOIN cc_product cp ON cp.id = sp.product_id ");
		fromBuilder.append("GROUP BY cri.refund_instock_id) t2 ");
		fromBuilder.append("ON t2.refund_instock_id = cr.id WHERE cr.biz_date is not null ");
		fromBuilder.append("GROUP BY cr.outstock_id) t1 ON t1.outstock_id = o.id ");
		fromBuilder.append("LEFT JOIN cc_sales_order_join_outstock cso on cso.outstock_id = o.id ");
		fromBuilder.append("GROUP BY cso.order_id) t3 ON t3.order_id = cc.id ");
	}

	public Record getMyOrderAmountByOutStock(String startDate, String endDate, String dayTag, String customerType,
			String deptId, String sellerId, String userId, String dataArea) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(t1.productCount), 0) AS productCount, IFNULL(SUM(cc.total_amount),0) as totalAmount, count(*) as orderCount FROM cc_sales_outstock cc ");
		fromBuilder.append("LEFT JOIN (SELECT SUM(cd.product_count/cp.convert_relate) as productCount, cd.outstock_id FROM cc_sales_outstock_detail cd ");
		fromBuilder.append("LEFT JOIN cc_seller_product sp ON sp.id = cd.sell_product_id ");
		fromBuilder.append("LEFT JOIN cc_product cp on cp.id = sp.product_id ");
		fromBuilder.append("GROUP BY cd.outstock_id) t1 on t1.outstock_id = cc.id ");
		fromBuilder.append("LEFT JOIN cc_customer_type ct on cc.customer_type_id = ct.id ");		
		fromBuilder.append("LEFT JOIN cc_sales_order_join_outstock cso ON cso.outstock_id = cc.id ");
		fromBuilder.append("LEFT JOIN cc_sales_order cs ON cs.id = cso.order_id ");
		
		boolean needWhere = true;
		if (StringUtils.isBlank(userId)) {
			if (StringUtils.isNotBlank(deptId)) {
				needWhere = appendIfNotEmpty(fromBuilder, " cc.dept_id", deptId, params, needWhere);
			} else {
				needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
				needWhere = appendIfNotEmpty(fromBuilder, " cc.seller_id", sellerId, params, needWhere);
			}			
		}
		needWhere = appendIfNotEmpty(fromBuilder, "cs.biz_user_id", userId, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "cc.customer_type_id", customerType, params, needWhere);
		
		if (needWhere) {
			fromBuilder.append(" where cc.status != ? ");
		} else {
			fromBuilder.append(" and cc.status != ? ");
		}
		params.add(Consts.SALES_OUT_STOCK_STATUS_DEFUALT);
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.biz_date >= ?");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.biz_date <= ?");
			params.add(endDate);
		}

		if (params.isEmpty())
			return Db.findFirst(fromBuilder.toString());

		return Db.findFirst(fromBuilder.toString(), params.toArray());
	}	

	public List<Record> getMyOrderStatucCount(String startDate, String endDate, String dayTag, String sellerId,
			String dataArea) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT (case ");
		fromBuilder.append("when cc.`status`='1000' then '已审核' ");
		fromBuilder.append("when cc.`status`='0' then '待审核' ");
		fromBuilder.append("when cc.`status`='1001' then '已取消'");
		fromBuilder.append("when cc.`status`='1002' then '已拒绝' ");
		fromBuilder.append("when cc.`status`='2000' then '部分出库' ");
		fromBuilder.append("when cc.`status`='2001' then '部分出库-订单关闭' ");
		fromBuilder.append("when cc.`status`='3000' then '全部出库' ");
		fromBuilder.append("when cc.`status`='3001' then '全部出库-订单关闭' ");
		fromBuilder.append("else '暂无记录' ");
		fromBuilder.append("end) as status, ");
		fromBuilder.append("COUNT(cc.`status`) as count FROM cc_sales_order cc ");
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " cc.seller_id", sellerId, params, needWhere);
		if (needWhere) {
			fromBuilder.append(" where cc.status not in (1001,1002)");
		} else {
			fromBuilder.append(" and cc.status not in (1001,1002)");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.create_date >= ?");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.create_date <= ?");
			params.add(endDate);
		}
		
		fromBuilder.append("GROUP BY status");
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}

	public List<Record> getMyOrderByCustomer(String startDate, String endDate, String dayTag, String customerType, String sellerId,
			String userId, String dataArea, String orderTag, String print) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.total_count),0) as productCount, IFNULL(sum(cc.total_amount),0) as totalAmount, ");
		fromBuilder.append("COUNT(*) as orderCount, cu.customer_name, cc.customer_id as customerId FROM cc_sales_order cc ");
		fromBuilder.append("LEFT JOIN cc_seller_customer cs on cs.id = cc.customer_id ");
		fromBuilder.append("LEFT JOIN cc_customer cu on cu.id = cs.customer_id ");
		fromBuilder.append("LEFT JOIN cc_customer_type ct on cc.customer_type_id = ct.id ");
		boolean needWhere = true;
		
		if (StrKit.notBlank(userId)) {
			needWhere = appendIfNotEmpty(fromBuilder, " cc.biz_user_id", userId, params, needWhere);
		} else {
			needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
			needWhere = appendIfNotEmpty(fromBuilder, " cc.seller_id", sellerId, params, needWhere);
		}
		needWhere = appendIfNotEmpty(fromBuilder, "cc.customer_type_id", customerType, params, needWhere);
		
		if (needWhere) {
			fromBuilder.append(" where cc.status not in (1001,1002)");
		} else {
			fromBuilder.append(" and cc.status not in (1001,1002)");
		}
		
		if (StrKit.notBlank(print)) {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cc.print_time >= ?");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cc.print_time <= ?");
				params.add(endDate);
			}
		} else {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cc.create_date >= ?");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cc.create_date <= ?");
				params.add(endDate);
			}
		}		

		fromBuilder.append("GROUP BY cu.customer_name ");
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag +" desc ");
		} else {
			fromBuilder.append("ORDER BY totalAmount desc ");
		}
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}

	public List<Record> getMyOrderByProduct(String startDate, String endDate, String dayTag, String productType, String sellerId, 
			String userId, String customerId, String isGift, String dataArea, String deptId, String orderTag, String isHide, String print) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.product_amount),0) as totalAmount, IFNULL(SUM(cc.product_count/cp.convert_relate),0) as productCount, ");
		fromBuilder.append("COUNT(*) as orderCount, cs.custom_name FROM cc_sales_order_detail cc ");
		fromBuilder.append("LEFT JOIN cc_seller_product cs on cc.sell_product_id = cs.id ");
		fromBuilder.append("LEFT JOIN cc_product cp on cp.id = cs.product_id ");
		fromBuilder.append("LEFT JOIN cc_sales_order c on c.id = cc.order_id ");
		if (StrKit.notBlank(productType)) {
			fromBuilder.append(" JOIN cc_goods g ON cp.goods_id = g.id ");
			fromBuilder.append(" JOIN cc_goods_category gc ON g.goods_category_id = gc.id ");
			fromBuilder.append(" JOIN cc_goods_type gt on g.goods_type_id = gt.id ");
		}
		
		boolean needWhere = true;
		if (StrKit.isBlank(userId)) {
			needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
			needWhere = appendIfNotEmpty(fromBuilder, " c.seller_id", sellerId, params, needWhere);
		}
		if (StrKit.notBlank(isHide)) {
			needWhere = appendIfNotEmpty(fromBuilder, "cs.is_source", Consts.SELLER_PRODUCT_SOURCE_DEALER, params, needWhere);
		}
		needWhere = appendIfNotEmpty(fromBuilder, " gt.id", productType, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "c.biz_user_id", userId, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "c.customer_id", customerId, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "cc.dept_id", deptId, params, needWhere);
		
		if (needWhere) {
			fromBuilder.append(" where c.status not in (1001,1002) ");
		} else {
			fromBuilder.append(" and c.status not in (1001,1002) ");
		}
		
		if (StrKit.notBlank(isGift)) {
			fromBuilder.append(" and cc.is_gift = 1 ");
		} else {
			fromBuilder.append(" and cc.is_gift = 0 ");
		}
		
		if (StrKit.notBlank(print)) {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and c.print_time >= ?");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and c.print_time <= ?");
				params.add(endDate);
			}
		} else {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cc.create_date >= ? ");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cc.create_date <= ? ");
				params.add(endDate);
			}
		}		

		fromBuilder.append("GROUP BY cs.custom_name ");
		
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag +" desc ");
		} else {
			fromBuilder.append("ORDER BY totalAmount desc ");
		}
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}

	public Record getMyRefundOrderCount(String startDate, String endDate, String dayTag, String sellerId,
			String dataArea) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.total_reject_amount),0) as totalAmount, COUNT(*) as totalCount FROM cc_sales_refund_instock cc ");
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " cc.seller_id", sellerId, params, needWhere);
		if (needWhere) {
			fromBuilder.append(" where cc.status != 1001");
		} else {
			fromBuilder.append(" and cc.status != 1001");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.create_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.create_date <= ? ");
			params.add(endDate);
		}
		if (params.isEmpty())
			return Db.findFirst(fromBuilder.toString());

		return Db.findFirst(fromBuilder.toString(), params.toArray());
	}

	public Record getProductAmountByMyOrder(String startDate, String endDate, String dayTag, String productType,
			String sellerId, String dataArea) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.product_amount),0) as totalAmount, IFNULL(SUM(cc.product_count/cp.convert_relate),0) as productCount, ");
		fromBuilder.append("COUNT(*) as orderCount FROM cc_sales_order_detail cc ");
		fromBuilder.append("LEFT JOIN cc_seller_product cs on cc.sell_product_id = cs.id ");
		fromBuilder.append("LEFT JOIN cc_product cp on cp.id = cs.product_id ");
		fromBuilder.append("LEFT JOIN cc_sales_order c on c.id = cc.order_id ");
		if (StrKit.notBlank(productType)) {
			fromBuilder.append(" JOIN cc_goods g ON cp.goods_id = g.id ");
			fromBuilder.append(" JOIN cc_goods_category gc ON g.goods_category_id = gc.id ");
			fromBuilder.append(" JOIN cc_goods_type gt on g.goods_type_id = gt.id ");
		}
		
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " c.seller_id", sellerId, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " gt.id", productType, params, needWhere);
		
		if (needWhere) {
			fromBuilder.append(" where c.status not in (1001,1002) and cc.is_gift = 0 ");
		} else {
			fromBuilder.append(" and c.status not in (1001,1002) and cc.is_gift = 0 ");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.create_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.create_date <= ? ");
			params.add(endDate);
		}
		if (params.isEmpty())
			return Db.findFirst(fromBuilder.toString());

		return Db.findFirst(fromBuilder.toString(), params.toArray());
	}
	
	public List<Record> getUserRank(String startDate, String endDate, String dayTag, String deptId, String sellerId,
			String orderTag, String dataArea, String print) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.total_amount),0) as totalAmount, IFNULL(SUM(cc.total_count),0) as productCount, ");
		fromBuilder.append("COUNT(cc.id) as orderCount, u.realname, u.avatar, u.id ");
		fromBuilder.append("FROM `user` u LEFT JOIN cc_sales_order cc ON cc.biz_user_id = u.id ");
		boolean needWhere = true;
		if (StringUtils.isNotBlank(deptId)) {
			needWhere = appendIfNotEmpty(fromBuilder, " u.department_id", deptId, params, needWhere);
		} else {
			needWhere = appendIfNotEmptyWithLike(fromBuilder, " u.data_area", dataArea, params, needWhere);
			needWhere = appendIfNotEmpty(fromBuilder, " cc.seller_id", sellerId, params, needWhere);
		}
		if (needWhere) {
			fromBuilder.append(" where cc.status not in (1001,1002)");
		} else {
			fromBuilder.append(" and cc.status not in (1001,1002)");
		}
		
		if (StrKit.notBlank(print)) {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cc.print_time >= ? ");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cc.print_time <= ? ");
				params.add(endDate);
			}
		} else {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cc.create_date >= ? ");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cc.create_date <= ? ");
				params.add(endDate);
			}
		}

		fromBuilder.append("GROUP BY u.id ");
		
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag + " desc ");
		} else {
			fromBuilder.append("ORDER BY totalAmount desc ");
		}
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}
	
	public List<Record> getUserRankByOutStock(String startDate, String endDate, String dayTag, String deptId,
			String sellerId, String orderTag, String dataArea) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT u.realname, u.avatar, u.id, ");
		fromBuilder.append("SUM(o.total_amount) as totalAmount,IFNULL(t1.productCount,0) as productCount, COUNT(o.id) as orderCount FROM cc_sales_outstock o ");
		fromBuilder.append("LEFT JOIN (SELECT SUM(cd.product_count/cp.convert_relate) as productCount, cd.outstock_id FROM cc_sales_outstock_detail cd ");
		fromBuilder.append("LEFT JOIN cc_seller_product sp ON sp.id = cd.sell_product_id ");
		fromBuilder.append("LEFT JOIN cc_product cp on cp.id = sp.product_id ");
		fromBuilder.append("GROUP BY cd.outstock_id) t1 on t1.outstock_id = o.id ");
		fromBuilder.append("LEFT JOIN cc_sales_order_join_outstock cso ON cso.outstock_id = o.id ");
		fromBuilder.append("LEFT JOIN cc_sales_order cc ON cc.id = cso.order_id ");
		fromBuilder.append("LEFT JOIN `user` u ON u.id = cc.biz_user_id ");
		boolean needWhere = true;
		if (StringUtils.isNotBlank(deptId)) {
			needWhere = appendIfNotEmpty(fromBuilder, " u.department_id", deptId, params, needWhere);
		} else {
			needWhere = appendIfNotEmptyWithLike(fromBuilder, " u.data_area", dataArea, params, needWhere);
			needWhere = appendIfNotEmpty(fromBuilder, " o.seller_id", sellerId, params, needWhere);
		}
		if (needWhere) {
			fromBuilder.append(" where o.`status` != ? ");
		} else {
			fromBuilder.append(" and o.`status` != ? ");
		}
		params.add(Consts.SALES_OUT_STOCK_STATUS_DEFUALT);
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and o.biz_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and o.biz_date <= ? ");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY u.id ");
		
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag + " desc ");
		} else {
			fromBuilder.append("ORDER BY productCount desc ");
		}
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}	

	//商品销售排行 当日or汇总
		public List<Record> queryGoodsSales(String selDataArea,boolean toDay,String desc){
			StringBuilder fromBuilder = new StringBuilder("select t1.id,t1.title,t1.countgoods,t1.sumamount from (SELECT csp.id , csp.custom_name title , sum(csod.product_count) countgoods , sum(csod.product_amount) sumamount ");
			fromBuilder.append(" FROM cc_sales_outstock so ");
			fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON sojo.outstock_id = so.id ");
			fromBuilder.append(" LEFT JOIN cc_sales_order cso ON cso.id = sojo.order_id ");
			fromBuilder.append(" LEFT JOIN cc_sales_outstock_detail csod ON csod.outstock_id=so.id ");
			fromBuilder.append(" LEFT JOIN cc_seller_product csp ON csod.sell_product_id = csp.id ");
			fromBuilder.append(" where csod.data_area like '"+selDataArea+"' ");
			if(toDay) {
				fromBuilder.append("and DATE_FORMAT(csod.create_date, '%Y-%m-%d') = DATE_FORMAT(NOW(), '%Y-%m-%d') ");
			}
			fromBuilder.append("group by csp.id order by sumamount ");
			fromBuilder.append(desc+" limit 0,5) t1 ");
			fromBuilder.append(" ORDER BY t1.sumamount asc ");
			return Db.find(fromBuilder.toString());
		}
		
		//直营商销售排行 当日/当月
		public List<Record> querySellerSales(String selDataArea,String by,String desc){
			StringBuilder fromBuilder = new StringBuilder("select t1.seller_id,t1.title,t1.sumamount from  (SELECT cso.seller_id , cs.seller_name title , sum(so.total_amount) sumamount ");
			fromBuilder.append(" FROM cc_sales_outstock so ");
			fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON sojo.outstock_id = so.id ");
			fromBuilder.append(" LEFT JOIN cc_sales_order cso ON cso.id = sojo.order_id ");
			fromBuilder.append(" LEFT JOIN cc_seller cs ON cso.seller_id = cs.id ");
			
			fromBuilder.append(" where cso.data_area like '"+selDataArea+"' ");
			if(by.equals("day")) {
				fromBuilder.append("and DATE_FORMAT(so.create_date, '%Y-%m-%d') = DATE_FORMAT(NOW(), '%Y-%m-%d') ");
			}else if(by.equals("month")) {
				fromBuilder.append("and so.create_date like CONCAT(DATE_FORMAT(NOW(),'%Y-%m'),'%') ");
			}
			fromBuilder.append("and cs.seller_type = 1 ");
			fromBuilder.append("group by cso.seller_id order by sumamount ");
			fromBuilder.append(desc+" limit 0,5) t1 ORDER BY t1.sumamount ");
			return Db.find(fromBuilder.toString());
		}
	
	//销售额 周/月/季度 统计
	public List<Record> queryAmountBy(String selDataArea,String by){
		StringBuilder fromBuilder = new StringBuilder("");
		if(by.equals("weeks")) {
			fromBuilder.append("select DATE_FORMAT(cso.create_date,'%Y-%u') title,sum(cso.total_amount) sumamount from cc_sales_order cso ");
			fromBuilder.append("where cso.data_area like '"+selDataArea+"' ");
			fromBuilder.append("GROUP BY title ");
		}
		if(by.equals("months")) {
			fromBuilder.append("select DATE_FORMAT(cso.create_date,'%Y-%m') title,sum(cso.total_amount) sumamount from cc_sales_order cso ");
			fromBuilder.append("where cso.data_area like '"+selDataArea+"' ");
			fromBuilder.append("GROUP BY title ");
		}
		if(by.equals("quarter")) {
			fromBuilder.append("select CONCAT(YEAR(cso.create_date),'-',quarter(cso.create_date)) `title`,sum(cso.total_amount) sumamount from cc_sales_order cso  ");
			fromBuilder.append("where cso.data_area like '"+selDataArea+"' ");
			fromBuilder.append("GROUP BY `title`");
		}
		return Db.find(fromBuilder.toString());
	}

	public List<Record> getGiftCountByUser(String startDate, String endDate, String dayTag, String deptId,
			String sellerId, String dataArea, String orderTag, String print) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.product_amount),0) as totalAmount, IFNULL(SUM(cc.product_count/cp.convert_relate),0) as productCount, COUNT(*) as orderCount, u.realname, u.id ");
		fromBuilder.append("FROM cc_sales_order_detail cc ");
		fromBuilder.append("LEFT JOIN cc_sales_order cs on cc.order_id = cs.id ");
		fromBuilder.append("LEFT JOIN `user` u ON u.id = cs.biz_user_id ");
		fromBuilder.append("LEFT JOIN cc_seller_product csp on cc.sell_product_id = csp.id ");
		fromBuilder.append("LEFT JOIN cc_product cp on cp.id = csp.product_id ");		
		boolean needWhere = true;
		if (StringUtils.isNotBlank(deptId)) {
			needWhere = appendIfNotEmpty(fromBuilder, " u.department_id", deptId, params, needWhere);
		} else {
			needWhere = appendIfNotEmptyWithLike(fromBuilder, " u.data_area", dataArea, params, needWhere);
			needWhere = appendIfNotEmpty(fromBuilder, " cs.seller_id", sellerId, params, needWhere);
		}
		if (needWhere) {
			fromBuilder.append(" where cs.status not in (1001,1002) and cc.is_gift = 1 ");
		} else {
			fromBuilder.append(" and cs.status not in (1001,1002) and cc.is_gift = 1 ");
		}
		
		if (StrKit.notBlank(print)) {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cs.print_time >= ? ");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cs.print_time <= ? ");
				params.add(endDate);
			}
		} else {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cs.create_date >= ? ");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cs.create_date <= ? ");
				params.add(endDate);
			}
		}

		fromBuilder.append("GROUP BY u.id ");
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag + " desc ");
		} else {
			fromBuilder.append("ORDER BY productCount desc ");
		}
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}
	
	public List<Record> getGiftCountByUserByOutStock(String startDate, String endDate, String dayTag, String deptId,
			String sellerId, String dataArea, String orderTag) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.product_amount),0) as totalAmount, IFNULL(SUM(cc.product_count/cp.convert_relate),0) as productCount, COUNT(*) as orderCount, u.realname, u.id ");
		fromBuilder.append("FROM cc_sales_outstock_detail cc LEFT JOIN cc_sales_outstock o ON o.id = cc.outstock_id ");
		fromBuilder.append("LEFT JOIN cc_seller_product csp on cc.sell_product_id = csp.id ");
		fromBuilder.append("LEFT JOIN cc_sales_order_join_outstock cso on cso.outstock_id = o.id ");
		fromBuilder.append("LEFT JOIN cc_sales_order cs on cs.id = cso.order_id ");
		fromBuilder.append("LEFT JOIN `user` u ON u.id = cs.biz_user_id ");
		fromBuilder.append("LEFT JOIN cc_product cp on cp.id = csp.product_id ");
		boolean needWhere = true;
		if (StringUtils.isNotBlank(deptId)) {
			needWhere = appendIfNotEmpty(fromBuilder, " u.department_id", deptId, params, needWhere);
		} else {
			needWhere = appendIfNotEmptyWithLike(fromBuilder, " u.data_area", dataArea, params, needWhere);
			needWhere = appendIfNotEmpty(fromBuilder, " o.seller_id", sellerId, params, needWhere);
		}
		if (needWhere) {
			fromBuilder.append(" where o.status != ? and cc.is_gift = 1");
		} else {
			fromBuilder.append(" and o.status != ? and cc.is_gift = 1");
		}
		params.add(Consts.SALES_OUT_STOCK_STATUS_DEFUALT);
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and o.biz_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and o.biz_date <= ? ");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY u.id ");
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag + " desc ");
		} else {
			fromBuilder.append("ORDER BY productCount desc ");
		}
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}	

	public List<Record> getSellerCount(String startDate, String endDate, String dayTag, String sellerId,
			String dataArea, String orderTag, String print) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.total_count),0) as productCount ,IFNULL(sum(cc.total_amount),0) as totalAmount, ");
		fromBuilder.append("COUNT(cc.id) as orderCount, cs.seller_name, cs.id FROM cc_sales_order cc ");
		fromBuilder.append("LEFT JOIN cc_seller cs on cs.id = cc.seller_id ");
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
		if (needWhere) {
			fromBuilder.append(" where cc.status not in (1001,1002) ");
		} else {
			fromBuilder.append(" and cc.status not in (1001,1002) ");
		}
		
		if (StrKit.notBlank(print)) {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cc.print_time >= ? ");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cc.print_time <= ? ");
				params.add(endDate);
			}
		} else {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cc.create_date >= ? ");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cc.create_date <= ? ");
				params.add(endDate);
			}
		}

		fromBuilder.append("GROUP BY cc.seller_id ");
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag + " desc ");
		} else {
			fromBuilder.append("ORDER BY productCount desc ");
		}
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}
	
	public List<Record> getSellerCountByOutStock(String startDate, String endDate, String dayTag, String sellerId,
			String dataArea, String orderTag) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT cs.seller_name, cs.id, SUM(cc.total_amount) as totalAmount,IFNULL(t1.productCount,0) as productCount, COUNT(cc.id) as orderCount FROM cc_sales_outstock cc ");
		fromBuilder.append("LEFT JOIN (SELECT SUM(cd.product_count/cp.convert_relate) as productCount, cd.outstock_id FROM cc_sales_outstock_detail cd ");
		fromBuilder.append("LEFT JOIN cc_seller_product sp ON sp.id = cd.sell_product_id ");
		fromBuilder.append("LEFT JOIN cc_product cp ON cp.id = sp.product_id ");
		fromBuilder.append("GROUP BY cd.outstock_id) t1 on t1.outstock_id = cc.id ");
		fromBuilder.append("LEFT JOIN cc_seller cs on cs.id = cc.seller_id ");
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
		if (needWhere) {
			fromBuilder.append(" where cc.status != ? ");
		} else {
			fromBuilder.append(" and cc.status != ? ");
		}
		params.add(Consts.SALES_OUT_STOCK_STATUS_DEFUALT);
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.biz_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.biz_date <= ? ");
			params.add(endDate);
		}

		fromBuilder.append("GROUP BY cc.seller_id ");
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag + " desc ");
		} else {
			fromBuilder.append("ORDER BY productCount desc ");
		}
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}	

	public List<Record> getGiftCountBySeller(String startDate, String endDate, String dayTag, String dataArea, String orderTag, String print) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.product_amount),0) as totalAmount, IFNULL(SUM(cc.product_count/cp.convert_relate),0) as productCount, COUNT(*) as orderCount, se.seller_name, cs.seller_id ");
		fromBuilder.append("FROM cc_sales_order_detail cc ");
		fromBuilder.append("LEFT JOIN cc_sales_order cs on cc.order_id = cs.id ");
		fromBuilder.append("LEFT JOIN cc_seller se on se.id = cs.seller_id ");
		fromBuilder.append("LEFT JOIN cc_seller_product csp on cc.sell_product_id = csp.id ");
		fromBuilder.append("LEFT JOIN cc_product cp on cp.id = csp.product_id ");	
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
		if (needWhere) {
			fromBuilder.append(" where cs.status not in (1001,1002) and cc.is_gift = 1 ");
		} else {
			fromBuilder.append(" and cs.status not in (1001,1002) and cc.is_gift = 1 ");
		}
		
		if (StrKit.notBlank(print)) {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cs.print_time >= ? ");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cs.print_time <= ? ");
				params.add(endDate);
			}
		} else {
			if (StrKit.notBlank(startDate)) {
				fromBuilder.append(" and cs.create_date >= ? ");
				params.add(startDate);
			}

			if (StrKit.notBlank(endDate)) {
				fromBuilder.append(" and cs.create_date <= ? ");
				params.add(endDate);
			}
		}

		fromBuilder.append("GROUP BY cs.seller_id ");
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag + " desc ");
		} else {
			fromBuilder.append("ORDER BY productCount desc ");
		}
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}
	
	public List<Record> getGiftCountBySellerByOutStock(String startDate, String endDate, String dayTag, String dataArea,
			String orderTag) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.product_amount),0) as totalAmount, IFNULL(SUM(cc.product_count/cp.convert_relate),0) as productCount, COUNT(*) as orderCount, se.seller_name, cs.seller_id ");
		fromBuilder.append("FROM cc_sales_outstock_detail cc ");
		fromBuilder.append("LEFT JOIN cc_sales_outstock cs on cc.outstock_id = cs.id ");
		fromBuilder.append("LEFT JOIN cc_seller se on se.id = cs.seller_id ");
		fromBuilder.append("LEFT JOIN cc_seller_product csp on cc.sell_product_id = csp.id ");
		fromBuilder.append("LEFT JOIN cc_product cp on cp.id = csp.product_id ");	
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " cs.data_area", dataArea, params, needWhere);
		if (needWhere) {
			fromBuilder.append(" where cs.status != ? and cc.is_gift = 1");
		} else {
			fromBuilder.append(" and cs.status != ? and cc.is_gift = 1");
		}
		params.add(Consts.SALES_OUT_STOCK_STATUS_DEFUALT);

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cs.biz_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cs.biz_date <= ? ");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY cs.seller_id ");
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag + " desc ");
		} else {
			fromBuilder.append("ORDER BY productCount desc ");
		}
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}	

	public List<Record> sellerProductCount(String startDate, String endDate, String dayTag, String productType,
			String sellerId, String isGift, String customerId, String dataArea) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.product_amount),0) as totalAmount, IFNULL(SUM(cc.product_count/cp.convert_relate),0) as productCount,");
		fromBuilder.append(" COUNT(*) as orderCount, cs.custom_name FROM cc_sales_order_detail cc ");
		fromBuilder.append(" LEFT JOIN cc_seller_product cs on cc.sell_product_id = cs.id ");
		fromBuilder.append(" LEFT JOIN cc_product cp on cp.id = cs.product_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_order c on c.id = cc.order_id ");
		if (StrKit.notBlank(productType)) {
			fromBuilder.append(" JOIN cc_goods g ON cp.goods_id = g.id ");
			fromBuilder.append(" JOIN cc_goods_category gc ON g.goods_category_id = gc.id ");
			fromBuilder.append(" JOIN cc_goods_type gt on g.goods_type_id = gt.id ");
		}
		
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " c.data_area", dataArea, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " c.seller_id", sellerId, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " gt.id", productType, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " c.customer_id", customerId, params, needWhere);
		
		if (needWhere) {
			fromBuilder.append(" where c.status not in (1001,1002) ");
		} else {
			fromBuilder.append(" and c.status not in (1001,1002) ");
		}
		
		if (StrKit.notBlank(isGift)) {
			fromBuilder.append(" and cc.is_gift = 1 ");
		} else {
			fromBuilder.append(" and cc.is_gift = 0 ");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.create_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.create_date <= ? ");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY cs.custom_name ");
		fromBuilder.append("ORDER BY totalAmount desc ");
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}

	public Record sellerOrderAmount(String startDate, String endDate, String dayTag, String customerType,
			String sellerId, String purchase, String customerId, String dataArea) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.total_count),0) as productCount, IFNULL(SUM(cc.total_amount),0) as totalAmount, count(*) as orderCount FROM cc_sales_order cc ");
		fromBuilder.append("LEFT JOIN cc_customer_type ct on cc.customer_type_id = ct.id ");
		fromBuilder.append("LEFT JOIN cc_seller_customer cs on cc.customer_id = cs.id ");
		fromBuilder.append("LEFT JOIN cc_customer cu on cs.customer_id = cu.id ");		
		
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " cc.seller_id", sellerId, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "cc.customer_type_id", customerType, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " cc.customer_id", customerId, params, needWhere);
		if (StrKit.notBlank(purchase)) {
			needWhere = appendIfNotEmpty(fromBuilder, "cs.customer_kind", Consts.CUSTOMER_KIND_SELLER, params, needWhere);
		}
		
		if (needWhere) {
			fromBuilder.append(" where cc.status not in (1001,1002)");
		} else {
			fromBuilder.append(" and cc.status not in (1001,1002)");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.create_date >= ?");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.create_date <= ?");
			params.add(endDate);
		}
		
		if (params.isEmpty())
			return Db.findFirst(fromBuilder.toString());

		return Db.findFirst(fromBuilder.toString(), params.toArray());
	}
	
	public Record findRecordById(final String id) {
		StringBuilder fromBuilder = new StringBuilder(" select so.order_sn, so.create_date AS createDate, u.realname AS salesName, sos.outstock_sn, sos.create_date AS passDate, uu.realname AS outName, sos.biz_date AS outDate ");
		fromBuilder.append(" from `cc_sales_order` so ");
		fromBuilder.append(" LEFT JOIN USER u ON so.biz_user_id = u.id ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON so.id = sojo.order_id ");
		fromBuilder.append(" LEFT JOIN cc_sales_outstock sos ON sojo.outstock_id = sos.id ");
		fromBuilder.append(" LEFT JOIN USER uu ON sos.biz_user_id = uu.id ");
		fromBuilder.append(" where so.id = ? ");

		return Db.findFirst(fromBuilder.toString(), id);
	}

	public List<Record> getSellerPurchase(String startDate, String endDate, String dayTag, String sellerId,
			String dataArea) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.total_count),0) as productCount ,IFNULL(sum(cc.total_amount),0) as totalAmount, ");
		fromBuilder.append("COUNT(cc.id) as orderCount, cu.customer_name ,cc.customer_id FROM cc_sales_order cc ");
		fromBuilder.append("LEFT JOIN cc_seller_customer cs on cc.customer_id = cs.id ");
		fromBuilder.append("LEFT JOIN cc_customer cu on cs.customer_id = cu.id ");
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " cs.customer_kind", Consts.CUSTOMER_KIND_SELLER, params, needWhere);
		if (needWhere) {
			fromBuilder.append(" where cc.status not in (1001,1002) ");
		} else {
			fromBuilder.append(" and cc.status not in (1001,1002) ");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.create_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.create_date <= ? ");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY cc.customer_id ");
		fromBuilder.append("ORDER BY totalAmount desc ");
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}

	public List<Record> getSellerPurchaseGift(String startDate, String endDate, String dayTag, String sellerId,
			String dataArea) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.product_amount),0) as totalAmount, IFNULL(SUM(cc.product_count/cp.convert_relate),0) as productCount, ");
		fromBuilder.append("COUNT(*) as orderCount, cu.customer_name, c.customer_id FROM cc_sales_order_detail cc ");
		fromBuilder.append("LEFT JOIN cc_seller_product cs on cc.sell_product_id = cs.id ");
		fromBuilder.append("LEFT JOIN cc_product cp on cp.id = cs.product_id ");
		fromBuilder.append("LEFT JOIN cc_sales_order c on c.id = cc.order_id ");
		fromBuilder.append("LEFT JOIN cc_seller_customer csc on c.customer_id = csc.id ");
		fromBuilder.append("LEFT JOIN cc_customer cu on csc.customer_id = cu.id ");		
		
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " c.data_area", dataArea, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " csc.customer_kind", Consts.CUSTOMER_KIND_SELLER, params, needWhere);
		
		if (needWhere) {
			fromBuilder.append(" where c.status not in (1001,1002) and cc.is_gift = 1 ");
		} else {
			fromBuilder.append(" and c.status not in (1001,1002) and cc.is_gift = 1 ");
		}
		
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.create_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.create_date <= ? ");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY c.customer_id ");
		fromBuilder.append("ORDER BY totalAmount desc ");
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}
	
	public Record findMoreBySn(final String re_sn) {
		StringBuilder fromBuilder = new StringBuilder(" select o.*,c.customer_name, c.contact as ccontact, c.mobile as cmobile, c.address as caddress, ct.name as customerTypeName, ct.code as typeCode,ct.proc_def_key, u.realname, u.mobile, cp.factor ,cc.id as sellerCustomerId,cc.customer_kind ");
		fromBuilder.append(" from `cc_sales_order` o ");
		fromBuilder.append(" left join cc_seller_customer cc ON o.customer_id = cc.id ");
		fromBuilder.append(" left join cc_customer c on cc.customer_id = c.id ");
		fromBuilder.append(" left join cc_customer_type ct on o.customer_type_id = ct.id ");
		fromBuilder.append(" left join cc_price_system cp on cp.id = ct.price_system_id ");
		fromBuilder.append(" left join user u on o.biz_user_id = u.id ");
		fromBuilder.append(" where o.order_sn = ? ");

		return Db.findFirst(fromBuilder.toString(), re_sn);
	}
	
	public SalesOrder findByOrderSn(String orderSn){
		String sql = "select * from cc_sales_order where order_sn = ?";
		return DAO.findFirst(sql, orderSn);
	}
	
	public List<Record> findByDataArea(String dataArea){
		String sql = "select DISTINCT u.id,u.realname from cc_sales_order o LEFT JOIN user u on u.id = o.biz_user_id where o.data_area like '"+dataArea+"'";
		return Db.find(sql);
	}

	public List<Record> getDepartmentCount(String startDate, String endDate, String dayTag, String sellerId,
			String dataArea, String orderTag) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.total_count),0) as productCount, IFNULL(sum(cc.total_amount),0) as totalAmount, ");
		fromBuilder.append("COUNT(*) as orderCount, d.dept_name, d.id FROM cc_sales_order cc ");
		fromBuilder.append("LEFT JOIN department d ON cc.dept_id = d.id ");
		boolean needWhere = true;
		
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " cc.seller_id", sellerId, params, needWhere);
		
		if (needWhere) {
			fromBuilder.append(" where cc.status not in (1001,1002)");
		} else {
			fromBuilder.append(" and cc.status not in (1001,1002)");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.create_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.create_date <= ? ");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY d.id ");
		
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag + " desc ");
		} else {
			fromBuilder.append("ORDER BY totalAmount desc ");
		}		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}
	
	public SalesOrder findOutOrderId(String outStockId) {
		String sql = "select o.* from cc_sales_order o "
				+ "LEFT join  cc_sales_order_join_outstock sojo on sojo.order_id = o.id "
				+ "where sojo.outstock_id = '"+outStockId+"'";
		return DAO.findFirst(sql);
	}
	
	public List<SalesOrder> findAllByDataArea(String dataArea,String startDate,String endDate){
		String sql = "select u.id,u.realname from cc_sales_order o LEFT JOIN user u on u.id = o.biz_user_id where o.data_area like '"+dataArea+"' and o.status not in (1001,1002) and o.create_date>'"+startDate+"' and o.create_date< '"+endDate+"'";
		return DAO.find(sql);
	}
	
	public int findOrderCount(String dataArea,String startDate,String endDate){
		int count = 0;
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("select count(*) as count from cc_sales_order o where o.status not in (1001,1002) ");
		appendIfNotEmptyWithLike(fromBuilder, "o.data_area", dataArea, params, false);
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and o.create_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and o.create_date <= ? ");
			params.add(endDate);
		}		
		Record record = Db.findFirst(fromBuilder.toString(), params.toArray());
		if (record != null) {
			count = record.getInt("count");
		}
		return count;
	}	

	public List<Record> findMoney(String startDate, String endDate, String keyword, String userId) {
		StringBuilder fromBuilder=new StringBuilder("SELECT IFNULL(SUM(so.total_amount) , 0) - IFNULL(t1.amount , 0) totalAmount,so.customer_id ");
		fromBuilder.append(" FROM cc_sales_order so ");
		fromBuilder.append(" LEFT JOIN cc_sales_order_join_outstock sojo ON sojo.order_id=so.id ");
		fromBuilder.append(" LEFT JOIN cc_sales_outstock cso ON cso.id=sojo.outstock_id ");
		fromBuilder.append(" LEFT JOIN( SELECT IFNULL(SUM(sri.total_reject_amount) , 0) amount , sri.outstock_id FROM cc_sales_refund_instock sri WHERE sri. STATUS NOT IN("+Consts.SALES_REFUND_INSTOCK_DEFUALT+","+Consts.SALES_REFUND_INSTOCK_CANCEL+") GROUP BY sri.outstock_id) t1 ON t1.outstock_id in (cso.id) ");
		fromBuilder.append(" WHERE so.biz_user_id ='"+userId+"'");
		fromBuilder.append(" and so.status NOT in("+Consts.SALES_ORDER_STATUS_CANCEL+","+Consts.SALES_ORDER_STATUS_REJECT+") ");
		fromBuilder.append(" AND "+ keyword+" >= '"+startDate+"'");
		fromBuilder.append(" AND "+ keyword+" <= '"+endDate+"'");
		fromBuilder.append(" GROUP BY so.customer_id");
		return Db.find(fromBuilder.toString());
	}

	public Record getOrderListCount(String keyword, String status, String customerTypeId, String startDate,
			String endDate, String sellerId, String selectDataArea) {
		StringBuilder fromBuilder = new StringBuilder("select IFNULL(SUM(o.total_amount),0) as totalAmount, count(*) as orderCount from `cc_sales_order` o ");
		fromBuilder.append("left join cc_seller_customer cc ON o.customer_id = cc.id ");
		fromBuilder.append("left join cc_customer c on cc.customer_id = c.id ");
		fromBuilder.append("left join cc_customer_type ct on o.customer_type_id = ct.id ");
		fromBuilder.append("left join act_ru_task a on o.proc_inst_id = a.PROC_INST_ID_ ");
		fromBuilder.append("LEFT JOIN cc_sales_order_join_outstock so on so.order_id = o.id ");
		fromBuilder.append("LEFT JOIN cc_sales_outstock s on s.id = so.outstock_id ");
		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = true;

		needWhere = appendIfNotEmpty(fromBuilder, "o.status", status, params, needWhere);
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "ct.name", customerTypeId, params, needWhere);
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "o.data_area", selectDataArea, params, needWhere);
//		needWhere = appendIfNotEmpty(fromBuilder, "o.seller_id", sellerId, params, needWhere);

		if (needWhere) {
			fromBuilder.append(" where 1 = 1");
		}
		
		if (StrKit.notBlank(keyword)) {
			fromBuilder.append(" and (o.order_sn like '%" + keyword + "%' or c.customer_name like '%" + keyword + "%')");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and o.create_date >= ?");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and o.create_date <= ?");
			params.add(endDate);
		}
		
		if(StrKit.isBlank(status)) {
			fromBuilder.append(" and o.status not in ('"+Consts.SALES_ORDER_STATUS_CANCEL+"','"+Consts.SALES_ORDER_STATUS_REJECT+"') ");
		}

		if (params.isEmpty())
			return Db.findFirst(fromBuilder.toString());

		return Db.findFirst(fromBuilder.toString(), params.toArray());
	}

	public SalesOrder findByOutstockId(String s) {
		StringBuilder fromBuilder = new StringBuilder("SELECT * from cc_sales_outstock sok ");
		fromBuilder.append("LEFT JOIN cc_sales_order_join_outstock sojo ON sojo.outstock_id=sok.id ");
		fromBuilder.append("LEFT JOIN cc_sales_order so ON so.id=sojo.order_id ");
		fromBuilder.append("WHERE sok.id= '"+s+"'");
		return DAO.findFirst(fromBuilder.toString());
	}
	
	public int updateQrcodeImgUrl(String qrcodeImgUrl,String orderId,Date date) {

		return Db.update("update cc_sales_order set order_qrcode_url = ?, confirm_date = ? where id = ?",qrcodeImgUrl,
				date, orderId);

	}
//查找已下订单的业务员
	public List<SalesOrder> findBySellerIdAndDataArea(String sellerId,String dataArea){
		StringBuilder fromBuilder = new StringBuilder("select cs.biz_user_id, u.realname from cc_sales_order cs ");
		fromBuilder.append("LEFT JOIN user u on u.id = cs.biz_user_id ");
//		fromBuilder.append("where cs.seller_id  ='"+sellerId+"' ");
		fromBuilder.append("where cs.data_area  like '"+dataArea+"' ");
		fromBuilder.append(" GROUP BY cs.biz_user_id");
		return DAO.find(fromBuilder.toString());
	}
	
	public Page<Record> _paginateForApp(int pageNumber, int pageSize, String keyword, String status,
			String customerTypeId, String startDate, String endDate, String sellerId, String dataArea,String bizUserId) {
		String select = "select o.*, c.customer_name, c.contact as ccontact, c.mobile as cmobile, ct.name as customerTypeName, a.ID_ taskId, a.NAME_ taskName, a.ASSIGNEE_ assignee";
		StringBuilder fromBuilder = new StringBuilder("from `cc_sales_order` o ");
		fromBuilder.append("left join cc_seller_customer cc ON o.customer_id = cc.id ");
		fromBuilder.append("left join cc_customer c on cc.customer_id = c.id ");
		fromBuilder.append("left join cc_customer_type ct on o.customer_type_id = ct.id ");
		fromBuilder.append("left join act_ru_task a on o.proc_inst_id = a.PROC_INST_ID_ ");
		fromBuilder.append("LEFT JOIN user u on u.id = o.biz_user_id ");
		LinkedList<Object> params = new LinkedList<Object>();
		boolean needWhere = true;

		needWhere = appendIfNotEmpty(fromBuilder, "o.status", status, params, needWhere);
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "ct.name", customerTypeId, params, needWhere);
//		needWhere = appendIfNotEmpty(fromBuilder, "o.customer_type_id", customerTypeId, params, needWhere);
		needWhere = appendIfNotEmptyWithLike(fromBuilder, "o.data_area", dataArea, params, needWhere);
//		needWhere = appendIfNotEmpty(fromBuilder, "o.seller_id", sellerId, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "o.biz_user_id", bizUserId, params, needWhere);

		if (needWhere) {
			fromBuilder.append(" where 1 = 1");
		}
		
		if (StrKit.notBlank(keyword)) {
			fromBuilder.append(" and (o.order_sn like '%" + keyword + "%' or c.customer_name like '%" + keyword + "%' or u.realname like '%" + keyword + "%')");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and o.create_date >= ?");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and o.create_date <= ?");
			params.add(endDate);
		}

		fromBuilder.append(" order by o.create_date desc ");

		if (params.isEmpty())
			return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString());

		return Db.paginate(pageNumber, pageSize, select, fromBuilder.toString(), params.toArray());
	}

	public List<Record> getUserRankZero(String startDate, String endDate, String dayTag, String sellerId,
			String orderTag, String dataArea) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(amount), 0) AS totalAmount, IFNULL(SUM(count), 0) AS productCount, ");
		fromBuilder.append("IFNULL(orderCount,0) AS orderCount, u.realname, u.avatar, u.id FROM `user` u ");
		fromBuilder.append("LEFT JOIN (SELECT SUM(cc.total_count) AS count, SUM(cc.total_amount) AS amount, cc.biz_user_id, ");
		fromBuilder.append("COUNT(*) AS orderCount, cc.`status`, cc.create_date FROM cc_sales_order cc ");
		fromBuilder.append("WHERE cc. STATUS NOT IN (1001, 1002) ");
		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.create_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.create_date <= ? ");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY cc.biz_user_id ) t1 ON t1.biz_user_id = u.id ");
		boolean needWhere = true;
		needWhere = appendIfNotEmptyWithLike(fromBuilder, " u.data_area", dataArea, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, " cc.seller_id", sellerId, params, needWhere);
		fromBuilder.append("GROUP BY u.id ");
		
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag + " desc ");
		} else {
			fromBuilder.append("ORDER BY totalAmount desc ");
		}
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}

	public List<Record> getMyOrderByCustomerOut(String startDate, String endDate, String dayTag, String customerType, String sellerId,
			String userId, String dataArea, String orderTag) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(t1.productCount), 0) AS productCount, IFNULL(SUM(cc.total_amount),0) as totalAmount, count(*) as orderCount, ");
		fromBuilder.append("cu.customer_name, cc.customer_id as customerId FROM cc_sales_outstock cc ");
		fromBuilder.append("LEFT JOIN cc_seller_customer cs on cs.id = cc.customer_id ");
		fromBuilder.append("LEFT JOIN cc_customer cu on cu.id = cs.customer_id ");
		fromBuilder.append("LEFT JOIN cc_customer_type ct on cc.customer_type_id = ct.id ");
		fromBuilder.append("LEFT JOIN (SELECT SUM(cd.product_count/cp.convert_relate) as productCount, cd.outstock_id FROM cc_sales_outstock_detail cd ");
		fromBuilder.append("LEFT JOIN cc_seller_product sp ON sp.id = cd.sell_product_id ");
		fromBuilder.append("LEFT JOIN cc_product cp on cp.id = sp.product_id ");
		fromBuilder.append("GROUP BY cd.outstock_id) t1 on t1.outstock_id = cc.id ");
		fromBuilder.append("LEFT JOIN cc_sales_order_join_outstock cso ON cso.outstock_id = cc.id ");
		fromBuilder.append("LEFT JOIN cc_sales_order od ON od.id = cso.order_id ");		
		boolean needWhere = true;
		
		if (StrKit.notBlank(userId)) {
			needWhere = appendIfNotEmpty(fromBuilder, " cc.biz_user_id", userId, params, needWhere);
		} else {
			needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
			needWhere = appendIfNotEmpty(fromBuilder, " cc.seller_id", sellerId, params, needWhere);
		}
		needWhere = appendIfNotEmpty(fromBuilder, "cc.customer_type_id", customerType, params, needWhere);
		
		if (needWhere) {
			fromBuilder.append(" where cc.status != ? ");
		} else {
			fromBuilder.append(" and cc.status != ? ");
		}
		params.add(Consts.SALES_OUT_STOCK_STATUS_DEFUALT);

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.create_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.create_date <= ? ");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY cu.customer_name ");
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag +" desc ");
		} else {
			fromBuilder.append("ORDER BY totalAmount desc ");
		}
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}

	public List<Record> getMyOrderByProductOut(String startDate, String endDate, String dayTag, String productType, String sellerId, 
			String userId, String customerId, String isGift, String dataArea, String deptId, String orderTag, String isHide) {
		if (StrKit.notBlank(dayTag)) {
			String[] date = DateUtils.getStartDateAndEndDateByType(dayTag);
			startDate = date[0];
			endDate = date[1];
		}
		LinkedList<Object> params = new LinkedList<Object>();
		StringBuilder fromBuilder = new StringBuilder("SELECT IFNULL(SUM(cc.product_amount),0) as totalAmount, IFNULL(SUM(cc.product_count/cp.convert_relate),0) as productCount, ");
		fromBuilder.append("COUNT(*) as orderCount, cs.custom_name FROM cc_sales_outstock_detail cc ");
		fromBuilder.append("LEFT JOIN cc_seller_product cs on cc.sell_product_id = cs.id ");
		fromBuilder.append("LEFT JOIN cc_product cp on cp.id = cs.product_id ");
		fromBuilder.append("LEFT JOIN cc_sales_outstock c on c.id = cc.outstock_id ");
		if (StrKit.notBlank(productType)) {
			fromBuilder.append(" JOIN cc_goods g ON cp.goods_id = g.id ");
			fromBuilder.append(" JOIN cc_goods_category gc ON g.goods_category_id = gc.id ");
			fromBuilder.append(" JOIN cc_goods_type gt on g.goods_type_id = gt.id ");
		}
		
		boolean needWhere = true;
		if (StrKit.isBlank(userId)) {
			needWhere = appendIfNotEmptyWithLike(fromBuilder, " cc.data_area", dataArea, params, needWhere);
			needWhere = appendIfNotEmpty(fromBuilder, " c.seller_id", sellerId, params, needWhere);
		}
		if (StrKit.notBlank(isHide)) {
			needWhere = appendIfNotEmpty(fromBuilder, "cs.is_source", Consts.SELLER_PRODUCT_SOURCE_DEALER, params, needWhere);
		}
		needWhere = appendIfNotEmpty(fromBuilder, " gt.id", productType, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "c.biz_user_id", userId, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "c.customer_id", customerId, params, needWhere);
		needWhere = appendIfNotEmpty(fromBuilder, "cc.dept_id", deptId, params, needWhere);
		
		if (needWhere) {
			fromBuilder.append(" where c.status not in (1001,1002) ");
		} else {
			fromBuilder.append(" and c.status not in (1001,1002) ");
		}
		
		if (StrKit.notBlank(isGift)) {
			fromBuilder.append(" and cc.is_gift = 1 ");
		} else {
			fromBuilder.append(" and cc.is_gift = 0 ");
		}

		if (StrKit.notBlank(startDate)) {
			fromBuilder.append(" and cc.create_date >= ? ");
			params.add(startDate);
		}

		if (StrKit.notBlank(endDate)) {
			fromBuilder.append(" and cc.create_date <= ? ");
			params.add(endDate);
		}
		fromBuilder.append("GROUP BY cs.custom_name ");
		
		if (StrKit.notBlank(orderTag)) {
			fromBuilder.append("ORDER BY "+ orderTag +" desc ");
		} else {
			fromBuilder.append("ORDER BY totalAmount desc ");
		}
		
		if (params.isEmpty())
			return Db.find(fromBuilder.toString());

		return Db.find(fromBuilder.toString(), params.toArray());
	}
 }
