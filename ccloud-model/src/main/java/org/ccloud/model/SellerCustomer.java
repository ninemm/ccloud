/**
 * Copyright (c) 2015-2016, Eric Huang 黄鑫 (hx50859042@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.ccloud.model;

import java.beans.PropertyDescriptor;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

import org.ccloud.model.base.BaseSellerCustomer;
import org.ccloud.model.core.Table;
import org.ccloud.model.query.CustomerQuery;
import org.ccloud.model.vo.CustomerVO;
import org.ccloud.model.vo.ImageJson;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.annotation.JSONField;
import com.jfinal.kit.StrKit;

/**
 * Generated by 九毫米(http://9mm.tech).
 */
@Table(tableName="cc_seller_customer",primaryKey="id")
public class SellerCustomer extends BaseSellerCustomer<SellerCustomer> {

	private static final long serialVersionUID = 1L;
	
	public static final String CUSTOMER_NORMAL = "100101";
	public static final String CUSTOMER_AUDIT = "100102";
	public static final String CUSTOMER_REJECT = "100103";

	public Customer getCustomer() {
		return CustomerQuery.me().findById(getCustomerId());
	}
	
	public List<ImageJson> getImageList() {
		
		String imageListStore = getImageListStore();
		if (StrKit.notBlank(imageListStore)) {
			List<ImageJson> list = JSON.parseArray(imageListStore, ImageJson.class);
			return list;
		}
		return null;
	}
	
	@SuppressWarnings("rawtypes")
	public List<String> contrastObj(Object src, Object dest) {
		
		if (src instanceof CustomerVO && dest instanceof CustomerVO) {
			CustomerVO scustomer = (CustomerVO) src;
			CustomerVO dcustomer = (CustomerVO) dest;
			List<String> diffAttrList = new ArrayList<String>();
			
			try {
				Class clazz = scustomer.getClass();
				Field[] fields = scustomer.getClass().getDeclaredFields();
				
				for (Field field : fields) {
					
					if (StrKit.equals(field.getName(), "serialVersionUID")) {
						continue;
					}
					
					JSONField jsonField = field.getAnnotation(JSONField.class);
					if (jsonField == null)
						continue;
					
					PropertyDescriptor pd = new PropertyDescriptor(field.getName(), clazz);
					Method getMethod = pd.getReadMethod();
					Object srcObj = getMethod.invoke(scustomer);
					Object destObj = getMethod.invoke(dcustomer);
					
					if (srcObj == null && destObj == null) {
						continue;
					} else {
						if (destObj != null) {
							if (srcObj != null) {
								if(!srcObj.toString().equals(destObj.toString())) {
									diffAttrList.add(jsonField.name() + ": " + destObj.toString());
								}
								
							} else {
								diffAttrList.add(jsonField.name() + ": " + destObj.toString());
							}
						}
					}
				}
			} catch (Exception e) {
				e.printStackTrace();
				return null;
			}
			
			return diffAttrList;
		}
		return null;
	}
}
